author: SimonHuber
created: 20190216115430179
dependents: 
description: a TiddlyWiki5 plugin for enhanced navigation
list: readme license usage
modified: 20190216115430179
plugin-type: plugin
title: $:/plugins/BurningTreeC/navigator
type: application/json
version: v0.0.3

{
    "tiddlers": {
        "$:/config/EditCancelPopups": {
            "title": "$:/config/EditCancelPopups",
            "text": "yes"
        },
        "$:/config/EditTabindex": {
            "title": "$:/config/EditTabindex",
            "text": "1"
        },
        "$:/config/FocusedTiddler/Style/ClassSelector": {
            "title": "$:/config/FocusedTiddler/Style/ClassSelector",
            "text": ".tc-tiddler-frame"
        },
        "$:/config/FocusedTiddler/Style": {
            "title": "$:/config/FocusedTiddler/Style",
            "text": "border: 1px solid <<colour foreground>>;"
        },
        "$:/config/ShortcutInfo/close-focused-tiddler": {
            "title": "$:/config/ShortcutInfo/close-focused-tiddler",
            "text": "close (or cancel) the focused tiddler"
        },
        "$:/config/ShortcutInfo/edit-focused-tiddler": {
            "title": "$:/config/ShortcutInfo/edit-focused-tiddler",
            "text": "edit the focused tiddler"
        },
        "$:/config/ShortcutInfo/more-tiddler-actions": {
            "title": "$:/config/ShortcutInfo/more-tiddler-actions",
            "text": "open the more-tiddler-actions popup of the focused tiddler"
        },
        "$:/config/ShortcutInfo/navigate-story-down": {
            "title": "$:/config/ShortcutInfo/navigate-story-down",
            "text": "navigate down the story river to the next tiddler after the focused one"
        },
        "$:/config/ShortcutInfo/navigate-story-up": {
            "title": "$:/config/ShortcutInfo/navigate-story-up",
            "text": "navigate up the story river to the previous tiddler before the focused one"
        },
        "$:/config/ShortcutInfo/sidebar-search": {
            "title": "$:/config/ShortcutInfo/sidebar-search",
            "text": "open the sidebar and focus the search field"
        },
        "$:/config/ShortcutInfo/sidebar-state": {
            "title": "$:/config/ShortcutInfo/sidebar-state",
            "text": "toggle between the sidebar states shown/hidden"
        },
        "$:/config/ShortcutInfo/sidebar-tab-next": {
            "title": "$:/config/ShortcutInfo/sidebar-tab-next",
            "text": "open the next sidebar tab"
        },
        "$:/config/ShortcutInfo/sidebar-tab-previous": {
            "title": "$:/config/ShortcutInfo/sidebar-tab-previous",
            "text": "open the previous sidebar tab"
        },
        "$:/config/ShortcutInfo/tiddler-info": {
            "title": "$:/config/ShortcutInfo/tiddler-info",
            "text": "open/close the tiddler-info section of the focused tiddler"
        },
        "$:/config/ShortcutInfo/input-accept": {
            "title": "$:/config/ShortcutInfo/input-accept",
            "text": "{{$:/language/Shortcuts/Input/Accept/Hint}}"
        },
        "$:/config/ShortcutInfo/input-clear": {
            "title": "$:/config/ShortcutInfo/input-clear",
            "text": "{{$:/language/Shortcuts/Input/Clear/Hint}}"
        },
        "$:/config/ShortcutInfo/input-down": {
            "title": "$:/config/ShortcutInfo/input-down",
            "text": "{{$:/language/Shortcuts/Input/Down/Hint}}"
        },
        "$:/config/ShortcutInfo/input-tabs-left": {
            "title": "$:/config/ShortcutInfo/input-tabs-left",
            "text": "{{$:/language/Shortcuts/Input/Tabs-Left/Hint}}"
        },
        "$:/config/ShortcutInfo/input-tabs-right": {
            "title": "$:/config/ShortcutInfo/input-tabs-right",
            "text": "{{$:/language/Shortcuts/Input/Tabs-Right/Hint}}"
        },
        "$:/config/ShortcutInfo/input-up": {
            "title": "$:/config/ShortcutInfo/input-up",
            "text": "{{$:/language/Shortcuts/Input/Up/Hint}}"
        },
        "$:/config/ShortcutInfo/close-popup": {
            "title": "$:/config/ShortcutInfo/close-popup",
            "text": "temporarily active - close the last popup"
        },
        "$:/config/ShortcutInfo/popup-accept": {
            "title": "$:/config/ShortcutInfo/popup-accept",
            "text": "temporarily active - accept the selected item within a popup-list (trigger its action)"
        },
        "$:/config/ShortcutInfo/popup-down": {
            "title": "$:/config/ShortcutInfo/popup-down",
            "text": "temporarily active - select the next item within a popup-list"
        },
        "$:/config/ShortcutInfo/popup-tab-next": {
            "title": "$:/config/ShortcutInfo/popup-tab-next",
            "text": "temporarily active - open the previous tab within a popup before the open tab"
        },
        "$:/config/ShortcutInfo/popup-tab-previous": {
            "title": "$:/config/ShortcutInfo/popup-tab-previous",
            "text": "temporarily active - open the next tab within a popup after the open tab"
        },
        "$:/config/ShortcutInfo/popup-up": {
            "title": "$:/config/ShortcutInfo/popup-up",
            "text": "temporarily active - select the previous item within a popup-list"
        },
        "$:/config/shortcuts/input-accept": {
            "title": "$:/config/shortcuts/input-accept",
            "text": "Enter"
        },
        "$:/config/shortcuts/input-clear": {
            "title": "$:/config/shortcuts/input-clear",
            "text": "Escape"
        },
        "$:/config/shortcuts/input-down": {
            "title": "$:/config/shortcuts/input-down",
            "text": "Down"
        },
        "$:/config/shortcuts/input-tabs-left": {
            "title": "$:/config/shortcuts/input-tabs-left",
            "text": ""
        },
        "$:/config/shortcuts/input-tabs-right": {
            "title": "$:/config/shortcuts/input-tabs-right",
            "text": ""
        },
        "$:/config/shortcuts/input-up": {
            "title": "$:/config/shortcuts/input-up",
            "text": "Up"
        },
        "$:/config/shortcuts/close-focused-tiddler": {
            "title": "$:/config/shortcuts/close-focused-tiddler",
            "text": ""
        },
        "$:/config/shortcuts/edit-focused-tiddler": {
            "title": "$:/config/shortcuts/edit-focused-tiddler",
            "text": ""
        },
        "$:/config/shortcuts/navigate-story-down": {
            "title": "$:/config/shortcuts/navigate-story-down",
            "text": ""
        },
        "$:/config/shortcuts/navigate-story-up": {
            "title": "$:/config/shortcuts/navigate-story-up",
            "text": ""
        },
        "$:/config/shortcuts/tiddler-info": {
            "title": "$:/config/shortcuts/tiddler-info",
            "text": ""
        },
        "$:/plugins/BurningTreeC/navigator/config/shortuts/temporary": {
            "title": "$:/plugins/BurningTreeC/navigator/config/shortuts/temporary",
            "close-popup": "Escape",
            "popup-accept": "Enter",
            "popup-down": "Down",
            "popup-tab-next": "Right",
            "popup-tab-previous": "Left",
            "popup-up": "Up"
        },
        "$:/core/modules/startup/story.js": {
            "text": "/*\\\ntitle: $:/core/modules/startup/story.js\ntype: application/javascript\nmodule-type: startup\n\nLoad core modules\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n// Export name and synchronous status\nexports.name = \"story\";\nexports.after = [\"startup\"];\nexports.synchronous = true;\n\n// Default story and history lists\nvar DEFAULT_STORY_TITLE = \"$:/StoryList\";\nvar DEFAULT_HISTORY_TITLE = \"$:/HistoryList\";\n\n// Default tiddlers\nvar DEFAULT_TIDDLERS_TITLE = \"$:/DefaultTiddlers\";\n\n// Config\nvar CONFIG_UPDATE_ADDRESS_BAR = \"$:/config/Navigation/UpdateAddressBar\"; // Can be \"no\", \"permalink\", \"permaview\"\nvar CONFIG_UPDATE_HISTORY = \"$:/config/Navigation/UpdateHistory\"; // Can be \"yes\" or \"no\"\nvar CONFIG_PERMALINKVIEW_COPY_TO_CLIPBOARD = \"$:/config/Navigation/Permalinkview/CopyToClipboard\"; // Can be \"yes\" (default) or \"no\"\nvar CONFIG_PERMALINKVIEW_UPDATE_ADDRESS_BAR = \"$:/config/Navigation/Permalinkview/UpdateAddressBar\"; // Can be \"yes\" (default) or \"no\"\n\n\n// Links to help, if there is no param\nvar HELP_OPEN_EXTERNAL_WINDOW = \"http://tiddlywiki.com/#WidgetMessage%3A%20tm-open-external-window\";\n\nexports.startup = function() {\n\t// Open startup tiddlers\n\topenStartupTiddlers();\n\tif($tw.browser) {\n\t\t// Set up location hash update\n\t\t$tw.wiki.addEventListener(\"change\",function(changes) {\n\t\t\tif($tw.utils.hop(changes,DEFAULT_STORY_TITLE) || $tw.utils.hop(changes,DEFAULT_HISTORY_TITLE)) {\n\t\t\t\tupdateLocationHash({\n\t\t\t\t\tupdateAddressBar: $tw.wiki.getTiddlerText(CONFIG_UPDATE_ADDRESS_BAR,\"permaview\").trim(),\n\t\t\t\t\tupdateHistory: $tw.wiki.getTiddlerText(CONFIG_UPDATE_HISTORY,\"no\").trim()\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\t// Listen for changes to the browser location hash\n\t\twindow.addEventListener(\"hashchange\",function() {\n\t\t\tvar hash = $tw.utils.getLocationHash();\n\t\t\tif(hash !== $tw.locationHash) {\n\t\t\t\t$tw.locationHash = hash;\n\t\t\t\topenStartupTiddlers({defaultToCurrentStory: true});\n\t\t\t}\n\t\t},false);\n\t\t// Listen for the tm-browser-refresh message\n\t\t$tw.rootWidget.addEventListener(\"tm-browser-refresh\",function(event) {\n\t\t\twindow.location.reload(true);\n\t\t});\n\t\t// Listen for tm-open-external-window message\n\t\t$tw.rootWidget.addEventListener(\"tm-open-external-window\",function(event) {\n\t\t\tvar paramObject = event.paramObject || {},\n\t\t\t\tstrUrl = event.param || HELP_OPEN_EXTERNAL_WINDOW,\n\t\t\t\tstrWindowName = paramObject.windowName,\n\t\t\t\tstrWindowFeatures = paramObject.windowFeatures;\n\t\t\twindow.open(strUrl, strWindowName, strWindowFeatures);\n\t\t});\n\t\t// Listen for the tm-print message\n\t\t$tw.rootWidget.addEventListener(\"tm-print\",function(event) {\n\t\t\t(event.event.view || window).print();\n\t\t});\n\t\t// Listen for the tm-home message\n\t\t$tw.rootWidget.addEventListener(\"tm-home\",function(event) {\n\t\t\twindow.location.hash = \"\";\n\t\t\tvar storyFilter = $tw.wiki.getTiddlerText(DEFAULT_TIDDLERS_TITLE),\n\t\t\t\tstoryList = $tw.wiki.filterTiddlers(storyFilter);\n\t\t\t//invoke any hooks that might change the default story list\n\t\t\tstoryList = $tw.hooks.invokeHook(\"th-opening-default-tiddlers-list\",storyList);\n\t\t\t$tw.wiki.addTiddler({title: DEFAULT_STORY_TITLE, text: \"\", list: storyList},$tw.wiki.getModificationFields());\n\t\t\tif(storyList[0]) {\n\t\t\t\t$tw.wiki.addToHistory(storyList[0]);\n\t\t\t}\n\t\t});\n\t\t// Listen for the tm-permalink message\n\t\t$tw.rootWidget.addEventListener(\"tm-permalink\",function(event) {\n\t\t\tupdateLocationHash({\n\t\t\t\tupdateAddressBar: $tw.wiki.getTiddlerText(CONFIG_PERMALINKVIEW_UPDATE_ADDRESS_BAR,\"yes\").trim() === \"yes\" ? \"permalink\" : \"none\",\n\t\t\t\tupdateHistory: $tw.wiki.getTiddlerText(CONFIG_UPDATE_HISTORY,\"no\").trim(),\n\t\t\t\ttargetTiddler: event.param || event.tiddlerTitle,\n\t\t\t\tcopyToClipboard: $tw.wiki.getTiddlerText(CONFIG_PERMALINKVIEW_COPY_TO_CLIPBOARD,\"yes\").trim() === \"yes\" ? \"permalink\" : \"none\"\n\t\t\t});\n\t\t});\n\t\t// Listen for the tm-permaview message\n\t\t$tw.rootWidget.addEventListener(\"tm-permaview\",function(event) {\n\t\t\tupdateLocationHash({\n\t\t\t\tupdateAddressBar: $tw.wiki.getTiddlerText(CONFIG_PERMALINKVIEW_UPDATE_ADDRESS_BAR,\"yes\").trim() === \"yes\" ? \"permaview\" : \"none\",\n\t\t\t\tupdateHistory: $tw.wiki.getTiddlerText(CONFIG_UPDATE_HISTORY,\"no\").trim(),\n\t\t\t\ttargetTiddler: event.param || event.tiddlerTitle,\n\t\t\t\tcopyToClipboard: $tw.wiki.getTiddlerText(CONFIG_PERMALINKVIEW_COPY_TO_CLIPBOARD,\"yes\").trim() === \"yes\" ? \"permaview\" : \"none\"\n\t\t\t});\t\t\t\t\n\t\t});\n\t}\n};\n\n/*\nProcess the location hash to open the specified tiddlers. Options:\ndefaultToCurrentStory: If true, the current story is retained as the default, instead of opening the default tiddlers\n*/\nfunction openStartupTiddlers(options) {\n\toptions = options || {};\n\t// Work out the target tiddler and the story filter. \"null\" means \"unspecified\"\n\tvar target = null,\n\t\tstoryFilter = null;\n\tif($tw.locationHash.length > 1) {\n\t\tvar hash = $tw.locationHash.substr(1),\n\t\t\tsplit = hash.indexOf(\":\");\n\t\tif(split === -1) {\n\t\t\ttarget = decodeURIComponent(hash.trim());\n\t\t} else {\n\t\t\ttarget = decodeURIComponent(hash.substr(0,split).trim());\n\t\t\tstoryFilter = decodeURIComponent(hash.substr(split + 1).trim());\n\t\t}\n\t}\n\t// If the story wasn't specified use the current tiddlers or a blank story\n\tif(storyFilter === null) {\n\t\tif(options.defaultToCurrentStory) {\n\t\t\tvar currStoryList = $tw.wiki.getTiddlerList(DEFAULT_STORY_TITLE);\n\t\t\tstoryFilter = $tw.utils.stringifyList(currStoryList);\n\t\t} else {\n\t\t\tif(target && target !== \"\") {\n\t\t\t\tstoryFilter = \"\";\n\t\t\t} else {\n\t\t\t\tstoryFilter = $tw.wiki.getTiddlerText(DEFAULT_TIDDLERS_TITLE);\n\t\t\t}\n\t\t}\n\t}\n\t// Process the story filter to get the story list\n\tvar storyList = $tw.wiki.filterTiddlers(storyFilter);\n\t// Invoke any hooks that want to change the default story list\n\tstoryList = $tw.hooks.invokeHook(\"th-opening-default-tiddlers-list\",storyList);\n\t// If the target tiddler isn't included then splice it in at the top\n\tif(target && storyList.indexOf(target) === -1) {\n\t\tstoryList.unshift(target);\n\t}\n\t// Save the story list\n\t$tw.wiki.addTiddler({title: DEFAULT_STORY_TITLE, text: \"\", list: storyList},$tw.wiki.getModificationFields());\n\t// If a target tiddler was specified add it to the history stack\n\tif(target && target !== \"\") {\n\t\t// The target tiddler doesn't need double square brackets, but we'll silently remove them if they're present\n\t\tif(target.indexOf(\"[[\") === 0 && target.substr(-2) === \"]]\") {\n\t\t\ttarget = target.substr(2,target.length - 4);\n\t\t}\n\t\t$tw.wiki.setText(DEFAULT_HISTORY_TITLE,\"focus-tiddler\",undefined,target);\n\t\t$tw.wiki.addToHistory(target);\n\t} else if(storyList.length > 0) {\n\t\t$tw.wiki.setText(DEFAULT_HISTORY_TITLE,\"focus-tiddler\",undefined,storyList[0]);\n\t\t$tw.wiki.addToHistory(storyList[0]);\n\t}\n}\n\n/*\noptions: See below\noptions.updateAddressBar: \"permalink\", \"permaview\" or \"no\" (defaults to \"permaview\")\noptions.updateHistory: \"yes\" or \"no\" (defaults to \"no\")\noptions.copyToClipboard: \"permalink\", \"permaview\" or \"no\" (defaults to \"no\")\noptions.targetTiddler: optional title of target tiddler for permalink\n*/\nfunction updateLocationHash(options) {\n\t// Get the story and the history stack\n\tvar storyList = $tw.wiki.getTiddlerList(DEFAULT_STORY_TITLE),\n\t\thistoryList = $tw.wiki.getTiddlerData(DEFAULT_HISTORY_TITLE,[]),\n\t\ttargetTiddler = \"\";\n\tif(options.targetTiddler) {\n\t\ttargetTiddler = options.targetTiddler;\n\t} else {\n\t\t// The target tiddler is the one at the top of the stack\n\t\tif(historyList.length > 0) {\n\t\t\ttargetTiddler = historyList[historyList.length-1].title;\n\t\t}\n\t\t// Blank the target tiddler if it isn't present in the story\n\t\tif(storyList.indexOf(targetTiddler) === -1) {\n\t\t\ttargetTiddler = \"\";\n\t\t}\n\t}\n\t// Assemble the location hash\n\tswitch(options.updateAddressBar) {\n\t\tcase \"permalink\":\n\t\t\t$tw.locationHash = \"#\" + encodeURIComponent(targetTiddler);\n\t\t\tbreak;\n\t\tcase \"permaview\":\n\t\t\t$tw.locationHash = \"#\" + encodeURIComponent(targetTiddler) + \":\" + encodeURIComponent($tw.utils.stringifyList(storyList));\n\t\t\tbreak;\n\t}\n\t// Copy URL to the clipboard\n\tswitch(options.copyToClipboard) {\n\t\tcase \"permalink\":\n\t\t\t$tw.utils.copyToClipboard($tw.utils.getLocationPath() + \"#\" + encodeURIComponent(targetTiddler));\n\t\t\tbreak;\n\t\tcase \"permaview\":\n\t\t\t$tw.utils.copyToClipboard($tw.utils.getLocationPath() + \"#\" + encodeURIComponent(targetTiddler) + \":\" + encodeURIComponent($tw.utils.stringifyList(storyList)));\n\t\t\tbreak;\n\t}\n\t// Only change the location hash if we must, thus avoiding unnecessary onhashchange events\n\tif($tw.utils.getLocationHash() !== $tw.locationHash) {\n\t\tif(options.updateHistory === \"yes\") {\n\t\t\t// Assign the location hash so that history is updated\n\t\t\twindow.location.hash = $tw.locationHash;\n\t\t} else {\n\t\t\t// We use replace so that browser history isn't affected\n\t\t\twindow.location.replace(window.location.toString().split(\"#\")[0] + $tw.locationHash);\n\t\t}\n\t}\n}\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/core/modules/startup/story.js",
            "module-type": "startup"
        },
        "$:/core/modules/widgets/navigator.js": {
            "text": "/*\\\ntitle: $:/core/modules/widgets/navigator.js\ntype: application/javascript\nmodule-type: widget\n\nNavigator widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar IMPORT_TITLE = \"$:/Import\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar NavigatorWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n\tthis.addEventListeners([\n\t\t{type: \"tm-navigate\", handler: \"handleNavigateEvent\"},\n\t\t{type: \"tm-edit-tiddler\", handler: \"handleEditTiddlerEvent\"},\n\t\t{type: \"tm-delete-tiddler\", handler: \"handleDeleteTiddlerEvent\"},\n\t\t{type: \"tm-save-tiddler\", handler: \"handleSaveTiddlerEvent\"},\n\t\t{type: \"tm-cancel-tiddler\", handler: \"handleCancelTiddlerEvent\"},\n\t\t{type: \"tm-close-tiddler\", handler: \"handleCloseTiddlerEvent\"},\n\t\t{type: \"tm-close-all-tiddlers\", handler: \"handleCloseAllTiddlersEvent\"},\n\t\t{type: \"tm-close-other-tiddlers\", handler: \"handleCloseOtherTiddlersEvent\"},\n\t\t{type: \"tm-new-tiddler\", handler: \"handleNewTiddlerEvent\"},\n\t\t{type: \"tm-import-tiddlers\", handler: \"handleImportTiddlersEvent\"},\n\t\t{type: \"tm-perform-import\", handler: \"handlePerformImportEvent\"},\n\t\t{type: \"tm-fold-tiddler\", handler: \"handleFoldTiddlerEvent\"},\n\t\t{type: \"tm-fold-other-tiddlers\", handler: \"handleFoldOtherTiddlersEvent\"},\n\t\t{type: \"tm-fold-all-tiddlers\", handler: \"handleFoldAllTiddlersEvent\"},\n\t\t{type: \"tm-unfold-all-tiddlers\", handler: \"handleUnfoldAllTiddlersEvent\"},\n\t\t{type: \"tm-rename-tiddler\", handler: \"handleRenameTiddlerEvent\"},\n\t\t{type: \"tm-edit-text-operation\", handler: \"handleExternalTextOperationEvent\"}\n\t]);\n};\n\n/*\nInherit from the base widget class\n*/\nNavigatorWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nNavigatorWidget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\tthis.renderChildren(parent,nextSibling);\n};\n\n/*\nCompute the internal state of the widget\n*/\nNavigatorWidget.prototype.execute = function() {\n\t// Get our parameters\n\tthis.storyTitle = this.getAttribute(\"story\");\n\tthis.historyTitle = this.getAttribute(\"history\");\n\tthis.setVariable(\"tv-story-list\",this.storyTitle);\n\tthis.setVariable(\"tv-history-list\",this.historyTitle);\n\t// Construct the child widgets\n\tthis.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nNavigatorWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes.story || changedAttributes.history) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t} else {\n\t\treturn this.refreshChildren(changedTiddlers);\n\t}\n};\n\nNavigatorWidget.prototype.getStoryList = function() {\n\treturn this.storyTitle ? this.wiki.getTiddlerList(this.storyTitle) : null;\n};\n\nNavigatorWidget.prototype.saveStoryList = function(storyList) {\n\tvar storyTiddler = this.wiki.getTiddler(this.storyTitle);\n\tthis.wiki.addTiddler(new $tw.Tiddler(\n\t\t{title: this.storyTitle},\n\t\tstoryTiddler,\n\t\t{list: storyList}\n\t));\n};\n\nNavigatorWidget.prototype.removeTitleFromStory = function(storyList,title) {\n\tvar p = storyList.indexOf(title);\n\twhile(p !== -1) {\n\t\tstoryList.splice(p,1);\n\t\tp = storyList.indexOf(title);\n\t}\n};\n\nNavigatorWidget.prototype.replaceFirstTitleInStory = function(storyList,oldTitle,newTitle) {\n\tvar pos = storyList.indexOf(oldTitle);\n\tif(pos !== -1) {\n\t\tstoryList[pos] = newTitle;\n\t\tdo {\n\t\t\tpos = storyList.indexOf(oldTitle,pos + 1);\n\t\t\tif(pos !== -1) {\n\t\t\t\tstoryList.splice(pos,1);\n\t\t\t}\n\t\t} while(pos !== -1);\n\t} else {\n\t\tstoryList.splice(0,0,newTitle);\n\t}\n};\n\nNavigatorWidget.prototype.addToStory = function(title,fromTitle) {\n\tthis.wiki.addToStory(title,fromTitle,this.storyTitle,{openLinkFromInsideRiver: this.getAttribute(\"openLinkFromInsideRiver\",\"top\"),openLinkFromOutsideRiver: this.getAttribute(\"openLinkFromOutsideRiver\",\"top\")});\n};\n\n/*\nAdd a new record to the top of the history stack\ntitle: a title string or an array of title strings\nfromPageRect: page coordinates of the origin of the navigation\n*/\nNavigatorWidget.prototype.addToHistory = function(title,fromPageRect) {\n\tthis.wiki.addToHistory(title,fromPageRect,this.historyTitle);\n\tthis.wiki.setText(this.historyTitle,\"previous-focus-tiddler\",undefined,this.wiki.getTiddler(this.historyTitle).getFieldString(\"focus-tiddler\"));\n\tthis.wiki.setText(this.historyTitle,\"focus-tiddler\",undefined,title);\n};\n\nNavigatorWidget.prototype.findAdjacentStoryTiddler = function(title,storyList) {\n\tif(this.wiki.getTiddler(this.historyTitle).getFieldString(\"focus-tiddler\") === title) {\n\t\tvar titleIndex = storyList.indexOf(title);\n\t\treturn storyList[titleIndex + 1] ? storyList[titleIndex + 1] :\n\t\t\t(storyList[titleIndex - 1] ? storyList[titleIndex - 1] : null);\n\t}\n\treturn false;\n};\n\n/*\nHandle a tm-edit-text-operation message coming from a global keyboard shortcut for example\nevent.tiddler targets the tiddler for the message\neditor/factory.js adds to the hook and triggers the text operation\n*/\nNavigatorWidget.prototype.handleExternalTextOperationEvent = function(event) {\n\t$tw.hooks.invokeHook(\"th-external-text-operation\",event);\n};\n\n/*\nHandle a tm-navigate event\n*/\nNavigatorWidget.prototype.handleNavigateEvent = function(event) {\n\tevent = $tw.hooks.invokeHook(\"th-navigating\",event);\n\tif(event.navigateTo) {\n\t\tthis.addToStory(event.navigateTo,event.navigateFromTitle);\n\t\tif(!event.navigateSuppressNavigation) {\n\t\t\tthis.addToHistory(event.navigateTo,event.navigateFromClientRect);\n\t\t}\n\t}\n\treturn false;\n};\n\n// Close a specified tiddler\nNavigatorWidget.prototype.handleCloseTiddlerEvent = function(event) {\n\tvar title = event.param || event.tiddlerTitle,\n\t\tstoryList = this.getStoryList();\n\tvar adjacentTiddler = this.historyTitle ? this.findAdjacentStoryTiddler(title,storyList) : null;\n\t// Look for tiddlers with this title to close\n\tthis.removeTitleFromStory(storyList,title);\n\tthis.saveStoryList(storyList);\n\tif(adjacentTiddler) {\n\t\tthis.wiki.setText(this.historyTitle,\"previous-focus-tiddler\",undefined,this.wiki.getTiddler(this.historyTitle).getFieldString(\"focus-tiddler\"));\n\t\tthis.wiki.setText(this.historyTitle,\"focus-tiddler\",undefined,adjacentTiddler);\n\t}\n\treturn false;\n};\n\n// Close all tiddlers\nNavigatorWidget.prototype.handleCloseAllTiddlersEvent = function(event) {\n\tthis.saveStoryList([]);\n\tif(this.historyTitle) {\n\t\tthis.wiki.setText(this.historyTitle,\"previous-focus-tiddler\",undefined,this.wiki.getTiddler(this.historyTitle).getFieldString(\"focus-tiddler\"));\n\t\tthis.wiki.setText(this.historyTitle,\"focus-tiddler\",undefined,\"\");\n\t}\n\treturn false;\n};\n\n// Close other tiddlers\nNavigatorWidget.prototype.handleCloseOtherTiddlersEvent = function(event) {\n\tvar title = event.param || event.tiddlerTitle;\n\tthis.saveStoryList([title]);\n\tif(this.historyTitle) {\n\t\tthis.wiki.setText(this.historyTitle,\"previous-focus-tiddler\",undefined,this.wiki.getTiddler(this.historyTitle).getFieldString(\"focus-tiddler\"));\n\t\tthis.wiki.setText(this.historyTitle,\"focus-tiddler\",undefined,title);\n\t}\n\treturn false;\n};\n\n// Place a tiddler in edit mode\nNavigatorWidget.prototype.handleEditTiddlerEvent = function(event) {\n\tvar editTiddler = $tw.hooks.invokeHook(\"th-editing-tiddler\",event);\n\tif(!editTiddler) {\n\t\treturn false;\n\t}\n\tvar self = this;\n\tfunction isUnmodifiedShadow(title) {\n\t\treturn self.wiki.isShadowTiddler(title) && !self.wiki.tiddlerExists(title);\n\t}\n\tfunction confirmEditShadow(title) {\n\t\treturn confirm($tw.language.getString(\n\t\t\t\"ConfirmEditShadowTiddler\",\n\t\t\t{variables:\n\t\t\t\t{title: title}\n\t\t\t}\n\t\t));\n\t}\n\tvar title = event.param || event.tiddlerTitle;\n\tif(isUnmodifiedShadow(title) && !confirmEditShadow(title)) {\n\t\treturn false;\n\t}\n\t// Replace the specified tiddler with a draft in edit mode\n\tvar draftTiddler = this.makeDraftTiddler(title);\n\t// Update the story and history if required\n\tif(!event.paramObject || event.paramObject.suppressNavigation !== \"yes\") {\n\t\tvar draftTitle = draftTiddler.fields.title,\n\t\t\tstoryList = this.getStoryList();\n\t\tthis.removeTitleFromStory(storyList,draftTitle);\n\t\tthis.replaceFirstTitleInStory(storyList,title,draftTitle);\n\t\tthis.addToHistory(draftTitle,event.navigateFromClientRect);\n\t\tthis.saveStoryList(storyList);\n\t\treturn false;\n\t}\n};\n\n// Delete a tiddler\nNavigatorWidget.prototype.handleDeleteTiddlerEvent = function(event) {\n\t// Get the tiddler we're deleting\n\tvar title = event.param || event.tiddlerTitle,\n\t\ttiddler = this.wiki.getTiddler(title),\n\t\tstoryList = this.getStoryList(),\n\t\toriginalTitle = tiddler ? tiddler.fields[\"draft.of\"] : \"\",\n\t\toriginalTiddler = originalTitle ? this.wiki.getTiddler(originalTitle) : undefined,\n\t\tconfirmationTitle,\n\t    \tadjacentTiddler;\n\tif(!tiddler) {\n\t\treturn false;\n\t}\n\t// Check if the tiddler we're deleting is in draft mode\n\tif(originalTitle) {\n\t\t// If so, we'll prompt for confirmation referencing the original tiddler\n\t\tconfirmationTitle = originalTitle;\n\t} else {\n\t\t// If not a draft, then prompt for confirmation referencing the specified tiddler\n\t\tconfirmationTitle = title;\n\t}\n\t// Seek confirmation\n\tif((this.wiki.getTiddler(originalTitle) || (tiddler.fields.text || \"\") !== \"\") && !confirm($tw.language.getString(\n\t\t\t\t\"ConfirmDeleteTiddler\",\n\t\t\t\t{variables:\n\t\t\t\t\t{title: confirmationTitle}\n\t\t\t\t}\n\t\t\t))) {\n\t\treturn false;\n\t}\n\tif(this.historyTitle) {\n\t\tadjacentTiddler = this.findAdjacentStoryTiddler(title,storyList);\n\t}\n\t// Delete the original tiddler\n\tif(originalTitle) {\n\t\tif(originalTiddler) {\n\t\t\t$tw.hooks.invokeHook(\"th-deleting-tiddler\",originalTiddler);\n\t\t}\n\t\tthis.wiki.deleteTiddler(originalTitle);\n\t\tthis.removeTitleFromStory(storyList,originalTitle);\n\t}\n\t// Invoke the hook function and delete this tiddler\n\t$tw.hooks.invokeHook(\"th-deleting-tiddler\",tiddler);\n\tthis.wiki.deleteTiddler(title);\n\t// Remove the closed tiddler from the story\n\tthis.removeTitleFromStory(storyList,title);\n\tthis.saveStoryList(storyList);\n\tif(adjacentTiddler) {\n\t\tthis.wiki.setText(this.historyTitle,\"previous-focus-tiddler\",undefined,this.wiki.getTiddler(this.historyTitle).getFieldString(\"focus-tiddler\"));\n\t\tthis.wiki.setText(this.historyTitle,\"focus-tiddler\",undefined,adjacentTiddler);\n\t}\n\t// Trigger an autosave\n\t$tw.rootWidget.dispatchEvent({type: \"tm-auto-save-wiki\"});\n\treturn false;\n};\n\n/*\nCreate/reuse the draft tiddler for a given title\n*/\nNavigatorWidget.prototype.makeDraftTiddler = function(targetTitle) {\n\t// See if there is already a draft tiddler for this tiddler\n\tvar draftTitle = this.wiki.findDraft(targetTitle);\n\tif(draftTitle) {\n\t\treturn this.wiki.getTiddler(draftTitle);\n\t}\n\t// Get the current value of the tiddler we're editing\n\tvar tiddler = this.wiki.getTiddler(targetTitle);\n\t// Save the initial value of the draft tiddler\n\tdraftTitle = this.generateDraftTitle(targetTitle);\n\tvar draftTiddler = new $tw.Tiddler(\n\t\t\ttiddler,\n\t\t\t{\n\t\t\t\ttitle: draftTitle,\n\t\t\t\t\"draft.title\": targetTitle,\n\t\t\t\t\"draft.of\": targetTitle\n\t\t\t},\n\t\t\tthis.wiki.getModificationFields()\n\t\t);\n\tthis.wiki.addTiddler(draftTiddler);\n\treturn draftTiddler;\n};\n\n/*\nGenerate a title for the draft of a given tiddler\n*/\nNavigatorWidget.prototype.generateDraftTitle = function(title) {\n\tvar c = 0,\n\t\tdraftTitle,\n\t\tusername = this.wiki.getTiddlerText(\"$:/status/UserName\"),\n\t\tattribution = username ? \" by \" + username : \"\";\n\tdo {\n\t\tdraftTitle = \"Draft \" + (c ? (c + 1) + \" \" : \"\") + \"of '\" + title + \"'\" + attribution;\n\t\tc++;\n\t} while(this.wiki.tiddlerExists(draftTitle));\n\treturn draftTitle;\n};\n\n// Take a tiddler out of edit mode, saving the changes\nNavigatorWidget.prototype.handleSaveTiddlerEvent = function(event) {\n\tvar title = event.param || event.tiddlerTitle,\n\t\ttiddler = this.wiki.getTiddler(title),\n\t\tstoryList = this.getStoryList();\n\t// Replace the original tiddler with the draft\n\tif(tiddler) {\n\t\tvar draftTitle = (tiddler.fields[\"draft.title\"] || \"\").trim(),\n\t\t\tdraftOf = (tiddler.fields[\"draft.of\"] || \"\").trim();\n\t\tif(draftTitle) {\n\t\t\tvar isRename = draftOf !== draftTitle,\n\t\t\t\tisConfirmed = true;\n\t\t\tif(isRename && this.wiki.tiddlerExists(draftTitle)) {\n\t\t\t\tisConfirmed = confirm($tw.language.getString(\n\t\t\t\t\t\"ConfirmOverwriteTiddler\",\n\t\t\t\t\t{variables:\n\t\t\t\t\t\t{title: draftTitle}\n\t\t\t\t\t}\n\t\t\t\t));\n\t\t\t}\n\t\t\tif(isConfirmed) {\n\t\t\t\t// Create the new tiddler and pass it through the th-saving-tiddler hook\n\t\t\t\tvar newTiddler = new $tw.Tiddler(this.wiki.getCreationFields(),tiddler,{\n\t\t\t\t\ttitle: draftTitle,\n\t\t\t\t\t\"draft.title\": undefined,\n\t\t\t\t\t\"draft.of\": undefined\n\t\t\t\t},this.wiki.getModificationFields());\n\t\t\t\tnewTiddler = $tw.hooks.invokeHook(\"th-saving-tiddler\",newTiddler);\n\t\t\t\tthis.wiki.addTiddler(newTiddler);\n\t\t\t\t// If enabled, relink references to renamed tiddler\n\t\t\t\tvar shouldRelink = this.getAttribute(\"relinkOnRename\",\"no\").toLowerCase().trim() === \"yes\";\n\t\t\t\tif(isRename && shouldRelink && this.wiki.tiddlerExists(draftOf)) {\nconsole.log(\"Relinking '\" + draftOf + \"' to '\" + draftTitle + \"'\");\n\t\t\t\t\tthis.wiki.relinkTiddler(draftOf,draftTitle);\n\t\t\t\t}\n\t\t\t\t// Remove the draft tiddler\n\t\t\t\tthis.wiki.deleteTiddler(title);\n\t\t\t\t// Remove the original tiddler if we're renaming it\n\t\t\t\tif(isRename) {\n\t\t\t\t\tthis.wiki.deleteTiddler(draftOf);\n\t\t\t\t}\n\t\t\t\t// #2381 always remove new title & old\n\t\t\t\tthis.removeTitleFromStory(storyList,draftTitle);\n\t\t\t\tthis.removeTitleFromStory(storyList,draftOf);\n\t\t\t\tif(!event.paramObject || event.paramObject.suppressNavigation !== \"yes\") {\n\t\t\t\t\t// Replace the draft in the story with the original\n\t\t\t\t\tthis.replaceFirstTitleInStory(storyList,title,draftTitle);\n\t\t\t\t\tthis.addToHistory(draftTitle,event.navigateFromClientRect);\n\t\t\t\t\tif(draftTitle !== this.storyTitle) {\n\t\t\t\t\t\tthis.saveStoryList(storyList);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Trigger an autosave\n\t\t\t\t$tw.rootWidget.dispatchEvent({type: \"tm-auto-save-wiki\"});\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\n// Take a tiddler out of edit mode without saving the changes\nNavigatorWidget.prototype.handleCancelTiddlerEvent = function(event) {\n\tevent = $tw.hooks.invokeHook(\"th-cancelling-tiddler\", event);\n\t// Flip the specified tiddler from draft back to the original\n\tvar draftTitle = event.param || event.tiddlerTitle,\n\t\tdraftTiddler = this.wiki.getTiddler(draftTitle),\n\t\toriginalTitle = draftTiddler && draftTiddler.fields[\"draft.of\"],\n\t    \tadjacentTiddler;\n\tif(draftTiddler && originalTitle) {\n\t\t// Ask for confirmation if the tiddler text has changed\n\t\tvar isConfirmed = true,\n\t\t\toriginalTiddler = this.wiki.getTiddler(originalTitle),\n\t\t\tstoryList = this.getStoryList();\n\t\tif(this.wiki.isDraftModified(draftTitle)) {\n\t\t\tisConfirmed = confirm($tw.language.getString(\n\t\t\t\t\"ConfirmCancelTiddler\",\n\t\t\t\t{variables:\n\t\t\t\t\t{title: draftTitle}\n\t\t\t\t}\n\t\t\t));\n\t\t}\n\t\t// Remove the draft tiddler\n\t\tif(isConfirmed) {\n\t\t\tif(!originalTiddler && this.historyTitle) {\n\t\t\t\tadjacentTiddler = this.findAdjacentStoryTiddler(draftTitle,this.getStoryList());\n\t\t\t}\n\t\t\tthis.wiki.deleteTiddler(draftTitle);\n\t\t\tif(!event.paramObject || event.paramObject.suppressNavigation !== \"yes\") {\n\t\t\t\tif(originalTiddler) {\n\t\t\t\t\tthis.replaceFirstTitleInStory(storyList,draftTitle,originalTitle);\n\t\t\t\t\tthis.addToHistory(originalTitle,event.navigateFromClientRect);\n\t\t\t\t} else {\n\t\t\t\t\tthis.removeTitleFromStory(storyList,draftTitle);\n\t\t\t\t}\n\t\t\t\tthis.saveStoryList(storyList);\n\t\t\t\tif(adjacentTiddler) {\n\t\t\t\t\tthis.wiki.setText(this.historyTitle,\"previous-focus-tiddler\",undefined,this.wiki.getTiddler(this.historyTitle).getFieldString(\"focus-tiddler\"));\n\t\t\t\t\tthis.wiki.setText(this.historyTitle,\"focus-tiddler\",undefined,adjacentTiddler);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\n// Create a new draft tiddler\n// event.param can either be the title of a template tiddler, or a hashmap of fields.\n//\n// The title of the newly created tiddler follows these rules:\n// * If a hashmap was used and a title field was specified, use that title\n// * If a hashmap was used without a title field, use a default title, if necessary making it unique with a numeric suffix\n// * If a template tiddler was used, use the title of the template, if necessary making it unique with a numeric suffix\n//\n// If a draft of the target tiddler already exists then it is reused\nNavigatorWidget.prototype.handleNewTiddlerEvent = function(event) {\n\tevent = $tw.hooks.invokeHook(\"th-new-tiddler\", event);\n\t// Get the story details\n\tvar storyList = this.getStoryList(),\n\t\ttemplateTiddler, additionalFields, title, draftTitle, existingTiddler;\n\t// Get the template tiddler (if any)\n\tif(typeof event.param === \"string\") {\n\t\t// Get the template tiddler\n\t\ttemplateTiddler = this.wiki.getTiddler(event.param);\n\t\t// Generate a new title\n\t\ttitle = this.wiki.generateNewTitle(event.param || $tw.language.getString(\"DefaultNewTiddlerTitle\"));\n\t}\n\t// Get the specified additional fields\n\tif(typeof event.paramObject === \"object\") {\n\t\tadditionalFields = event.paramObject;\n\t}\n\tif(typeof event.param === \"object\") { // Backwards compatibility with 5.1.3\n\t\tadditionalFields = event.param;\n\t}\n\tif(additionalFields && additionalFields.title) {\n\t\ttitle = additionalFields.title;\n\t}\n\t// Make a copy of the additional fields excluding any blank ones\n\tvar filteredAdditionalFields = $tw.utils.extend({},additionalFields);\n\tObject.keys(filteredAdditionalFields).forEach(function(fieldName) {\n\t\tif(filteredAdditionalFields[fieldName] === \"\") {\n\t\t\tdelete filteredAdditionalFields[fieldName];\n\t\t}\n\t});\n\t// Generate a title if we don't have one\n\ttitle = title || this.wiki.generateNewTitle($tw.language.getString(\"DefaultNewTiddlerTitle\"));\n\t// Find any existing draft for this tiddler\n\tdraftTitle = this.wiki.findDraft(title);\n\t// Pull in any existing tiddler\n\tif(draftTitle) {\n\t\texistingTiddler = this.wiki.getTiddler(draftTitle);\n\t} else {\n\t\tdraftTitle = this.generateDraftTitle(title);\n\t\texistingTiddler = this.wiki.getTiddler(title);\n\t}\n\t// Merge the tags\n\tvar mergedTags = [];\n\tif(existingTiddler && existingTiddler.fields.tags) {\n\t\t$tw.utils.pushTop(mergedTags,existingTiddler.fields.tags);\n\t}\n\tif(additionalFields && additionalFields.tags) {\n\t\t// Merge tags\n\t\tmergedTags = $tw.utils.pushTop(mergedTags,$tw.utils.parseStringArray(additionalFields.tags));\n\t}\n\tif(templateTiddler && templateTiddler.fields.tags) {\n\t\t// Merge tags\n\t\tmergedTags = $tw.utils.pushTop(mergedTags,templateTiddler.fields.tags);\n\t}\n\t// Save the draft tiddler\n\tvar draftTiddler = new $tw.Tiddler({\n\t\t\ttext: \"\",\n\t\t\t\"draft.title\": title\n\t\t},\n\t\ttemplateTiddler,\n\t\tadditionalFields,\n\t\tthis.wiki.getCreationFields(),\n\t\texistingTiddler,\n\t\tfilteredAdditionalFields,\n\t\t{\n\t\t\ttitle: draftTitle,\n\t\t\t\"draft.of\": title,\n\t\t\ttags: mergedTags\n\t\t},this.wiki.getModificationFields());\n\tthis.wiki.addTiddler(draftTiddler);\n\t// Update the story to insert the new draft at the top and remove any existing tiddler\n\tif(storyList.indexOf(draftTitle) === -1) {\n\t\tvar slot = storyList.indexOf(event.navigateFromTitle);\n\t\tif(slot === -1) {\n\t\t\tslot = this.getAttribute(\"openLinkFromOutsideRiver\",\"top\") === \"bottom\" ? storyList.length - 1 : slot;\n\t\t}\n\t\tstoryList.splice(slot + 1,0,draftTitle);\n\t}\n\tif(storyList.indexOf(title) !== -1) {\n\t\tstoryList.splice(storyList.indexOf(title),1);\n\t}\n\tthis.saveStoryList(storyList);\n\t// Add a new record to the top of the history stack\n\tthis.addToHistory(draftTitle);\n\treturn false;\n};\n\n// Import JSON tiddlers into a pending import tiddler\nNavigatorWidget.prototype.handleImportTiddlersEvent = function(event) {\n\t// Get the tiddlers\n\tvar tiddlers = [];\n\ttry {\n\t\ttiddlers = JSON.parse(event.param);\n\t} catch(e) {\n\t}\n\t// Get the current $:/Import tiddler\n\tvar importTiddler = this.wiki.getTiddler(IMPORT_TITLE),\n\t\timportData = this.wiki.getTiddlerData(IMPORT_TITLE,{}),\n\t\tnewFields = new Object({\n\t\t\ttitle: IMPORT_TITLE,\n\t\t\ttype: \"application/json\",\n\t\t\t\"plugin-type\": \"import\",\n\t\t\t\"status\": \"pending\"\n\t\t}),\n\t\tincomingTiddlers = [];\n\t// Process each tiddler\n\timportData.tiddlers = importData.tiddlers || {};\n\t$tw.utils.each(tiddlers,function(tiddlerFields) {\n\t\ttiddlerFields.title = $tw.utils.trim(tiddlerFields.title);\n\t\tvar title = tiddlerFields.title;\n\t\tif(title) {\n\t\t\tincomingTiddlers.push(title);\n\t\t\timportData.tiddlers[title] = tiddlerFields;\n\t\t}\n\t});\n\t// Give the active upgrader modules a chance to process the incoming tiddlers\n\tvar messages = this.wiki.invokeUpgraders(incomingTiddlers,importData.tiddlers);\n\t$tw.utils.each(messages,function(message,title) {\n\t\tnewFields[\"message-\" + title] = message;\n\t});\n\t// Deselect any suppressed tiddlers\n\t$tw.utils.each(importData.tiddlers,function(tiddler,title) {\n\t\tif($tw.utils.count(tiddler) === 0) {\n\t\t\tnewFields[\"selection-\" + title] = \"unchecked\";\n\t\t}\n\t});\n\t// Save the $:/Import tiddler\n\tnewFields.text = JSON.stringify(importData,null,$tw.config.preferences.jsonSpaces);\n\tthis.wiki.addTiddler(new $tw.Tiddler(importTiddler,newFields));\n\t// Update the story and history details\n\tif(this.getVariable(\"tv-auto-open-on-import\") !== \"no\") {\n\t\tvar storyList = this.getStoryList(),\n\t\t\thistory = [];\n\t\t// Add it to the story\n\t\tif(storyList.indexOf(IMPORT_TITLE) === -1) {\n\t\t\tstoryList.unshift(IMPORT_TITLE);\n\t\t}\n\t\t// And to history\n\t\thistory.push(IMPORT_TITLE);\n\t\t// Save the updated story and history\n\t\tthis.saveStoryList(storyList);\n\t\tthis.addToHistory(history);\n\t}\n\treturn false;\n};\n\n//\nNavigatorWidget.prototype.handlePerformImportEvent = function(event) {\n\tvar self = this,\n\t\timportTiddler = this.wiki.getTiddler(event.param),\n\t\timportData = this.wiki.getTiddlerDataCached(event.param,{tiddlers: {}}),\n\t\timportReport = [];\n\t// Add the tiddlers to the store\n\timportReport.push($tw.language.getString(\"Import/Imported/Hint\") + \"\\n\");\n\t$tw.utils.each(importData.tiddlers,function(tiddlerFields) {\n\t\tvar title = tiddlerFields.title;\n\t\tif(title && importTiddler && importTiddler.fields[\"selection-\" + title] !== \"unchecked\") {\n\t\t\tvar tiddler = new $tw.Tiddler(tiddlerFields);\n\t\t\ttiddler = $tw.hooks.invokeHook(\"th-importing-tiddler\",tiddler);\n\t\t\tself.wiki.addTiddler(tiddler);\n\t\t\timportReport.push(\"# [[\" + tiddlerFields.title + \"]]\");\n\t\t}\n\t});\n\t// Replace the $:/Import tiddler with an import report\n\tthis.wiki.addTiddler(new $tw.Tiddler({\n\t\ttitle: event.param,\n\t\ttext: importReport.join(\"\\n\"),\n\t\t\"status\": \"complete\"\n\t}));\n\t// Navigate to the $:/Import tiddler\n\tthis.addToHistory([event.param]);\n\t// Trigger an autosave\n\t$tw.rootWidget.dispatchEvent({type: \"tm-auto-save-wiki\"});\n};\n\nNavigatorWidget.prototype.handleFoldTiddlerEvent = function(event) {\n\tvar paramObject = event.paramObject || {};\n\tif(paramObject.foldedState) {\n\t\tvar foldedState = this.wiki.getTiddlerText(paramObject.foldedState,\"show\") === \"show\" ? \"hide\" : \"show\";\n\t\tthis.wiki.setText(paramObject.foldedState,\"text\",null,foldedState);\n\t}\n};\n\nNavigatorWidget.prototype.handleFoldOtherTiddlersEvent = function(event) {\n\tvar self = this,\n\t\tparamObject = event.paramObject || {},\n\t\tprefix = paramObject.foldedStatePrefix;\n\t$tw.utils.each(this.getStoryList(),function(title) {\n\t\tself.wiki.setText(prefix + title,\"text\",null,event.param === title ? \"show\" : \"hide\");\n\t});\n};\n\nNavigatorWidget.prototype.handleFoldAllTiddlersEvent = function(event) {\n\tvar self = this,\n\t\tparamObject = event.paramObject || {},\n\t\tprefix = paramObject.foldedStatePrefix;\n\t$tw.utils.each(this.getStoryList(),function(title) {\n\t\tself.wiki.setText(prefix + title,\"text\",null,\"hide\");\n\t});\n};\n\nNavigatorWidget.prototype.handleUnfoldAllTiddlersEvent = function(event) {\n\tvar self = this,\n\t\tparamObject = event.paramObject || {},\n\t\tprefix = paramObject.foldedStatePrefix;\n\t$tw.utils.each(this.getStoryList(),function(title) {\n\t\tself.wiki.setText(prefix + title,\"text\",null,\"show\");\n\t});\n};\n\nNavigatorWidget.prototype.handleRenameTiddlerEvent = function(event) {\n\tevent = $tw.hooks.invokeHook(\"th-renaming-tiddler\", event);\n\tvar paramObject = event.paramObject || {},\n\t\tfrom = paramObject.from || event.tiddlerTitle,\n\t\tto = paramObject.to;\n\t$tw.wiki.renameTiddler(from,to);\n};\n\nexports.navigator = NavigatorWidget;\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/core/modules/widgets/navigator.js",
            "module-type": "widget"
        },
        "$:/core/modules/widgets/reveal.js": {
            "text": "/*\\\ntitle: $:/core/modules/widgets/reveal.js\ntype: application/javascript\nmodule-type: widget\n\nReveal widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar RevealWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nRevealWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nRevealWidget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\tvar tag = this.parseTreeNode.isBlock ? \"div\" : \"span\";\n\tif(this.revealTag && $tw.config.htmlUnsafeElements.indexOf(this.revealTag) === -1) {\n\t\ttag = this.revealTag;\n\t}\n\tvar domNode = this.document.createElement(tag);\n\tthis.classes.push(\"tc-reveal\");\n\tdomNode.className = this.classes.join(\" \");\n\tif(this.style) {\n\t\tdomNode.setAttribute(\"style\",this.style);\n\t}\n\tparent.insertBefore(domNode,nextSibling);\n\tthis.renderChildren(domNode,null);\n\tif(!domNode.isTiddlyWikiFakeDom && this.type === \"popup\" && this.isOpen) {\n\t\tthis.positionPopup(domNode);\n\t\t$tw.utils.addClass(domNode,\"tc-popup\"); // Make sure that clicks don't dismiss popups within the revealed content\n\t}\n\tif(!this.isOpen) {\n\t\tif(this.isPopupWidget) {\n\t\t\tvar index = $tw.popup.findPopupIndex(this.stateTitle ? this.stateTitle : this.state);\n\t\t\tvar popup = $tw.popup.popups[index];\n\t\t\tpopup.isShown = false;\n\t\t\t/*if(!popup.isTriggered) {\n\t\t\t\t$tw.popup.deletePopup(popup);\n\t\t\t}*/\n\t\t}\n\t\tdomNode.setAttribute(\"hidden\",\"true\");\n\t}\n\tthis.domNodes.push(domNode);\n};\n\nRevealWidget.prototype.positionPopup = function(domNode) {\n\tdomNode.style.position = \"absolute\";\n\tdomNode.style.zIndex = \"1000\";\n\tswitch(this.position) {\n\t\tcase \"left\":\n\t\t\tdomNode.style.left = Math.max(0, this.popup.left - domNode.offsetWidth) + \"px\";\n\t\t\tdomNode.style.top = this.popup.top + \"px\";\n\t\t\tbreak;\n\t\tcase \"above\":\n\t\t\tdomNode.style.left = this.popup.left + \"px\";\n\t\t\tdomNode.style.top = Math.max(0, this.popup.top - domNode.offsetHeight) + \"px\";\n\t\t\tbreak;\n\t\tcase \"aboveright\":\n\t\t\tdomNode.style.left = (this.popup.left + this.popup.width) + \"px\";\n\t\t\tdomNode.style.top = Math.max(0, this.popup.top + this.popup.height - domNode.offsetHeight) + \"px\";\n\t\t\tbreak;\n\t\tcase \"right\":\n\t\t\tdomNode.style.left = (this.popup.left + this.popup.width) + \"px\";\n\t\t\tdomNode.style.top = this.popup.top + \"px\";\n\t\t\tbreak;\n\t\tcase \"belowleft\":\n\t\t\tdomNode.style.left = Math.max(0, this.popup.left + this.popup.width - domNode.offsetWidth) + \"px\";\n\t\t\tdomNode.style.top = (this.popup.top + this.popup.height) + \"px\";\n\t\t\tbreak;\n\t\tdefault: // Below\n\t\t\tdomNode.style.left = this.popup.left + \"px\";\n\t\t\tdomNode.style.top = (this.popup.top + this.popup.height) + \"px\";\n\t\t\tbreak;\n\t}\n};\n\nRevealWidget.prototype.registerPopup = function() {\n\tvar state = this.stateTitle ? this.stateTitle : this.state;\n\tvar index = $tw.popup.findPopupIndex(state);\n\tif(index === -1) {\n\t\tvar popupOptions = {\n\t\t\ttitle: state,\n\t\t\trevealWidget: this,\n\t\t\tparentPopups: this.findParentPopups(),\n\t\t\tisShown: false\n\t\t};\n\t\tif(this.openActions) {\n\t\t\tpopupOptions.openActions = this.openActions;\n\t\t}\n\t\tif(this.closeActions) {\n\t\t\tpopupOptions.closeActions = this.closeActions;\n\t\t}\n\t\t$tw.utils.pushTop($tw.popup.popups,popupOptions);\n\t} else {\n\t\tvar popup = $tw.popup.popups[index];\n\t\tpopup.title = state;\n\t\tpopup.revealWidget = this;\n\t\tpopup.parentPopups = this.findParentPopups();\n\t\tif(this.isOpen) {\n\t\t\tpopup.isShown = true;\n\t\t} else {\n\t\t\tpopup.isShown = false;\n\t\t}\n\t\tif(this.openActions) {\n\t\t\tpopup.openActions = this.openActions;\n\t\t}\n\t\tif(this.closeActions) {\n\t\t\tpopup.closeActions = this.closeActions;\n\t\t}\n\t}\n};\n\nRevealWidget.prototype.findParentPopups = function() {\n\tvar self = this;\n\tvar node = self;\n\tvar parentPopups = [];\n\twhile (node) {\n\t\tif(node !== self) {\n\t\t\tif(node.isPopupWidget) {\n\t\t\t\tvar popupState = node.stateTitle ? node.stateTitle : node.state;\n\t\t\t\t$tw.utils.pushTop(parentPopups,popupState);\n\t\t\t}\n\t\t}\n\t\tnode = node.parentWidget;\n\t}\n\treturn parentPopups;\n};\n\n/*\nCompute the internal state of the widget\n*/\nRevealWidget.prototype.execute = function() {\n\t// Get our parameters\n\tthis.state = this.getAttribute(\"state\");\n\tthis.revealTag = this.getAttribute(\"tag\");\n\tthis.type = this.getAttribute(\"type\");\n\tthis.text = this.getAttribute(\"text\");\n\tthis.position = this.getAttribute(\"position\");\n\tthis[\"class\"] = this.getAttribute(\"class\",\"\");\n\tthis.style = this.getAttribute(\"style\",\"\");\n\tthis[\"default\"] = this.getAttribute(\"default\",\"\");\n\tthis.animate = this.getAttribute(\"animate\",\"no\");\n\tthis.retain = this.getAttribute(\"retain\",\"no\");\n\tthis.openAnimation = this.animate === \"no\" ? undefined : \"open\";\n\tthis.closeAnimation = this.animate === \"no\" ? undefined : \"close\";\n\t// Compute the title of the state tiddler and read it\n\tthis.stateTiddlerTitle = this.state;\n\tthis.stateTitle = this.getAttribute(\"stateTitle\");\n\tthis.stateField = this.getAttribute(\"stateField\");\n\tthis.stateIndex = this.getAttribute(\"stateIndex\");\n\tthis.openActions = this.getAttribute(\"openActions\");\n\tthis.closeActions = this.getAttribute(\"closeActions\");\n\tthis.classes = this[\"class\"].split(\" \") || [];\n\tif(this.type === \"popup\" || this.classes.indexOf(\"tc-popup-handle\") > -1) {\n\t\tthis.isPopupWidget = true;\n\t\tthis.registerPopup();\n\t}\n\tthis.readState();\n\t// Construct the child widgets\n\tvar childNodes = this.isOpen ? this.parseTreeNode.children : [];\n\tthis.hasChildNodes = this.isOpen;\n\tthis.makeChildWidgets(childNodes);\n};\n\n/*\nRead the state tiddler\n*/\nRevealWidget.prototype.readState = function() {\n\t// Read the information from the state tiddler\n\tvar state = this.stateTitle ? (this.stateField ? this.wiki.getTiddler(this.stateTitle).getFieldString(this.stateField) :\n\t\t(this.stateIndex ? this.wiki.extractTiddlerDataItem(this.stateTitle,this.stateIndex) :\n\t\t\tthis.wiki.getTiddlerText(this.stateTitle))) || this[\"default\"] || this.getVariable(\"currentTiddler\") :\n\t\t(this.stateTiddlerTitle ? this.wiki.getTextReference(this.state,this[\"default\"],this.getVariable(\"currentTiddler\")) : this[\"default\"]);\n\tif(state === null) {\n\t\tstate = this[\"default\"];\n\t}\n\tvar currentlyOpen = this.isOpen;\n\tswitch(this.type) {\n\t\tcase \"popup\":\n\t\t\tthis.readPopupState(state);\n\t\t\tbreak;\n\t\tcase \"match\":\n\t\t\tthis.isOpen = !!(this.compareStateText(state) == 0);\n\t\t\tbreak;\n\t\tcase \"nomatch\":\n\t\t\tthis.isOpen = !(this.compareStateText(state) == 0);\n\t\t\tbreak;\n\t\tcase \"lt\":\n\t\t\tthis.isOpen = !!(this.compareStateText(state) < 0);\n\t\t\tbreak;\n\t\tcase \"gt\":\n\t\t\tthis.isOpen = !!(this.compareStateText(state) > 0);\n\t\t\tbreak;\n\t\tcase \"lteq\":\n\t\t\tthis.isOpen = !(this.compareStateText(state) > 0);\n\t\t\tbreak;\n\t\tcase \"gteq\":\n\t\t\tthis.isOpen = !(this.compareStateText(state) < 0);\n\t\t\tbreak;\n\t}\n\tif(this.isPopupWidget) {\n\t\tvar popupState = this.stateTitle ? this.stateTitle : this.state;\n\t\tvar index = $tw.popup.findPopupIndex(popupState);\n\t\tif(this.isOpen) {\n\t\t\t$tw.popup.popups[index].isShown = true;\n\t\t} else {\n\t\t\t$tw.popup.popups[index].isShown = false;\n\t\t}\n\t}\n};\n\nRevealWidget.prototype.compareStateText = function(state) {\n\treturn state.localeCompare(this.text,undefined,{numeric: true,sensitivity: \"case\"});\n};\n\nRevealWidget.prototype.readPopupState = function(state) {\n\tvar popupLocationRegExp = /^\\((-?[0-9\\.E]+),(-?[0-9\\.E]+),(-?[0-9\\.E]+),(-?[0-9\\.E]+)\\)$/,\n\t\tmatch = popupLocationRegExp.exec(state);\n\t// Check if the state matches the location regexp\n\tif(match) {\n\t\t// If so, we're open\n\t\tthis.isOpen = true;\n\t\t// Get the location\n\t\tthis.popup = {\n\t\t\tleft: parseFloat(match[1]),\n\t\t\ttop: parseFloat(match[2]),\n\t\t\twidth: parseFloat(match[3]),\n\t\t\theight: parseFloat(match[4])\n\t\t};\n\t} else {\n\t\t// If not, we're closed\n\t\tthis.isOpen = false;\n\t}\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nRevealWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes.state || changedAttributes.type || changedAttributes.text || changedAttributes.position || changedAttributes[\"default\"] || changedAttributes.animate || changedAttributes.stateTitle || changedAttributes.stateField || changedAttributes.stateIndex || changedAttributes.openActions || changedAttributes.closeActions) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t} else {\n\t\tvar currentlyOpen = this.isOpen;\n\t\tthis.readState();\n\t\tif(this.isOpen !== currentlyOpen || (this.stateTiddlerTitle && changedTiddlers[this.stateTiddlerTitle])) {\n\t\t\tif(this.retain === \"yes\") {\n\t\t\t\tthis.updateState();\n\t\t\t} else {\n\t\t\t\tif(this.isPopupWidget && !this.isOpen) {\n\t\t\t\t\tvar index = $tw.popup.findPopupIndex(this.stateTitle ? this.stateTitle : this.state);\n\t\t\t\t\tvar popup = $tw.popup.popups[index]\n\t\t\t\t\t$tw.popup.deletePopup(popup);\n\t\t\t\t}\n\t\t\t\tthis.refreshSelf();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn this.refreshChildren(changedTiddlers);\n\t}\n};\n\n/*\nCalled by refresh() to dynamically show or hide the content\n*/\nRevealWidget.prototype.updateState = function() {\n\tvar self = this;\n\t// Read the current state\n\tthis.readState();\n\t// Construct the child nodes if needed\n\tvar domNode = this.domNodes[0];\n\tif(this.isOpen && !this.hasChildNodes) {\n\t\tthis.hasChildNodes = true;\n\t\tthis.makeChildWidgets(this.parseTreeNode.children);\n\t\tthis.renderChildren(domNode,null);\n\t}\n\t// Animate our DOM node\n\tif(!domNode.isTiddlyWikiFakeDom && this.type === \"popup\" && this.isOpen) {\n\t\tthis.positionPopup(domNode);\n\t\t$tw.utils.addClass(domNode,\"tc-popup\"); // Make sure that clicks don't dismiss popups within the revealed content\n\t}\n\tif(this.isOpen) {\n\t\tdomNode.removeAttribute(\"hidden\");\n        $tw.anim.perform(this.openAnimation,domNode);\n\t} else {\n\t\t$tw.anim.perform(this.closeAnimation,domNode,{callback: function() {\n\t\t\t//make sure that the state hasn't changed during the close animation\n\t\t\tself.readState();\n\t\t\tif(!self.isOpen) {\n\t\t\t\tdomNode.setAttribute(\"hidden\",\"true\");\n\t\t\t}\n\t\t\tif(this.isPopupWidget) {\n\t\t\t\tvar index = $tw.popup.findPopupIndex(this.stateTitle ? this.stateTitle : this.state);\n\t\t\t\t$tw.popup.popups[index].isShown = false;\n\t\t\t}\n\t\t}});\n\t}\n};\n\nexports.reveal = RevealWidget;\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/core/modules/widgets/reveal.js",
            "module-type": "widget"
        },
        "$:/core/modules/widgets/button.js": {
            "text": "/*\\\ntitle: $:/core/modules/widgets/button.js\ntype: application/javascript\nmodule-type: widget\n\nButton widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar ButtonWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nButtonWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nButtonWidget.prototype.render = function(parent,nextSibling) {\n\tvar self = this;\n\t// Remember parent\n\tthis.parentDomNode = parent;\n\t// Compute attributes and execute state\n\tthis.computeAttributes();\n\tthis.execute();\n\t// Create element\n\tvar tag = \"button\";\n\tif(this.buttonTag && $tw.config.htmlUnsafeElements.indexOf(this.buttonTag) === -1) {\n\t\ttag = this.buttonTag;\n\t}\n\tvar domNode = this.document.createElement(tag);\n\t// Assign classes\n\tvar classes = this[\"class\"].split(\" \") || [],\n\t\tisPoppedUp = (this.popup || this.popupTitle) && this.isPoppedUp();\n\tif(this.selectedClass) {\n\t\tif((this.set || this.setTitle) && this.setTo && this.isSelected()) {\n\t\t\t$tw.utils.pushTop(classes,this.selectedClass.split(\" \"));\n\t\t}\n\t\tif(isPoppedUp) {\n\t\t\t$tw.utils.pushTop(classes,this.selectedClass.split(\" \"));\n\t\t}\n\t}\n\tif(isPoppedUp) {\n\t\t$tw.utils.pushTop(classes,\"tc-popup-handle\");\n\t}\n\tdomNode.className = classes.join(\" \");\n\t// Assign other attributes\n\tif(this.style) {\n\t\tdomNode.setAttribute(\"style\",this.style);\n\t}\n\tif(this.tooltip) {\n\t\tdomNode.setAttribute(\"title\",this.tooltip);\n\t}\n\tif(this[\"aria-label\"]) {\n\t\tdomNode.setAttribute(\"aria-label\",this[\"aria-label\"]);\n\t}\n\t// Add a click event handler\n\tdomNode.addEventListener(\"click\",function (event) {\n\t\tvar handled = false;\n\t\tif(self.invokeActions(self,event)) {\n\t\t\thandled = true;\n\t\t}\n\t\tif(self.to) {\n\t\t\tself.navigateTo(event);\n\t\t\thandled = true;\n\t\t}\n\t\tif(self.message) {\n\t\t\tself.dispatchMessage(event);\n\t\t\thandled = true;\n\t\t}\n\t\tif(self.popup || self.popupTitle) {\n\t\t\tself.triggerPopup(event);\n\t\t\thandled = true;\n\t\t}\n\t\tif(self.set || self.setTitle) {\n\t\t\tself.setTiddler();\n\t\t\thandled = true;\n\t\t}\n\t\tif(self.actions) {\n\t\t\tself.invokeActionString(self.actions,self,event);\n\t\t}\n\t\tif(handled) {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t}\n\t\treturn handled;\n\t},false);\n\t// Make it draggable if required\n\tif(this.dragTiddler || this.dragFilter) {\n\t\t$tw.utils.makeDraggable({\n\t\t\tdomNode: domNode,\n\t\t\tdragTiddlerFn: function() {return self.dragTiddler;},\n\t\t\tdragFilterFn: function() {return self.dragFilter;},\n\t\t\twidget: this\n\t\t});\n\t}\n\t// Insert element\n\tparent.insertBefore(domNode,nextSibling);\n\tthis.renderChildren(domNode,null);\n\tthis.domNodes.push(domNode);\n};\n\n/*\nWe don't allow actions to propagate because we trigger actions ourselves\n*/\nButtonWidget.prototype.allowActionPropagation = function() {\n\treturn false;\n};\n\nButtonWidget.prototype.getBoundingClientRect = function() {\n\treturn this.domNodes[0].getBoundingClientRect();\n};\n\nButtonWidget.prototype.isSelected = function() {\n    return this.setTitle ? (this.setField ? this.wiki.getTiddler(this.setTitle).getFieldString(this.setField) === this.setTo :\n\t\t(this.setIndex ? this.wiki.extractTiddlerDataItem(this.setTitle,this.setIndex) === this.setTo :\n\t\t\tthis.wiki.getTiddlerText(this.setTitle))) || this.defaultSetValue || this.getVariable(\"currentTiddler\") :\n\t\tthis.wiki.getTextReference(this.set,this.defaultSetValue,this.getVariable(\"currentTiddler\")) === this.setTo;\n};\n\nButtonWidget.prototype.isPoppedUp = function() {\n\tvar tiddler = this.popupTitle ? this.wiki.getTiddler(this.popupTitle) : this.wiki.getTiddler(this.popup);\n\tvar result = tiddler && tiddler.fields.text ? $tw.popup.readPopupState(tiddler.fields.text) : false;\n\treturn result;\n};\n\nButtonWidget.prototype.navigateTo = function(event) {\n\tvar bounds = this.getBoundingClientRect();\n\tthis.dispatchEvent({\n\t\ttype: \"tm-navigate\",\n\t\tnavigateTo: this.to,\n\t\tnavigateFromTitle: this.getVariable(\"storyTiddler\"),\n\t\tnavigateFromNode: this,\n\t\tnavigateFromClientRect: { top: bounds.top, left: bounds.left, width: bounds.width, right: bounds.right, bottom: bounds.bottom, height: bounds.height\n\t\t},\n\t\tnavigateSuppressNavigation: event.metaKey || event.ctrlKey || (event.button === 1),\n\t\tevent: event\n\t});\n};\n\nButtonWidget.prototype.dispatchMessage = function(event) {\n\tthis.dispatchEvent({type: this.message, param: this.param, tiddlerTitle: this.getVariable(\"currentTiddler\"), event: event});\n};\n\nButtonWidget.prototype.triggerPopup = function(event) {\n\tvar index,\n\t\tisShown;\n\tif(this.popupTitle) {\n\t\tindex = $tw.popup.findPopupIndex(this.popupTitle);\n\t\tisShown = $tw.popup.popups[index].isShown;\n\t\t$tw.popup.popups[index].isShown = isShown;\n\t\t$tw.popup.popups[index].isTriggered = !isShown;\n\t\t$tw.popup.popups[index].noStateReference = true;\n\t\t$tw.popup.triggerPopup(this.popupTitle);\n\t} else {\n\t\tindex = $tw.popup.findPopupIndex(this.popup);\n\t\tisShown = $tw.popup.popups[index].isShown;\n\t\t$tw.popup.popups[index].isShown = isShown;\n\t\t$tw.popup.popups[index].isTriggered = !isShown;\n\t\t$tw.popup.popups[index].noStateReference = false;\n\t\t$tw.popup.triggerPopup(this.popup);\n\t}\n};\n\nButtonWidget.prototype.setTiddler = function() {\n\tif(this.setTitle) {\n\t\tthis.setField ? this.wiki.setText(this.setTitle,this.setField,undefined,this.setTo) :\n\t\t\t\t(this.setIndex ? this.wiki.setText(this.setTitle,undefined,this.setIndex,this.setTo) :\n\t\t\t\tthis.wiki.setText(this.setTitle,\"text\",undefined,this.setTo));\n\t} else {\n\t\tthis.wiki.setTextReference(this.set,this.setTo,this.getVariable(\"currentTiddler\"));\n\t}\n};\n\nButtonWidget.prototype.registerPopup = function() {\n\tvar state = this.popupTitle ? this.popupTitle : this.popup;\n\tvar index = $tw.popup.findPopupIndex(state);\n\tif(index === -1) {\n\t\t$tw.utils.pushTop($tw.popup.popups,{\n\t\t\ttitle: state,\n\t\t\ttriggeringWidget: this\n\t\t});\n\t} else {\n\t\tvar popup = $tw.popup.popups[index];\n\t\tpopup.triggeringWidget = this;\n\t}\n};\n\n/*\nCompute the internal state of the widget\n*/\nButtonWidget.prototype.execute = function() {\n\t// Get attributes\n\tthis.actions = this.getAttribute(\"actions\");\n\tthis.to = this.getAttribute(\"to\");\n\tthis.message = this.getAttribute(\"message\");\n\tthis.param = this.getAttribute(\"param\");\n\tthis.set = this.getAttribute(\"set\");\n\tthis.setTo = this.getAttribute(\"setTo\");\n\tthis.popup = this.getAttribute(\"popup\");\n\tthis.hover = this.getAttribute(\"hover\");\n\tthis[\"class\"] = this.getAttribute(\"class\",\"\");\n\tthis[\"aria-label\"] = this.getAttribute(\"aria-label\");\n\tthis.tooltip = this.getAttribute(\"tooltip\");\n\tthis.style = this.getAttribute(\"style\");\n\tthis.selectedClass = this.getAttribute(\"selectedClass\");\n\tthis.defaultSetValue = this.getAttribute(\"default\",\"\");\n\tthis.buttonTag = this.getAttribute(\"tag\");\n\tthis.dragTiddler = this.getAttribute(\"dragTiddler\");\n\tthis.dragFilter = this.getAttribute(\"dragFilter\");\n\tthis.setTitle = this.getAttribute(\"setTitle\");\n\tthis.setField = this.getAttribute(\"setField\");\n\tthis.setIndex = this.getAttribute(\"setIndex\");\n\tthis.popupTitle = this.getAttribute(\"popupTitle\");\n\tif(this.popup || this.popupTitle) {\n\t\tthis.registerPopup();\n\t}\n\t// Make child widgets\n\tthis.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nButtonWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes.to || changedAttributes.message || changedAttributes.param || changedAttributes.set || changedAttributes.setTo || changedAttributes.popup || changedAttributes.hover || changedAttributes[\"class\"] || changedAttributes.selectedClass || changedAttributes.style || changedAttributes.dragFilter || changedAttributes.dragTiddler || (this.set && changedTiddlers[this.set]) || (this.popup && changedTiddlers[this.popup]) || (this.popupTitle && changedTiddlers[this.popupTitle]) || changedAttributes.setTitle || changedAttributes.setField || changedAttributes.setIndex || changedAttributes.popupTitle) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\treturn this.refreshChildren(changedTiddlers);\n};\n\nexports.button = ButtonWidget;\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/core/modules/widgets/button.js",
            "module-type": "widget"
        },
        "$:/core/modules/utils/dom/popup.js": {
            "text": "/*\\\ntitle: $:/core/modules/utils/dom/popup.js\ntype: application/javascript\nmodule-type: utils\n\nModule that creates a $tw.utils.Popup object prototype that manages popups in the browser\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nCreates a Popup object with these options:\n\trootElement: the DOM element to which the popup zapper should be attached\n*/\nvar Popup = function(options) {\n\tvar self = this;\n\toptions = options || {};\n\tthis.rootElement = options.rootElement || document.documentElement;\n\tthis.popups = []; // Array of {title:,wiki:,domNode:} objects\n\tthis.rootElement.addEventListener(\"click\",function(event) {\n\t\tself.handleEvent(event);\n\t});\n};\n\n/*\nTrigger a popup open or closed. Parameters are in a hashmap:\n\ttitle: title of the tiddler where the popup details are stored\n\tdomNode: dom node to which the popup will be positioned (one of domNode or domNodeRect is required)\n\tdomNodeRect: rectangle to which the popup will be positioned\n\twiki: wiki\n\tforce: if specified, forces the popup state to true or false (instead of toggling it)\n\tfloating: if true, skips registering the popup, meaning that it will need manually clearing\n*/\nPopup.prototype.triggerPopup = function(title,options) {\n\t// Check if this popup is already active\n\t// Compute the new state\n\tvar popup = this.popups[this.findPopupIndex(title)];\n\tvar isTriggeredShown = popup.isTriggered;\n\tif(!isTriggeredShown) {\n\t\t//cancel all popups but my parent popups\n\t\tthis.cancelCancellablePopups(popup);\n\t} else {\n\t\t// cancel all popups but my parent popups\n\t\tthis.cancelCancellablePopups(popup);\n\t\tthis.showPopup(title);\n\t}\n};\n\nPopup.prototype.cancelCancellablePopups = function(triggerPopup) {\n\tvar popupParents = triggerPopup !== undefined ? triggerPopup.parentPopups : undefined;\n\tfor(var i=0; i<this.popups.length; i++) {\n\t\tvar popup = this.popups[i];\n\t\tvar popupTitle = popup.title;\n\t\tif(popupParents) {\n\t\t\tif(popupParents.indexOf(popupTitle) === -1) {\n\t\t\t\tthis.deletePopup(popup);\n\t\t\t} else if(!triggerPopup.isTriggered && (popupTitle === triggerPopup.title)) {\n\t\t\t\t// delete only up to level\n\t\t\t\tthis.deletePopup(popup);\n\t\t\t}\n\t\t} else if (!popupParents && (popupTitle !== triggerPopup.title)) {\n\t\t\tthis.deletePopup(popup);\n\t\t}\n\t}\n};\n\nPopup.prototype.deletePopup = function(popup) {\n\tif(popup.isShown === true && popup.revealWidget) {\n\t\tif(popup.closeActions) {\n\t\t\tpopup.revealWidget.wiki.deleteTiddler(\"$:/popup/StartupAction/\" + popup.title);\n\t\t\tpopup.revealWidget.wiki.deleteTiddler(popup.title);\n\t\t\tpopup.revealWidget.invokeActionString(popup.closeActions);\n\t\t} else {\n\t\t\tpopup.revealWidget.wiki.deleteTiddler(popup.title);\n\t\t}\n\t\tpopup.isShown = false;\n\t}\n};\n\nPopup.prototype.cancelPopup = function(title) {\n\t$tw.wiki.deleteTiddler(title);\n};\n\nPopup.prototype.isPopupShown = function(title) {\n\tvar index = -1;\n\tfor(var t=0; t<this.popups.length; t++) {\n\t\tif(this.popups[t].title === title) {\n\t\t\tindex = t;\n\t\t\tif(this.popups[t].isShown === true) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\nPopup.prototype.findPopup = function(title) {\n\tvar index = -1;\n\tfor(var t=0; t<this.popups.length; t++) {\n\t\tif(this.popups[t].title === title) {\n\t\t\tindex = t;\n\t\t}\n\t}\n\treturn index;\n};\n\nPopup.prototype.findPopupIndex = function(title) {\n\tvar index = -1;\n\tfor(var t=0; t<this.popups.length; t++) {\n\t\tif(this.popups[t].title === title) {\n\t\t\tindex = t;\n\t\t}\n\t}\n\treturn index;\n};\n\nPopup.prototype.handleEvent = function(event) {\n\tif(event.type === \"click\") {\n\t\t// Find out what was clicked on\n\t\tvar clickedOnPopup = this.popupClickInfo(event.target);\n\t\t// Don't remove the level that was clicked on if we clicked on a handle\n\t\tif(!clickedOnPopup) {\n\t\t\tfor(var i=0; i<this.popups.length; i++) {\n\t\t\t\tvar popup = this.popups[i];\n\t\t\t\tif(popup.isShown === true) {\n\t\t\t\t\tthis.deletePopup(popup);\n\t\t\t\t\tpopup.isShown = false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tvar higherPopupsAtLevel = this.findHigherPopupsAtLevel(event.target);\n\t\t\tfor(var k=0; k<higherPopupsAtLevel.length; k++) {\n\t\t\t\tthis.deletePopup(higherPopupsAtLevel[k]);\n\t\t\t}\n\t\t}\n\t}\n};\n\nPopup.prototype.findHigherPopupsAtLevel = function(domNode) {\n\tvar node = domNode,\n\t\tshownPopups = [],\n\t\tpopupTitle,\n\t\tfoundPopups = [];\n\twhile(node) {\n\t\tfor(var i=0; i<this.popups.length; i++) {\n\t\t\tvar popup = this.popups[i];\n\t\t\tif(popup.isShown) {\n\t\t\t\tshownPopups.push(popup);\n\t\t\t\tif(popup.revealWidget.domNodes[0] === domNode) {\n\t\t\t\t\tpopupTitle = popup.title;\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tnode = node.parentNode;\n\t}\n\tfor(var k=0; k<shownPopups.length; k++) {\n\t\tvar shownPopup = shownPopups[k];\n\t\tif(shownPopup.parentPopups && shownPopup.parentPopups.indexOf(popupTitle) > -1) {\n\t\t\tfoundPopups.push(shownPopup);\n\t\t}\n\t}\n\treturn foundPopups;\n};\n\nPopup.prototype.popupClickInfo = function(domNode) {\n\tvar node = domNode;\n\t// First check ancestors to see if we're within a popup handle\n\twhile(node) {\n\t\tif($tw.utils.hasClass(node,\"tc-popup-handle\")) {\n\t\t\treturn true;\n\t\t}\n\t\tif($tw.utils.hasClass(node,\"tc-popup-keep\")) {\n\t\t\treturn true;\n\t\t}\n\t\tnode = node.parentNode;\n\t}\n\t// Then count the number of ancestor popups\n\tnode = domNode;\n\twhile(node) {\n\t\tif($tw.utils.hasClass(node,\"tc-popup\")) {\n\t\t\treturn true;\n\t\t}\n\t\tnode = node.parentNode;\n\t}\n\treturn false;\n};\n\nPopup.prototype.showPopup = function(title) {\n\tvar self = this;\n\tvar index = this.findPopupIndex(title);\n\tvar popup = this.popups[index];\n\tif(!popup.isShown) {\n\t\t// Set the state tiddler\n\t\tvar domNode = popup.triggeringWidget ? popup.triggeringWidget.domNodes[0] : popup.revealWidget.domNodes[0];\n\t\tvar rect = {\n\t\t\tleft: domNode.offsetLeft,\n\t\t\ttop: domNode.offsetTop,\n\t\t\twidth: domNode.offsetWidth,\n\t\t\theight: domNode.offsetHeight\n\t\t};\n\t\tvar popupRect = \"(\" + rect.left + \",\" + rect.top + \",\" + \n\t\t\trect.width + \",\" + rect.height + \")\";\n\t\tif(popup.noStateReference && popup.revealWidget) {\n\t\t\tpopup.revealWidget.wiki.setText(title,\"text\",undefined,popupRect);\n\t\t\tpopup.isTriggered = false;\n\t\t\tpopup.isShown = true;\n\t\t} else if(popup.revealWidget) {\n\t\t\tpopup.revealWidget.wiki.setTextReference(title,popupRect);\n\t\t\tpopup.isTriggered = false;\n\t\t\tpopup.isShown = true;\n\t\t}\n\t\tvar shownPopups = [];\n\t\tfor(var i=0; i<this.popups.length; i++) {\n\t\t\tif(this.popups[i].isShown) {\n\t\t\t\tshownPopups.push(this.popups[i].title);\n\t\t\t}\n\t\t}\n/*\t\tif(shownPopups.length === 1) {\n\t\t\tthis.rootElement.addEventListener(\"click\",this,true);\n\t\t}*/\n\t\tif(popup.openActions) {\n\t\t\tpopup.revealWidget.invokeActionString(popup.openActions);\n\t\t}\n/*\t\tif(popup.closeActions) {\n\t\t\tpopup.revealWidget.wiki.setText(\"$:/popup/StartupAction/\" + popup.title,\"text\",undefined,popup.closeActions);\n\t\t\tpopup.revealWidget.wiki.setText(\"$:/popup/StartupAction/\" + popup.title,\"tags\",undefined,\"$:/tags/StartupAction\");\n\t\t}*/\n\t}\n};\n\n/*\nReturns true if the specified title and text identifies an active popup\n*/\nPopup.prototype.readPopupState = function(text) {\n\tvar popupLocationRegExp = /^\\((-?[0-9\\.E]+),(-?[0-9\\.E]+),(-?[0-9\\.E]+),(-?[0-9\\.E]+)\\)$/;\n\treturn popupLocationRegExp.test(text);\n};\n\nexports.Popup = Popup;\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/core/modules/utils/dom/popup.js",
            "module-type": "utils"
        },
        "$:/plugins/BurningTreeC/navigator/modules/widgets/action-popup.js": {
            "text": "/*\\\ntitle: $:/plugins/BurningTreeC/navigator/modules/widgets/action-popup.js\ntype: application/javascript\nmodule-type: widget\n\nAction-Popup widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar ActionPopupWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nActionPopupWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nActionPopupWidget.prototype.render = function(parent,nextSibling) {\n\t// Remember parent\n\tthis.parentDomNode = parent;\n\t// Compute attributes and execute state\n\tthis.computeAttributes();\n\tthis.execute();\n\n};\n\nActionPopupWidget.prototype.invokeAction = function(triggeringWidget,event) {\n\tif(this.popup) {\n\t\tthis.triggerPopup();\n\t}\n\treturn true;\n};\n\nActionPopupWidget.prototype.triggerPopup = function() {\n\tvar index = $tw.popup.findPopupIndex(this.popup);\n\tvar popup = $tw.popup.popups[index];\n\tthis.document.activeElement.blur();\n\tif(popup) {\n\t\tpopup.isTriggered = !popup.isShown;\n\t\t$tw.popup.triggerPopup(this.popup);\n\t}\n\treturn true;\n};\n\n/*\nCompute the internal state of the widget\n*/\nActionPopupWidget.prototype.execute = function() {\n\t// Get attributes\n\tthis.popup = this.getAttribute(\"$popup\");\n\t// Make child widgets\n\tthis.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nActionPopupWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes.popup || (this.popup && changedTiddlers[this.popup])) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\treturn this.refreshChildren(changedTiddlers);\n};\n\nexports[\"action-popup\"] = ActionPopupWidget;\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/plugins/BurningTreeC/navigator/modules/widgets/action-popup.js",
            "module-type": "widget"
        },
        "$:/plugins/BurningTreeC/navigator/modules/widgets/rootpipe.js": {
            "text": "/*\\\ntitle: $:/plugins/BurningTreeC/navigator/modules/widgets/rootpipe.js\ntype: application/javascript\nmodule-type: widget\n\nQualify text to a variable \n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar RootPipeWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nRootPipeWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nRootPipeWidget.prototype.render = function(parent,nextSibling) {\n        this.parentWidget = $tw.rootWidget;\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\tthis.renderChildren(parent,nextSibling);\n};\n\n/*\nCompute the internal state of the widget\n*/\nRootPipeWidget.prototype.execute = function() {\n\tthis.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nRootPipeWidget.prototype.refresh = function(changedTiddlers) {\n\t\treturn this.refreshChildren(changedTiddlers);\n};\n\nexports.rootpipe = RootPipeWidget;\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/plugins/BurningTreeC/navigator/modules/widgets/rootpipe.js",
            "module-type": "widget"
        },
        "$:/plugins/BurningTreeC/refreshinputs/modules/startup/initializeinputmanager.js": {
            "text": "/*\\\ntitle: $:/plugins/BurningTreeC/refreshinputs/modules/startup/initializeinputmanager.js\ntype: application/javascript\nmodule-type: startup\n\nSetup the root widget and the core root widget handlers\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n// Export name and synchronous status\nexports.name = \"initializeinputmanager\";\nexports.platforms = [\"browser\"];\nexports.after = [\"startup\"];\nexports.before = [\"story\"];\nexports.synchronous = true;\n\nexports.startup = function() {\n\n\t$tw.inputManager = new $tw.InputManager();\n};\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/plugins/BurningTreeC/refreshinputs/modules/startup/initializeinputmanager.js",
            "module-type": "startup"
        },
        "$:/plugins/BurningTreeC/refreshinputs/modules/input.js": {
            "text": "/*\\\ntitle: $:/plugins/BurningTreeC/refreshinputs/modules/input.js\ntype: application/javascript\nmodule-type: global\n\nInput handling utilities\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nfunction InputManager(options) {\n\tvar self = this;\n\toptions = options || \"\";\n\tthis.selections = {};\n\t$tw.rootWidget.addEventListener(\"tm-refresh-input\",function(event) {\n\t\tself.handleRefreshMessage(event);\n\t});\n}\n\nInputManager.prototype.handleRefreshMessage = function(event) {\n\tvar self = this;\n\tvar widget = event.widget,\n\t\taction = event.widget.editRefreshAction;\n\tif(widget && action) {\n\t\tswitch(action) {\n\t\t\tcase \"focus\":\n\t\t\t\twidget.engine.focus();\n\t\t\t\tbreak;\n\t\t\tcase \"focus-update\":\n\t\t\t\tvar editInfo = widget.getEditInfo();\n\t\t\t\twidget.engine.domNode.value = editInfo.value;\n\t\t\t\twidget.engine.focus();\n\t\t\t\tbreak;\n\t\t\tcase \"focus-again\":\n\t\t\t\tvar stateQualifier = widget.stateQualifier + widget.getStateQualifier(),\n\t\t\t\t\tcurrentTiddler = widget.getVariable(\"currentTiddler\"),\n\t\t\t\t\tdomNode = widget.engine.domNode;\n\t\t\t\tvar focusedInput = this.selections[currentTiddler].focusedInput;\n\t\t\t\tif(this.selections[currentTiddler] && (stateQualifier === focusedInput)) {\n\t\t\t\t\tvar scrollPosition = $tw.utils.getScrollPosition(domNode.ownerDocument.defaultView);\n\t\t\t\t\tdomNode.ownerDocument.defaultView.setTimeout(function() {\n\t\t\t\t\t\tvar selectionStart = self.selections[currentTiddler] ? (self.selections[currentTiddler][stateQualifier] ? self.selections[currentTiddler][stateQualifier].selectionStart : domNode.value.length) : domNode.value.length;\n\t\t\t\t\t\tvar selectionEnd = self.selections[currentTiddler] ? (self.selections[currentTiddler][stateQualifier] ? self.selections[currentTiddler][stateQualifier].selectionEnd : domNode.value.length) : domNode.value.length;\n\t\t\t\t\t\tif(domNode.setSelectionRange && !widget.engine.cm) {\n\t\t\t\t\t\t\tdomNode.setSelectionRange(selectionStart,selectionEnd);\n\t\t\t\t\t\t} else if(widget.engine.cm) {\n\t\t\t\t\t\t\twidget.engine.cm.setSelection(widget.engine.cm.posFromIndex(selectionStart),widget.engine.cm.posFromIndex(selectionEnd), { scroll: false });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(domNode.focus && !widget.engine.cm) {\n\t\t\t\t\t\t\tdomNode.focus({preventScroll: true});\n\t\t\t\t\t\t} else if(widget.engine.cm) {\n\t\t\t\t\t\t\twidget.engine.cm.focus();\n\t\t\t\t\t\t}\n\t\t\t\t\t},10);\n\t\t\t\t\tdomNode.ownerDocument.defaultView.scrollTo(scrollPosition.x,scrollPosition.y);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"focus-scrollto\":\n\t\t\t\tvar domNode = widget.engine.domNode;\n\t\t\t\tif(domNode) {\n\t\t\t\t\tdomNode.focus({preventScroll: true});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t};\n\t}\n}\n\nexports.InputManager = InputManager;\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/plugins/BurningTreeC/refreshinputs/modules/input.js",
            "module-type": "global"
        },
        "$:/core/modules/editor/factory.js": {
            "text": "/*\\\ntitle: $:/core/modules/editor/factory.js\ntype: application/javascript\nmodule-type: library\n\nFactory for constructing text editor widgets with specified engines for the toolbar and non-toolbar cases\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar DEFAULT_MIN_TEXT_AREA_HEIGHT = \"100px\"; // Minimum height of textareas in pixels\n\n// Configuration tiddlers\nvar HEIGHT_MODE_TITLE = \"$:/config/TextEditor/EditorHeight/Mode\";\nvar ENABLE_TOOLBAR_TITLE = \"$:/config/TextEditor/EnableToolbar\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nfunction editTextWidgetFactory(toolbarEngine,nonToolbarEngine) {\n\n\tvar EditTextWidget = function(parseTreeNode,options) {\n\t\t// Initialise the editor operations if they've not been done already\n\t\tif(!this.editorOperations) {\n\t\t\tEditTextWidget.prototype.editorOperations = {};\n\t\t\t$tw.modules.applyMethods(\"texteditoroperation\",this.editorOperations);\n\t\t}\n\t\tthis.initialise(parseTreeNode,options);\n\t};\n\n\t/*\n\tInherit from the base widget class\n\t*/\n\tEditTextWidget.prototype = new Widget();\n\n\t/*\n\tRender this widget into the DOM\n\t*/\n\tEditTextWidget.prototype.render = function(parent,nextSibling) {\n\t\tvar self = this;\n\t\t// Save the parent dom node\n\t\tthis.parentDomNode = parent;\n\t\t// Compute our attributes\n\t\tthis.computeAttributes();\n\t\t// Execute our logic\n\t\tthis.execute();\n\t\t// Create the wrapper for the toolbar and render its content\n\t\tif(this.editShowToolbar) {\n\t\t\tthis.toolbarNode = this.document.createElement(\"div\");\n\t\t\tthis.toolbarNode.className = \"tc-editor-toolbar\";\n\t\t\tparent.insertBefore(this.toolbarNode,nextSibling);\n\t\t\tthis.renderChildren(this.toolbarNode,null);\n\t\t\tthis.domNodes.push(this.toolbarNode);\n\t\t}\n\t\t// Create our element\n\t\tvar editInfo = this.getEditInfo(),\n\t\t\tEngine = this.editShowToolbar ? toolbarEngine : nonToolbarEngine;\n\t\tthis.engine = new Engine({\n\t\t\t\twidget: this,\n\t\t\t\tvalue: editInfo.value,\n\t\t\t\ttype: editInfo.type,\n\t\t\t\tparentNode: parent,\n\t\t\t\tnextSibling: nextSibling\n\t\t\t});\n\t\t// Call the postRender hook\n\t\tif(this.postRender) {\n\t\t\tthis.postRender();\n\t\t}\n\t\t// Fix height\n\t\tthis.engine.fixHeight();\n\t\t// Focus if required\n\t\tif(this.editFocus === \"true\" || this.editFocus === \"yes\") {\n\t\t\tthis.engine.focus();\n\t\t}\n\t\t// Add widget message listeners\n\t\tthis.addEventListeners([\n\t\t\t{type: \"tm-edit-text-operation\", handler: \"handleEditTextOperationMessage\"}\n\t\t]);\n\t\tif(this.editRefreshTiddler && this.editRefreshAction && this.editRefreshCondition) {\n\t\t\tif(this.editRefreshCondition === \"true\" || this.editRefreshCondition === \"yes\") {\n\t\t\t\tthis.dispatchEvent({ type: \"tm-refresh-input\", widget: this});\n\t\t\t}\n\t\t}\n\t\tif(this.editShowToolbar) {\n\t\t\t$tw.hooks.addHook(\"th-external-text-operation\", function(event) {\n\t\t\t\tevent = event || {};\n\t\t\t\tif(event.paramObject.tiddler && (self.getVariable(\"storyTiddler\") === event.paramObject.tiddler)) {\n\t\t\t\t\tself.handleEditTextOperationMessage(event);\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t});\n\t\t}\n\t};\n\n\t/*\n\tGet the tiddler being edited and current value\n\t*/\n\tEditTextWidget.prototype.getEditInfo = function() {\n\t\t// Get the edit value\n\t\tvar self = this,\n\t\t\tvalue,\n\t\t\ttype = \"text/plain\",\n\t\t\tupdate;\n\t\tif(this.editIndex) {\n\t\t\tvalue = this.wiki.extractTiddlerDataItem(this.editTitle,this.editIndex,this.editDefault);\n\t\t\tupdate = function(value) {\n\t\t\t\tvar data = self.wiki.getTiddlerData(self.editTitle,{});\n\t\t\t\tif(data[self.editIndex] !== value) {\n\t\t\t\t\tdata[self.editIndex] = value;\n\t\t\t\t\tself.wiki.setTiddlerData(self.editTitle,data);\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\t// Get the current tiddler and the field name\n\t\t\tvar tiddler = this.wiki.getTiddler(this.editTitle);\n\t\t\tif(tiddler) {\n\t\t\t\t// If we've got a tiddler, the value to display is the field string value\n\t\t\t\tvalue = tiddler.getFieldString(this.editField);\n\t\t\t\tif(this.editField === \"text\") {\n\t\t\t\t\ttype = tiddler.fields.type || \"text/vnd.tiddlywiki\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Otherwise, we need to construct a default value for the editor\n\t\t\t\tswitch(this.editField) {\n\t\t\t\t\tcase \"text\":\n\t\t\t\t\t\tvalue = \"Type the text for the tiddler '\" + this.editTitle + \"'\";\n\t\t\t\t\t\ttype = \"text/vnd.tiddlywiki\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"title\":\n\t\t\t\t\t\tvalue = this.editTitle;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvalue = \"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(this.editDefault !== undefined) {\n\t\t\t\t\tvalue = this.editDefault;\n\t\t\t\t}\n\t\t\t}\n\t\t\tupdate = function(value) {\n\t\t\t\tvar tiddler = self.wiki.getTiddler(self.editTitle),\n\t\t\t\t\tupdateFields = {\n\t\t\t\t\t\ttitle: self.editTitle\n\t\t\t\t\t};\n\t\t\t\tupdateFields[self.editField] = value;\n\t\t\t\tself.wiki.addTiddler(new $tw.Tiddler(self.wiki.getCreationFields(),tiddler,updateFields,self.wiki.getModificationFields()));\n\t\t\t\tif(self.editSaveTiddler) {\n\t\t\t\t\tvar saveTiddler = self.wiki.getTiddler(self.editSaveTiddler),\n\t\t\t\t\t\tupdateFields = {\n\t\t\t\t\t\t\ttitle: self.editSaveTiddler\n\t\t\t\t\t\t};\n\t\t\t\t\tupdateFields[self.editField] = value;\n\t\t\t\t\tself.wiki.addTiddler(new $tw.Tiddler(self.wiki.getCreationFields(),saveTiddler,updateFields,self.wiki.getModificationFields()));\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tif(this.editType) {\n\t\t\ttype = this.editType;\n\t\t}\n\t\treturn {value: value || \"\", type: type, update: update};\n\t};\n\n\t/*\n\tHandle an edit text operation message from the toolbar\n\t*/\n\tEditTextWidget.prototype.handleEditTextOperationMessage = function(event) {\n\t\t// Prepare information about the operation\n\t\tvar operation = this.engine.createTextOperation();\n\t\t// Invoke the handler for the selected operation\n\t\tvar handler = this.editorOperations[event.param];\n\t\tif(handler) {\n\t\t\thandler.call(this,event,operation);\n\t\t}\n\t\t// Execute the operation via the engine\n\t\tvar newText = this.engine.executeTextOperation(operation);\n\t\t// Fix the tiddler height and save changes\n\t\tthis.engine.fixHeight();\n\t\tthis.saveChanges(newText);\n\t};\n\n\t/*\n\tCompute the internal state of the widget\n\t*/\n\tEditTextWidget.prototype.execute = function() {\n\t\t// Get our parameters\n\t\tthis.editTitle = this.getAttribute(\"tiddler\",this.getVariable(\"currentTiddler\"));\n\t\tthis.editField = this.getAttribute(\"field\",\"text\");\n\t\tthis.editIndex = this.getAttribute(\"index\");\n\t\tthis.editDefault = this.getAttribute(\"default\");\n\t\tthis.editClass = this.getAttribute(\"class\");\n\t\tthis.editPlaceholder = this.getAttribute(\"placeholder\");\n\t\tthis.editSize = this.getAttribute(\"size\");\n\t\tthis.editRows = this.getAttribute(\"rows\");\n\t\tthis.editAutoHeight = this.wiki.getTiddlerText(HEIGHT_MODE_TITLE,\"auto\");\n\t\tthis.editAutoHeight = this.getAttribute(\"autoHeight\",this.editAutoHeight === \"auto\" ? \"yes\" : \"no\") === \"yes\";\n\t\tthis.editMinHeight = this.getAttribute(\"minHeight\",DEFAULT_MIN_TEXT_AREA_HEIGHT);\n\t\tthis.editFocusPopup = this.getAttribute(\"focusPopup\");\n\t\tthis.editFocus = this.getAttribute(\"focus\");\n\t\t// Get the default editor element tag and type\n\t\tvar tag,type;\n\t\tif(this.editField === \"text\") {\n\t\t\ttag = \"textarea\";\n\t\t} else {\n\t\t\ttag = \"input\";\n\t\t\tvar fieldModule = $tw.Tiddler.fieldModules[this.editField];\n\t\t\tif(fieldModule && fieldModule.editTag) {\n\t\t\t\ttag = fieldModule.editTag;\n\t\t\t}\n\t\t\tif(fieldModule && fieldModule.editType) {\n\t\t\t\ttype = fieldModule.editType;\n\t\t\t}\n\t\t\ttype = type || \"text\";\n\t\t}\n\t\tif(this.editFocusPopup) {\n\t\t\tthis.registerPopup();\n\t\t}\n\t\t// Get the rest of our parameters\n\t\tthis.editTag = this.getAttribute(\"tag\",tag);\n\t\tthis.editType = this.getAttribute(\"type\",type);\n\t\t// Make the child widgets\n\t\tthis.makeChildWidgets();\n\t\t// Determine whether to show the toolbar\n\t\tthis.editShowToolbar = this.wiki.getTiddlerText(ENABLE_TOOLBAR_TITLE,\"yes\");\n\t\tthis.editShowToolbar = (this.editShowToolbar === \"yes\") && !!(this.children && this.children.length > 0) && (!this.document.isTiddlyWikiFakeDom);\n\t\tthis.editTabIndex = this.getAttribute(\"tabindex\");\n\t\tthis.editCancelPopups = this.getAttribute(\"cancelPopups\",\"no\") === \"yes\";\n\t\tthis.editSaveTiddler = this.getAttribute(\"saveTiddler\");\n\t\tthis.editRefreshTiddler = this.getAttribute(\"refreshTiddler\");\n\t\tthis.editRefreshCondition = this.getAttribute(\"refreshCondition\");\n\t\tthis.editRefreshAction = this.getAttribute(\"refreshAction\");\n\t\tthis.stateQualifier = this.editTitle + this.editField + this.editIndex;\n\t};\n\n\tEditTextWidget.prototype.registerPopup = function() {\n\t\tvar state = this.editFocusPopup;\n\t\tvar index = $tw.popup.findPopupIndex(state);\n\t\tif(index === -1) {\n\t\t\t$tw.utils.pushTop($tw.popup.popups,{\n\t\t\t\ttitle: state,\n\t\t\t\ttriggeringWidget: this,\n\t\t\t\tisShown: false\n\t\t\t});\n\t\t} else {\n\t\t\tvar popup = $tw.popup.popups[index];\n\t\t\tpopup.triggeringWidget = this;\n\t\t}\n\t};\n\n\t/*\n\tSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n\t*/\n\tEditTextWidget.prototype.refresh = function(changedTiddlers) {\n\t\tvar changedAttributes = this.computeAttributes();\n\t\t// Completely rerender if any of our attributes have changed\n\t\tif(changedAttributes.tiddler || changedAttributes.field || changedAttributes.index || changedAttributes[\"default\"] || changedAttributes[\"class\"] || changedAttributes.placeholder || changedAttributes.size || changedAttributes.autoHeight || changedAttributes.minHeight || changedAttributes.focusPopup || changedAttributes[\"tabindex\"] || changedAttributes[\"cancelPopups\"] || changedAttributes.saveTiddler || changedAttributes.rows || changedAttributes.refreshTiddler || changedAttributes.refreshAction || changedTiddlers[HEIGHT_MODE_TITLE] || changedTiddlers[ENABLE_TOOLBAR_TITLE]) {\n\t\t\tthis.refreshSelf();\n\t\t\treturn true;\n\t\t} else if(this.editRefreshTiddler && this.editRefreshCondition && changedTiddlers[this.editRefreshTiddler] && (this.getAttribute(\"refreshCondition\") === \"true\" || this.getAttribute(\"refreshCondition\") === \"yes\")) {\n\t\t\tthis.dispatchEvent({type: \"tm-refresh-input\", widget: this});\n\t\t} else if(changedTiddlers[this.editTitle]) {\n\t\t\tvar editInfo = this.getEditInfo();\n\t\t\tthis.updateEditor(editInfo.value,editInfo.type);\n\t\t}\n\t\tthis.engine.fixHeight();\n\t\tif(this.editShowToolbar) {\n\t\t\treturn this.refreshChildren(changedTiddlers);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t/*\n\tUpdate the editor with new text. This method is separate from updateEditorDomNode()\n\tso that subclasses can override updateEditor() and still use updateEditorDomNode()\n\t*/\n\tEditTextWidget.prototype.updateEditor = function(text,type) {\n\t\tthis.updateEditorDomNode(text,type);\n\t};\n\n\t/*\n\tUpdate the editor dom node with new text\n\t*/\n\tEditTextWidget.prototype.updateEditorDomNode = function(text,type) {\n\t\tthis.engine.setText(text,type);\n\t};\n\n\t/*\n\tSave changes back to the tiddler store\n\t*/\n\tEditTextWidget.prototype.saveChanges = function(text) {\n\t\tvar editInfo = this.getEditInfo();\n\t\tif(text !== editInfo.value) {\n\t\t\teditInfo.update(text);\n\t\t}\n\t};\n\n\t/*\n\tHandle a dom \"keydown\" event, which we'll bubble up to our container for the keyboard widgets benefit\n\t*/\n\tEditTextWidget.prototype.handleKeydownEvent = function(event) {\n\t\t// Check for a keyboard shortcut\n\t\tthis.engine.saveSelections && this.engine.saveSelections();\n\t\tif(this.toolbarNode) {\n\t\t\tvar shortcutElements = this.toolbarNode.querySelectorAll(\"[data-tw-keyboard-shortcut]\");\n\t\t\tfor(var index=0; index<shortcutElements.length; index++) {\n\t\t\t\tvar el = shortcutElements[index],\n\t\t\t\t\tshortcutData = el.getAttribute(\"data-tw-keyboard-shortcut\"),\n\t\t\t\t\tkeyInfoArray = $tw.keyboardManager.parseKeyDescriptors(shortcutData,{\n\t\t\t\t\t\twiki: this.wiki\n\t\t\t\t\t});\n\t\t\t\tif($tw.keyboardManager.checkKeyDescriptors(event,keyInfoArray)) {\n\t\t\t\t\tvar clickEvent = this.document.createEvent(\"Events\");\n\t\t\t\t    clickEvent.initEvent(\"click\",true,false);\n\t\t\t\t    el.dispatchEvent(clickEvent);\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Propogate the event to the container\n\t\tif(this.propogateKeydownEvent(event)) {\n\t\t\t// Ignore the keydown if it was already handled\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t\treturn true;\n\t\t}\n\t\t// Otherwise, process the keydown normally\n\t\treturn false;\n\t};\n\n\t/*\n\tPropogate keydown events to our container for the keyboard widgets benefit\n\t*/\n\tEditTextWidget.prototype.propogateKeydownEvent = function(event) {\n\t\tvar newEvent = this.document.createEventObject ? this.document.createEventObject() : this.document.createEvent(\"Events\");\n\t\tif(newEvent.initEvent) {\n\t\t\tnewEvent.initEvent(\"keydown\", true, true);\n\t\t}\n\t\tnewEvent.keyCode = event.keyCode;\n\t\tnewEvent.which = event.which;\n\t\tnewEvent.metaKey = event.metaKey;\n\t\tnewEvent.ctrlKey = event.ctrlKey;\n\t\tnewEvent.altKey = event.altKey;\n\t\tnewEvent.shiftKey = event.shiftKey;\n\t\treturn !this.parentDomNode.dispatchEvent(newEvent);\n\t};\n\n\treturn EditTextWidget;\n\n}\n\nexports.editTextWidgetFactory = editTextWidgetFactory;\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/core/modules/editor/factory.js",
            "module-type": "library"
        },
        "$:/core/modules/widgets/edit.js": {
            "text": "/*\\\ntitle: $:/core/modules/widgets/edit.js\ntype: application/javascript\nmodule-type: widget\n\nEdit widget is a meta-widget chooses the appropriate actual editting widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar EditWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nEditWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nEditWidget.prototype.render = function(parent,nextSibling) {\n\tthis.parentDomNode = parent;\n\tthis.computeAttributes();\n\tthis.execute();\n\tthis.renderChildren(parent,nextSibling);\n};\n\n// Mappings from content type to editor type are stored in tiddlers with this prefix\nvar EDITOR_MAPPING_PREFIX = \"$:/config/EditorTypeMappings/\";\n\n/*\nCompute the internal state of the widget\n*/\nEditWidget.prototype.execute = function() {\n\t// Get our parameters\n\tthis.editTitle = this.getAttribute(\"tiddler\",this.getVariable(\"currentTiddler\"));\n\tthis.editField = this.getAttribute(\"field\",\"text\");\n\tthis.editIndex = this.getAttribute(\"index\");\n\tthis.editClass = this.getAttribute(\"class\");\n\tthis.editPlaceholder = this.getAttribute(\"placeholder\");\n\t// Choose the appropriate edit widget\n\tthis.editorType = this.getEditorType();\n\tthis.editTabIndex = this.getAttribute(\"tabindex\");\n\tthis.editCancelPopups = this.getAttribute(\"cancelPopups\",\"no\");\n\tthis.editSaveTiddler = this.getAttribute(\"saveTiddler\");\n\tthis.editRefreshTiddler = this.getAttribute(\"refreshTiddler\");\n\tthis.editRefreshCondition = this.getAttribute(\"refreshCondition\");\n\tthis.editRefreshAction = this.getAttribute(\"refreshAction\");\n\t// Make the child widgets\n\tthis.makeChildWidgets([{\n\t\ttype: \"edit-\" + this.editorType,\n\t\tattributes: {\n\t\t\ttiddler: {type: \"string\", value: this.editTitle},\n\t\t\tfield: {type: \"string\", value: this.editField},\n\t\t\tindex: {type: \"string\", value: this.editIndex},\n\t\t\t\"class\": {type: \"string\", value: this.editClass},\n\t\t\t\"placeholder\": {type: \"string\", value: this.editPlaceholder},\n\t\t\t\"tabindex\": {type: \"string\", value: this.editTabIndex},\n\t\t\t\"cancelPopups\": {type: \"string\", value: this.editCancelPopups},\n\t\t\t\"saveTiddler\": {type: \"string\", value: this.editSaveTiddler},\n\t\t\t\"refreshTiddler\": {type: \"string\", value: this.editRefreshTiddler},\n\t\t\t\"refreshCondition\": {type: \"string\", value: this.editRefreshCondition},\n\t\t\t\"refreshAction\": {type: \"string\", value: this.editRefreshAction}\n\t\t},\n\t\tchildren: this.parseTreeNode.children\n\t}]);\n};\n\nEditWidget.prototype.getEditorType = function() {\n\t// Get the content type of the thing we're editing\n\tvar type;\n\tif(this.editField === \"text\") {\n\t\tvar tiddler = this.wiki.getTiddler(this.editTitle);\n\t\tif(tiddler) {\n\t\t\ttype = tiddler.fields.type;\n\t\t}\n\t}\n\ttype = type || \"text/vnd.tiddlywiki\";\n\tvar editorType = this.wiki.getTiddlerText(EDITOR_MAPPING_PREFIX + type);\n\tif(!editorType) {\n\t\tvar typeInfo = $tw.config.contentTypeInfo[type];\n\t\tif(typeInfo && typeInfo.encoding === \"base64\") {\n\t\t\teditorType = \"binary\";\n\t\t} else {\n\t\t\teditorType = \"text\";\n\t\t}\n\t}\n\treturn editorType;\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nEditWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\t// Refresh if an attribute has changed, or the type associated with the target tiddler has changed\n\tif(changedAttributes.tiddler || changedAttributes.field || changedAttributes.index || changedAttributes[\"tabindex\"] || changedAttributes[\"cancelPopups\"] || changedAttributes.saveTiddler || changedAttributes.refreshTiddler || changedAttributes.refreshAction || (changedTiddlers[this.editTitle] && this.getEditorType() !== this.editorType)) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t} else {\n\t\treturn this.refreshChildren(changedTiddlers);\n\t}\n};\n\nexports.edit = EditWidget;\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/core/modules/widgets/edit.js",
            "module-type": "widget"
        },
        "$:/core/modules/editor/engines/framed.js": {
            "text": "/*\\\ntitle: $:/core/modules/editor/engines/framed.js\ntype: application/javascript\nmodule-type: library\n\nText editor engine based on a simple input or textarea within an iframe. This is done so that the selection is preserved even when clicking away from the textarea\n\n\\*/\n(function(){\n\n/*jslint node: true,browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar HEIGHT_VALUE_TITLE = \"$:/config/TextEditor/EditorHeight/Height\";\n\nfunction FramedEngine(options) {\n\t// Save our options\n\toptions = options || {};\n\tthis.widget = options.widget;\n\tthis.value = options.value;\n\tthis.parentNode = options.parentNode;\n\tthis.nextSibling = options.nextSibling;\n\t// Create our hidden dummy text area for reading styles\n\tthis.dummyTextArea = this.widget.document.createElement(\"textarea\");\n\tif(this.widget.editClass) {\n\t\tthis.dummyTextArea.className = this.widget.editClass + \" tc-tiddler-editor\";\n\t}\n//\tthis.dummyTextArea.setAttribute(\"hidden\",\"true\");\n//\tthis.widget.domNodes.push(this.dummyTextArea);\n\t// Create the iframe\n//\tthis.iframeNode = this.widget.document.createElement(\"iframe\");\n\tthis.parentNode.insertBefore(this.dummyTextArea,this.nextSibling);\n/*\tthis.iframeDoc = this.iframeNode.contentWindow.document;\n\t// (Firefox requires us to put some empty content in the iframe)\n\tthis.iframeDoc.open();\n\tthis.iframeDoc.write(\"\");\n\tthis.iframeDoc.close();\n\t// Style the iframe\n\tthis.iframeNode.className = this.dummyTextArea.className;\n\tthis.iframeNode.style.border = \"none\";\n\tthis.iframeNode.style.padding = \"0\";\n\tthis.iframeNode.style.resize = \"none\";\n\tthis.iframeDoc.body.style.margin = \"0\";\n\tthis.iframeDoc.body.style.padding = \"0\";*/\n\t// Construct the textarea or input node\n\tvar tag = this.widget.editTag;\n\tif($tw.config.htmlUnsafeElements.indexOf(tag) !== -1) {\n\t\ttag = \"input\";\n\t}\n\tthis.domNode = this.dummyTextArea;\n\t// Set the text\n\t/*if(this.widget.editTag === \"textarea\") {\n\t\tthis.domNode.appendChild(this.iframeDoc.createTextNode(this.value));\n\t} else {*/\n\t\tthis.domNode.value = this.value;\n//\t}\n\t// Set the attributes\n\tif(this.widget.editType) {\n\t\tthis.domNode.setAttribute(\"type\",this.widget.editType);\n\t}\n\tif(this.widget.editPlaceholder) {\n\t\tthis.domNode.setAttribute(\"placeholder\",this.widget.editPlaceholder);\n\t}\n\tif(this.widget.editSize) {\n\t\tthis.domNode.setAttribute(\"size\",this.widget.editSize);\n\t}\n\tif(this.widget.editRows) {\n\t\tthis.domNode.setAttribute(\"rows\",this.widget.editRows);\n\t}\n\tif(this.widget.editTabIndex) {\n\t\tthis.domNode.setAttribute(\"tabindex\",this.widget.editTabIndex);\n\t}\n\t// Copy the styles from the dummy textarea\n\t//this.copyStyles();\n\t// Add event listeners\n\t$tw.utils.addEventListeners(this.domNode,[\n\t\t{name: \"click\",handlerObject: this,handlerMethod: \"handleClickEvent\"},\n\t\t{name: \"input\",handlerObject: this,handlerMethod: \"handleInputEvent\"},\n\t\t{name: \"keydown\",handlerObject: this.widget,handlerMethod: \"handleKeydownEvent\"},\n\t\t{name: \"blur\",handlerObject: this,handlerMethod: \"handleBlurEvent\"},\n\t\t{name: \"focus\",handlerObject: this,handlerMethod: \"handleFocusEvent\"}\n\t]);\n\t// Insert the element into the DOM\n\t//this.iframeDoc.body.appendChild(this.domNode);\n\t\n\tthis.parentNode.insertBefore(this.domNode,this.nextSibling);\n\tthis.widget.domNodes.push(this.domNode);\n}\n\nFramedEngine.prototype.saveSelections = function() {\n\tvar selectionStart = this.domNode.selectionStart,\n\t\tselectionEnd = this.domNode.selectionEnd,\n\t\tstateQualifier = this.widget.stateQualifier + this.widget.getStateQualifier();\n\tvar currentTiddler = this.widget.getVariable(\"currentTiddler\");\n\tif(!$tw.inputManager.selections[currentTiddler]) {\n\t\t$tw.inputManager.selections[currentTiddler] = {};\n\t}\n\tif(!$tw.inputManager.selections[currentTiddler][stateQualifier]) {\n\t\t$tw.inputManager.selections[currentTiddler][stateQualifier] = {};\n\t}\n\t$tw.inputManager.selections[currentTiddler].focusedInput = stateQualifier;\n\t$tw.inputManager.selections[currentTiddler][stateQualifier].selectionStart = selectionStart;\n\t$tw.inputManager.selections[currentTiddler][stateQualifier].selectionEnd = selectionEnd;\n};\n\nFramedEngine.prototype.handleBlurEvent = function(event) {\n\tthis.saveSelections();\n};\n\n/*\nCopy styles from the dummy text area to the textarea in the iframe\n*/\nFramedEngine.prototype.copyStyles = function() {\n\t// Copy all styles\n\t$tw.utils.copyStyles(this.dummyTextArea,this.domNode);\n\t// Override the ones that should not be set the same as the dummy textarea\n\tthis.domNode.style.display = \"block\";\n\tthis.domNode.style.width = \"100%\";\n\tthis.domNode.style.margin = \"0\";\n\t// In Chrome setting -webkit-text-fill-color overrides the placeholder text colour\n\tthis.domNode.style[\"-webkit-text-fill-color\"] = \"currentcolor\";\n};\n\n/*\nSet the text of the engine if it doesn't currently have focus\n*/\nFramedEngine.prototype.setText = function(text,type) {\n\tif(!this.domNode.isTiddlyWikiFakeDom) {\n\t\tif(this.domNode.ownerDocument.activeElement !== this.domNode) {\n\t\t\tthis.domNode.value = text;\n\t\t}\n\t\t// Fix the height if needed\n\t\tthis.fixHeight();\n\t}\n};\n\n/*\nGet the text of the engine\n*/\nFramedEngine.prototype.getText = function() {\n\treturn this.domNode.value;\n};\n\n/*\nFix the height of textarea to fit content\n*/\nFramedEngine.prototype.fixHeight = function() {\n\t// Make sure styles are updated\n\tthis.copyStyles();\n\t// Adjust height\n\tif(this.widget.editTag === \"textarea\") {\n\t\tif(this.widget.editAutoHeight) {\n\t\t\tif(this.domNode && !this.domNode.isTiddlyWikiFakeDom) {\n\t\t\t\tvar newHeight = $tw.utils.resizeTextAreaToFit(this.domNode,this.widget.editMinHeight);\n\t\t\t\tthis.domNode.style.height = (newHeight + 14) + \"px\"; // +14 for the border on the textarea\n\t\t\t}\n\t\t} else {\n\t\t\tvar fixedHeight = parseInt(this.widget.wiki.getTiddlerText(HEIGHT_VALUE_TITLE,\"400px\"),10);\n\t\t\tfixedHeight = Math.max(fixedHeight,20);\n\t\t\tthis.domNode.style.height = fixedHeight + \"px\";\n\t\t\t//this.iframeNode.style.height = (fixedHeight + 14) + \"px\";\n\t\t}\n\t}\n};\n\n/*\nFocus the engine node\n*/\nFramedEngine.prototype.focus  = function() {\n\tif(this.domNode.focus && this.domNode.select) {\n\t\tthis.domNode.focus();\n\t\tthis.domNode.select();\n\t}\n};\n\nFramedEngine.prototype.handleFocusEvent = function() {\n\tvar stateQualifier = this.widget.stateQualifier + this.widget.getStateQualifier(),\n\t\tcurrentTiddler = this.widget.getVariable(\"currentTiddler\");\n\tif(!$tw.inputManager.selections[currentTiddler]) {\n\t\t$tw.inputManager.selections[currentTiddler] = {};\n\t}\n\tif(!$tw.inputManager.selections[currentTiddler][stateQualifier]) {\n\t\t$tw.inputManager.selections[currentTiddler][stateQualifier] = {};\n\t}\n\t$tw.inputManager.selections[currentTiddler].focusedInput = stateQualifier;\n\tif(this.widget.editCancelPopups) {\n\t\t/*var numPopups = $tw.popup.popups.length;\n\t\tif(numPopups !== 0) {\n\t\t\tfor(var i=0; i < numPopups; i++) {\n\t\t\t\t$tw.popup.cancel(i);\n\t\t\t}\n\t\t}*/\n\t\tfor(var i=0; i<$tw.popup.popups.length; i++) {\n\t\t\t$tw.popup.deletePopup($tw.popup.popups[i]);\n\t\t}\n\t}\n};\n\n/*\nHandle a click\n*/\nFramedEngine.prototype.handleClickEvent = function(event) {\n\tthis.fixHeight();\n\treturn true;\n};\n\n/*\nHandle a dom \"input\" event which occurs when the text has changed\n*/\nFramedEngine.prototype.handleInputEvent = function(event) {\n\tthis.widget.saveChanges(this.getText());\n\tthis.fixHeight();\n\treturn true;\n};\n\n/*\nCreate a blank structure representing a text operation\n*/\nFramedEngine.prototype.createTextOperation = function() {\n\tvar operation = {\n\t\ttext: this.domNode.value,\n\t\tselStart: this.domNode.selectionStart,\n\t\tselEnd: this.domNode.selectionEnd,\n\t\tcutStart: null,\n\t\tcutEnd: null,\n\t\treplacement: null,\n\t\tnewSelStart: null,\n\t\tnewSelEnd: null\n\t};\n\toperation.selection = operation.text.substring(operation.selStart,operation.selEnd);\n\treturn operation;\n};\n\n/*\nExecute a text operation\n*/\nFramedEngine.prototype.executeTextOperation = function(operation) {\n\t// Perform the required changes to the text area and the underlying tiddler\n\tvar newText = operation.text;\n\tif(operation.replacement !== null) {\n\t\tnewText = operation.text.substring(0,operation.cutStart) + operation.replacement + operation.text.substring(operation.cutEnd);\n\t\t// Attempt to use a execCommand to modify the value of the control\n\t\tif(this.domNode.ownerDocument.queryCommandSupported(\"insertText\") && this.domNode.ownerDocument.queryCommandSupported(\"delete\") && !$tw.browser.isFirefox) {\n\t\t\tthis.domNode.focus();\n\t\t\tthis.domNode.setSelectionRange(operation.cutStart,operation.cutEnd);\n\t\t\tif(operation.replacement === \"\") {\n\t\t\t\tthis.domNode.ownerDocument.execCommand(\"delete\",false,\"\");\n\t\t\t} else {\n\t\t\t\tthis.domNode.ownerDocument.execCommand(\"insertText\",false,operation.replacement);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.domNode.value = newText;\n\t\t}\n\t\tthis.domNode.focus();\n\t\tthis.domNode.setSelectionRange(operation.newSelStart,operation.newSelEnd);\n\t}\n\tthis.domNode.focus();\n\treturn newText;\n};\n\nexports.FramedEngine = FramedEngine;\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/core/modules/editor/engines/framed.js",
            "module-type": "library"
        },
        "$:/core/modules/editor/engines/simple.js": {
            "text": "/*\\\ntitle: $:/core/modules/editor/engines/simple.js\ntype: application/javascript\nmodule-type: library\n\nText editor engine based on a simple input or textarea tag\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar HEIGHT_VALUE_TITLE = \"$:/config/TextEditor/EditorHeight/Height\";\n\nfunction SimpleEngine(options) {\n\t// Save our options\n\toptions = options || {};\n\tthis.widget = options.widget;\n\tthis.value = options.value;\n\tthis.parentNode = options.parentNode;\n\tthis.nextSibling = options.nextSibling;\n\t// Construct the textarea or input node\n\tvar tag = this.widget.editTag;\n\tif($tw.config.htmlUnsafeElements.indexOf(tag) !== -1) {\n\t\ttag = \"input\";\n\t}\n\tthis.domNode = this.widget.document.createElement(tag);\n\t// Set the text\n\tif(this.widget.editTag === \"textarea\") {\n\t\tthis.domNode.appendChild(this.widget.document.createTextNode(this.value));\n\t} else {\n\t\tthis.domNode.value = this.value;\n\t}\n\t// Set the attributes\n\tif(this.widget.editType) {\n\t\tthis.domNode.setAttribute(\"type\",this.widget.editType);\n\t}\n\tif(this.widget.editPlaceholder) {\n\t\tthis.domNode.setAttribute(\"placeholder\",this.widget.editPlaceholder);\n\t}\n\tif(this.widget.editSize) {\n\t\tthis.domNode.setAttribute(\"size\",this.widget.editSize);\n\t}\n\tif(this.widget.editRows) {\n\t\tthis.domNode.setAttribute(\"rows\",this.widget.editRows);\n\t}\n\tif(this.widget.editClass) {\n\t\tthis.domNode.className = this.widget.editClass;\n\t}\n\tif(this.widget.editTabIndex) {\n\t\tthis.domNode.setAttribute(\"tabindex\",this.widget.editTabIndex);\n\t}\n\t// Add an input event handler\n\t$tw.utils.addEventListeners(this.domNode,[\n\t\t{name: \"focus\", handlerObject: this, handlerMethod: \"handleFocusEvent\"},\n\t\t{name: \"input\", handlerObject: this, handlerMethod: \"handleInputEvent\"},\n\t\t{name: \"blur\", handlerObject: this, handlerMethod: \"handleBlurEvent\"}\n\t]);\n\t// Insert the element into the DOM\n\tthis.parentNode.insertBefore(this.domNode,this.nextSibling);\n\tthis.widget.domNodes.push(this.domNode);\n}\n\nSimpleEngine.prototype.saveSelections = function() {\n\tvar selectionStart = this.domNode.selectionStart,\n\t\tselectionEnd = this.domNode.selectionEnd,\n\t\tstateQualifier = this.widget.stateQualifier + this.widget.getStateQualifier();\n\tvar currentTiddler = this.widget.getVariable(\"currentTiddler\");\n\tif(!$tw.inputManager.selections[currentTiddler]) {\n\t\t$tw.inputManager.selections[currentTiddler] = {};\n\t}\n\tif(!$tw.inputManager.selections[currentTiddler][stateQualifier]) {\n\t\t$tw.inputManager.selections[currentTiddler][stateQualifier] = {};\n\t}\n\t$tw.inputManager.selections[currentTiddler].focusedInput = stateQualifier;\n\t$tw.inputManager.selections[currentTiddler][stateQualifier].selectionStart = selectionStart;\n\t$tw.inputManager.selections[currentTiddler][stateQualifier].selectionEnd = selectionEnd;\n};\n\nSimpleEngine.prototype.handleBlurEvent = function(event) {\n\tthis.saveSelections();\n\tif(this.widget.editFocusPopup) {\n\t\tvar index = $tw.popup.findPopupIndex(this.widget.editFocusPopup);\n\t\tvar popup = $tw.popup.popups[index];\n\t\tif(!popup.revealWidget.isOpen) {\n\t\t\t$tw.popup.deletePopup($tw.popup.popups[index]);\n\t\t}\n\t}\n};\n\n/*\nSet the text of the engine if it doesn't currently have focus\n*/\nSimpleEngine.prototype.setText = function(text,type) {\n\tif(!this.domNode.isTiddlyWikiFakeDom) {\n\t\tif(this.domNode.ownerDocument.activeElement !== this.domNode || text === \"\") {\n\t\t\tthis.domNode.value = text;\n\t\t}\n\t\t// Fix the height if needed\n\t\tthis.fixHeight();\n\t}\n};\n\n/*\nGet the text of the engine\n*/\nSimpleEngine.prototype.getText = function() {\n\treturn this.domNode.value;\n};\n\n/*\nFix the height of textarea to fit content\n*/\nSimpleEngine.prototype.fixHeight = function() {\n\tif(this.widget.editTag === \"textarea\") {\n\t\tif(this.widget.editAutoHeight) {\n\t\t\tif(this.domNode && !this.domNode.isTiddlyWikiFakeDom) {\n\t\t\t\t$tw.utils.resizeTextAreaToFit(this.domNode,this.widget.editMinHeight);\n\t\t\t}\n\t\t} else {\n\t\t\tvar fixedHeight = parseInt(this.widget.wiki.getTiddlerText(HEIGHT_VALUE_TITLE,\"400px\"),10);\n\t\t\tfixedHeight = Math.max(fixedHeight,20);\n\t\t\tthis.domNode.style.height = fixedHeight + \"px\";\n\t\t}\n\t}\n};\n\n/*\nFocus the engine node\n*/\nSimpleEngine.prototype.focus  = function() {\n\tif(this.domNode.focus && this.domNode.select) {\n\t\tthis.domNode.focus();\n\t\tthis.domNode.select();\n\t}\n};\n\n/*\nHandle a dom \"input\" event which occurs when the text has changed\n*/\nSimpleEngine.prototype.handleInputEvent = function(event) {\n\tthis.widget.saveChanges(this.getText());\n\tthis.fixHeight();\n\treturn true;\n};\n\n/*\nHandle a dom \"focus\" event\n*/\nSimpleEngine.prototype.handleFocusEvent = function(event) {\n\tvar stateQualifier = this.widget.stateQualifier + this.widget.getStateQualifier(),\n\t\tcurrentTiddler = this.widget.getVariable(\"currentTiddler\");\n\tif(!$tw.inputManager.selections[currentTiddler]) {\n\t\t$tw.inputManager.selections[currentTiddler] = {};\n\t}\n\tif(!$tw.inputManager.selections[currentTiddler][stateQualifier]) {\n\t\t$tw.inputManager.selections[currentTiddler][stateQualifier] = {};\n\t}\n\t$tw.inputManager.selections[currentTiddler].focusedInput = stateQualifier;\n\n\tif(this.widget.editFocusPopup) {\n\t\tvar index = $tw.popup.findPopupIndex(this.widget.editFocusPopup);\n\t\tif(!index) {\n\t\t\tthis.widget.registerPopup();\n\t\t\tindex = $tw.popup.findPopupIndex(this.widget.editFocusPopup);\n\t\t}\n\t\tvar isShown = $tw.popup.popups[index].isShown;\n\t\t$tw.popup.popups[index].isShown = isShown;\n\t\t$tw.popup.popups[index].isTriggered = true;\n\t\t$tw.popup.popups[index].noStateReference = false;\n\t\tif(!$tw.popup.popups[index].revealWidget) {\n\t\t\t$tw.popup.popups[index].revealWidget = this.widget;\n\t\t}\n\t\t$tw.popup.triggerPopup(this.widget.editFocusPopup);\n\t} else if(this.widget.editCancelPopups) {\n\t\tfor(var i=0; i<$tw.popup.popups.length; i++) {\n\t\t\t$tw.popup.deletePopup($tw.popup.popups[i]);\n\t\t}\n\t}\n\treturn true;\n};\n\n/*\nCreate a blank structure representing a text operation\n*/\nSimpleEngine.prototype.createTextOperation = function() {\n\treturn null;\n};\n\n/*\nExecute a text operation\n*/\nSimpleEngine.prototype.executeTextOperation = function(operation) {\n};\n\nexports.SimpleEngine = SimpleEngine;\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/core/modules/editor/engines/simple.js",
            "module-type": "library"
        },
        "$:/language/Shortcuts/Input/Accept/Hint": {
            "title": "$:/language/Shortcuts/Input/Accept/Hint",
            "text": "accept the selected dropdown item"
        },
        "$:/language/Shortcuts/Input/Clear/Hint": {
            "title": "$:/language/Shortcuts/Input/Clear/Hint",
            "text": "clear the focused input field"
        },
        "$:/language/Shortcuts/Input/Down/Hint": {
            "title": "$:/language/Shortcuts/Input/Down/Hint",
            "text": "select the next item within a dropdown list"
        },
        "$:/language/Shortcuts/Input/Tabs-Right/Hint": {
            "title": "$:/language/Shortcuts/Input/Tabs-Right/Hint",
            "text": "select the next tab within a dropdown"
        },
        "$:/language/Shortcuts/Input/Tabs-Left/Hint": {
            "title": "$:/language/Shortcuts/Input/Tabs-Left/Hint",
            "text": "select the previous tab within a dropdown"
        },
        "$:/language/Shortcuts/Input/Up/Hint": {
            "title": "$:/language/Shortcuts/Input/Up/Hint",
            "text": "select the previous item within a dropdown list"
        },
        "$:/language/Search/Matches/More": {
            "title": "$:/language/Search/Matches/More",
            "text": "More Matches"
        },
        "$:/language/Search/SystemResults/Caption": {
            "title": "$:/language/Search/SystemResults/Caption",
            "text": "System and Shadows"
        },
        "$:/plugins/BurningTreeC/navigator/license": {
            "title": "$:/plugins/BurningTreeC/navigator/license",
            "text": "```\nMIT License\n\nCopyright (c) 2018 Simon Huber @BurningTreeC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n"
        },
        "$:/plugins/BurningTreeC/navigator/macros/actions": {
            "title": "$:/plugins/BurningTreeC/navigator/macros/actions",
            "tags": "$:/tags/Macro",
            "text": "\\define Navigatorinfoaction() <$macrocall $name=\"navigator-qualified-state-actions\" tiddler={{{ [[$:/HistoryList]get[focus-tiddler]] }}} title=\"$:/state/popup/tiddler-info\" storyOrSideBar=\"story\" editOrView=\"view\" level=\"1\" action=\"\"\"<$action-popup $popup=<<state>>/>\"\"\"/>\n\\define Navigatorexport-tiddleraction() <$macrocall $name=\"navigator-qualified-state-actions\" tiddler={{{ [[$:/HistoryList]get[focus-tiddler]] }}} title=\"$:/state/popup/export\" storyOrSideBar=\"story\" editOrView=\"view\" level=\"4\" suffix=\"title\" template1=\"$:/core/ui/Buttons/more-tiddler-actions\" template2=\"$:/core/ui/Buttons/export-tiddler\" action=\"\"\"<$action-popup $popup=<<state>>/>\"\"\"/>\n\\define Navigatordeleteaction() <<story-navigation '<$action-sendmessage $message=\"tm-delete-tiddler\" $param={{{ [[$:/HistoryList]get[focus-tiddler]] }}}/>'>>\n\\define Navigatorcloneaction() <<story-navigation '<$action-sendmessage $message=\"tm-new-tiddler\" $param={{{ [[$:/HistoryList]get[focus-tiddler]] }}}/>'>>\n\\define Navigatorpermalinkaction() <$action-sendmessage $message=\"tm-permalink\" $param={{{ [[$:/HistoryList]get[focus-tiddler]] }}}/>\n\\define Navigatorpermaviewaction() <$action-sendmessage $message=\"tm-permaview\"/>\n\\define Navigatoropen-windowaction() <$action-sendmessage $message=\"tm-open-window\" $param={{{ [[$:/HistoryList]get[focus-tiddler]] }}}/>\n\\define NavigatorJournalTags()\n[[$(currentTiddlerTag)$]] [[$(journalTags)$]]\n\\end\n\\define Navigatornew-journal-hereaction()\n\\whitespace trim\n<$set name=\"journalTitleTemplate\" value={{$:/config/NewJournal/Title}}>\n<$set name=\"journalTags\" value={{$:/config/NewJournal/Tags}}>\n<$set name=\"focusTiddler\" value={{{ [[$:/HistoryList]get[focus-tiddler]] }}}>\n<$set name=\"currentTiddlerTag\" value=<<focusTiddler>>>\n<$wikify name=\"journalTitle\" text=\"\"\"<$macrocall $name=\"now\" format=<<journalTitleTemplate>>/>\"\"\">\n<$macrocall $name=\"story-navigation\" actions=\"\"\"<$action-sendmessage $message=\"tm-new-tiddler\" title=<<journalTitle>> tags=<<NavigatorJournalTags>>/>\"\"\"/>\n</$wikify>\n</$set>\n</$set>\n</$set>\n</$set>\n\\end\n\\define NavigatorFocusTag()\n[[$(focusTiddler)$]]\n\\end\n\\define Navigatornew-hereaction() <$macrocall $name=\"story-navigation\" actions=\"\"\"<$set name=\"focusTiddler\" value={{{ [[$:/HistoryList]get[focus-tiddler]] }}}><$action-sendmessage $message=\"tm-new-tiddler\" tags=<<NavigatorFocusTag>>/></$set>\"\"\"/>\n\\define Navigatorfold-othersaction() <<story-navigation '<$action-sendmessage $message=\"tm-fold-other-tiddlers\" $param={{{ [[$:/HistoryList]get[focus-tiddler]] }}} foldedStatePrefix=\"$:/state/folded/\"/>'>>\n\\define Navigatorfoldaction() <<story-navigation '<$action-sendmessage $message=\"tm-fold-tiddler\" $param={{{ [[$:/HistoryList]get[focus-tiddler]] }}} foldedState={{{ [[$:/HistoryList]get[focus-tiddler]addprefix[$:/state/folded/]] }}}/>'>>\n\\define Navigatoreditaction() <<story-navigation '<$action-sendmessage $message=\"tm-edit-tiddler\" $param={{{ [[$:/HistoryList]get[focus-tiddler]] }}}/>'>>\n\\define Navigatorclose-othersaction() <<story-navigation '<$action-sendmessage $message=\"tm-close-other-tiddlers\" $param={{{ [[$:/HistoryList]get[focus-tiddler]] }}}/>'>>\n\\define Navigatorcloseaction() <<story-navigation '<$action-sendmessage $message=\"tm-close-tiddler\" $param={{{ [[$:/HistoryList]get[focus-tiddler]] }}}/>'>>\n\\define NavigatorTidFileaction() <$macrocall $name=\"NavigatorDownloadSingleTidAction\" suffix=\"TidFile\"/>\n\\define NavigatorJsonFileaction() <$macrocall $name=\"NavigatorDownloadSingleTidAction\" suffix=\"JsonFile\"/>\n\\define NavigatorCsvFileaction() <$macrocall $name=\"NavigatorDownloadSingleTidAction\" suffix=\"CsvFile\"/>\n\\define NavigatorStaticRiveraction() <$macrocall $name=\"NavigatorDownloadSingleTidAction\" suffix=\"StaticRiver\"/>\n\\define NavigatorMakeFilter()\n[[$(focusTiddler)$]]\n\\end\n\\define NavigatorDownloadSingleTidAction(suffix)\n\\import [[$:/core/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]]\n<$set name=\"focusTiddler\" value={{{ [subfilter<NavigatorFocusTiddler>] }}}>\n<$set name=\"exportFilter\" value=<<NavigatorMakeFilter>>>\n<$set name=\"baseFilename\" value=<<focusTiddler>>>\n<$set name=\"exporterTemplate\" value={{{ [[$:/core/templates/exporters/]addsuffix<__suffix__>] }}}>\n<$set name=\"extension\" value={{{ [<exporterTemplate>get[extension]] }}}>\n<$action-sendmessage $message=\"tm-download-file\" $param=<<exporterTemplate>> exportFilter=<<exportFilter>> filename={{{ [<baseFilename>addsuffix<extension>] }}}/>\n</$set>\n</$set>\n</$set>\n</$set>\n</$set>\n\\end\n\n"
        },
        "$:/core/macros/export": {
            "title": "$:/core/macros/export",
            "tags": "$:/tags/Macro",
            "text": "\\define exportButtonFilename(baseFilename)\n$baseFilename$$(extension)$\n\\end\n\n\\define exportButton(exportFilter:\"[!is[system]sort[title]]\",lingoBase,baseFilename:\"tiddlers\")\n<span class=\"tc-popup-keep\"><$button popup=<<qualify \"$:/state/popup/export\">> tooltip={{$lingoBase$Hint}} aria-label={{$lingoBase$Caption}} class=<<tv-config-toolbar-class>> selectedClass=\"tc-selected\">\n<$list filter=\"[<tv-config-toolbar-icons>prefix[yes]]\">\n{{$:/core/images/export-button}}\n</$list>\n<$list filter=\"[<tv-config-toolbar-text>prefix[yes]]\">\n<span class=\"tc-btn-text\"><$text text={{$lingoBase$Caption}}/></span>\n</$list>\n</$button></span><$reveal state=<<qualify \"$:/state/popup/export\">> type=\"popup\" position=\"below\" animate=\"yes\" openActions=<<navigator-export-tiddler-openactions>> closeActions=<<navigator-export-tiddler-closeactions>>>\n<div class=\"tc-drop-down\">\n<$list filter=\"[all[shadows+tiddlers]tag[$:/tags/Exporter]]\">\n<$set name=\"extension\" value={{!!extension}}>\n<$set name=\"tv-config-toolbar-class\" filter=\"[[tc-btn-invisible]] [<currentTiddler>encodeuricomponent[]addprefix[tc-btn-]]\">\n<$button class=<<tv-config-toolbar-class>>>\n<$action-sendmessage $message=\"tm-download-file\" $param=<<currentTiddler>> exportFilter=\"\"\"$exportFilter$\"\"\" filename=<<exportButtonFilename \"\"\"$baseFilename$\"\"\">>/>\n<$action-deletetiddler $tiddler=<<qualify \"$:/state/popup/export\">>/>\n<$transclude field=\"description\"/>\n</$button>\n</$set>\n</$set>\n</$list>\n</div>\n</$reveal>\n\\end\n"
        },
        "$:/plugins/BurningTreeC/navigator/macros/filters": {
            "title": "$:/plugins/BurningTreeC/navigator/macros/filters",
            "tags": "$:/tags/Macro",
            "text": "\\define NavigatorFocusTiddler() [[$:/HistoryList]get[focus-tiddler]]\n\\define NavigatorSearchResultsTitle() [!is[system]search:title<userInput>sort[title]limit[250]]\n\\define NavigatorSearchResultsMore() [!is[system]search:author,title,caption,tags,text<userInput>sort[title]limit[250]] -[subfilter<NavigatorSearchResultsTitle>]\n\\define NavigatorSearchResultsSystemTitle() [all[shadows+tiddlers]search:title<userInput>sort[title]limit[250]] -[[$:/temp/search]] -[[$:/temp/search/input]] -[[$:/temp/SelectedSearchItem]] -[subfilter<NavigatorSearchResultsTitle>]\n\\define NavigatorSearchResultsSystemMore() [all[shadows+tiddlers]search:author,title,caption,tags,text<userInput>sort[title]limit[250]] -[subfilter<NavigatorSearchResultsSystemTitle>] -[subfilter<NavigatorSearchResultsTitle>] -[subfilter<NavigatorSearchResultsMore>]\n\\define NavigatorTiddlerInfoTabsFilter() [all[shadows+tiddlers]tag[$:/tags/TiddlerInfo]!has[draft.of]]\n\\define NavigatorMoreTiddlerFilter() [all[shadows+tiddlers]tag[$:/tags/ViewToolbar]!has[draft.of]addprefix[$:/config/ViewToolbarButtons/Visibility/]contains:text[hide]removeprefix[$:/config/ViewToolbarButtons/Visibility/]]\n\\define NavigatorExportTiddlerFilter() [all[shadows+tiddlers]tag[$:/tags/Exporter]]\n"
        },
        "$:/plugins/BurningTreeC/navigator/macros/input": {
            "title": "$:/plugins/BurningTreeC/navigator/macros/input",
            "tags": "$:/tags/Macro",
            "text": "\\define change-input-tab(stateTitle,tag,beforeafter,defaultState)\n<$set name=\"tabsList\" filter=\"[all[shadows+tiddlers]tag<__tag__>!has[draft.of]]\">\n<$vars currentState={{{ [<__stateTitle__>!is[missing]get[text]] ~[<__defaultState__>] }}} firstTab={{{ [enlist<tabsList>nth[1]] }}} lastTab={{{ [enlist<tabsList>last[]] }}}>\n<$set name=\"nextTab\" value={{{ [all[shadows+tiddlers]tag<__tag__>!has[draft.of]$beforeafter$<currentState>] ~[[$beforeafter$]removeprefix[after]suffix[]addprefix<firstTab>] ~[[$beforeafter$]removeprefix[before]suffix[]addprefix<lastTab>] }}}>\n<$action-setfield $tiddler=<<__stateTitle__>> text=<<nextTab>>/>\n</$set>\n</$vars>\n</$set>\n\\end\n\n\\define accept-input-actions(editTiddler,acceptActions)\n<$vars selectedDropDownItem={{{ [<__editTiddler__>get[text]] }}}>\n$acceptActions$\n<$action-deletetiddler $tiddler=<<__editTiddler__>>/>\n</$vars>\n\\end\n\n\\define clear-input-field(editTiddler,saveTiddler,refreshTiddler,refreshQualifier)\n<$action-setfield $tiddler=<<__refreshTiddler__>> refresh-qualifier=<<__refreshQualifier__>>/>\n<$action-setfield $tiddler=<<__refreshTiddler__>> text=<<__refreshQualifier__>>/>\n<$action-deletetiddler $tiddler=<<__editTiddler__>>/>\n<$action-deletetiddler $tiddler=<<__saveTiddler__>>/>\n<$action-setfield $tiddler=<<__refreshTiddler__>> text=\"\"/>\n\\end\n\n\\define clear-input-actions(editTiddler,saveTiddler,refreshTiddler,clearEmptyActions,refreshQualifier)\n<$list filter=\"[<__editTiddler__>!is[missing]get[text]minlength[1]] [<__saveTiddler__>!is[missing]get[text]minlength[1]] +[limit[1]]\" variable=\"ignore\" emptyMessage=\"\"\"$clearEmptyActions$\"\"\">\n<$macrocall $name=\"clear-input-field\" editTiddler=<<__editTiddler__>> saveTiddler=<<__saveTiddler__>> refreshTiddler=<<__refreshTiddler__>> refreshQualifier=<<__refreshQualifier__>>/>\n</$list>\n\\end\n\n\\define get-dropdown-list()\n$(dropDownFilter1)$ $(dropDownFilter2)$\n\\end\n\n\\define select-dropdown-actions(beforeafter,reverse,editTiddler,saveTiddler,refreshTiddler,filter1,filter2,filterMinLength)\n<$list filter=\"[<__saveTiddler__>get[text]minlength[$filterMinLength$]] [[$filterMinLength$]removeprefix[0]suffix[]]\">\n<$vars userInput={{{ [<__saveTiddler__>get[text]] }}} selectedDropDownItem={{{ [<__editTiddler__>get[text]] }}}>\n<$set name=\"dropDownFilter1\" filter=<<__filter1__>>>\n<$set name=\"dropDownFilter2\" filter=<<__filter2__>>>\n<$set name=\"dropDownList\" filter=<<get-dropdown-list>>>\n<$list filter=\"[enlist<dropDownList>] +[$beforeafter$<selectedDropDownItem>] ~[enlist<dropDownList>$reverse$nth[1]]\" variable=\"nextTag\">\n<$action-setfield $tiddler=<<__editTiddler__>> text=<<nextTag>>/>\n<$action-deletetiddler $tiddler=<<__refreshTiddler__>>/>\n<$action-setfield $tiddler=<<__refreshTiddler__>> refresh-qualifier={{{ [[$(tv-refresh-input-qualifier)$]] }}}/>\n<$action-setfield $tiddler=<<__refreshTiddler__>> text=<<nextTag>>/>\n</$list>\n</$set>\n</$set>\n</$set>\n</$vars>\n</$list>\n\\end\n\n\\define selectable-dropdown-input(editTiddler,inputTag:\"input\",inputDefault,inputPlaceHolder,inputPopup,inputClass,inputFocus:\"no\",saveTiddler,refreshTiddler,refreshCondition,refreshAction,filterTiddler,refreshQualifier,filterMinLength:\"0\",tabIndex:\"\",cancelPopups:\"\")\n<$vars tv-refresh-input-qualifier=<<__refreshQualifier__>> userKeyOne={{{ [<__filterTiddler__>get[keyboard-action-1-key]] }}} userActionOne={{{ [<__filterTiddler__>get[keyboard-action-1]] }}} userKeyTwo={{{ [<__filterTiddler__>get[keyboard-action-2-key]] }}} userActionTwo={{{ [<__filterTiddler__>get[keyboard-action-2]] }}}>\n<$keyboard key=\"((input-down))\" actions=\"\"\"<$macrocall $name=\"select-dropdown-actions\" beforeafter=\"after\" reverse=\"\" editTiddler=<<__editTiddler__>> saveTiddler=<<__saveTiddler__>> refreshTiddler=<<__refreshTiddler__>> filter1={{{ [<__filterTiddler__>get[dropdown-filter-1]] }}} filter2={{{ [<__filterTiddler__>get[dropdown-filter-2]] }}} filterMinLength=\"$filterMinLength$\"/>\"\"\">\n<$keyboard key=\"((input-up))\" actions=\"\"\"<$macrocall $name=\"select-dropdown-actions\" beforeafter=\"before\" reverse=\"reverse[]\" editTiddler=<<__editTiddler__>> saveTiddler=<<__saveTiddler__>> refreshTiddler=<<__refreshTiddler__>> filter1={{{ [<__filterTiddler__>get[dropdown-filter-1]] }}} filter2={{{ [<__filterTiddler__>get[dropdown-filter-2]] }}} filterMinLength=\"$filterMinLength$\"/>\"\"\">\n<$keyboard key=\"((input-accept))\" actions=\"\"\"<$macrocall $name=\"accept-input-actions\" editTiddler=<<__editTiddler__>> acceptActions={{{ [<__filterTiddler__>get[accept-actions]] }}}/>\"\"\">\n<$keyboard key=\"((input-clear))\" actions=\"\"\"<$macrocall $name=\"clear-input-actions\" editTiddler=<<__editTiddler__>> saveTiddler=<<__saveTiddler__>> refreshTiddler=<<__refreshTiddler__>> clearEmptyActions={{{ [<__filterTiddler__>get[clear-input-empty-actions]] }}} refreshQualifier=<<__refreshQualifier__>>/>\"\"\">\n<$keyboard key=<<userKeyOne>> actions=<<userActionOne>>>\n<$keyboard key=<<userKeyTwo>> actions=<<userActionTwo>>>\n<$edit-text tiddler=<<__editTiddler__>> tag=<<__inputTag__>> default=<<__inputDefault__>> placeholder=<<__inputPlaceHolder__>> focusPopup=<<__inputPopup__>> class=<<__inputClass__>> focus=<<__inputFocus__>> saveTiddler=<<__saveTiddler__>> refreshTiddler=<<__refreshTiddler__>> refreshCondition={{{ $refreshCondition$ }}} refreshAction=<<__refreshAction__>> tabindex=<<__tabIndex__>> cancelPopups=<<__cancelPopups__>>/>\n</$keyboard></$keyboard></$keyboard></$keyboard></$keyboard></$keyboard>\n</$vars>\n\\end\n"
        },
        "$:/plugins/BurningTreeC/navigator/macros/navigation": {
            "title": "$:/plugins/BurningTreeC/navigator/macros/navigation",
            "tags": "$:/tags/Macro",
            "text": "\\define story-navigation(actions)\n<$navigator story=\"$:/StoryList\" history=\"$:/HistoryList\" openLinkFromInsideRiver={{$:/config/Navigation/openLinkFromInsideRiver}} openLinkFromOutsideRiver={{$:/config/Navigation/openLinkFromOutsideRiver}} relinkOnRename={{$:/config/RelinkOnRename}}>\n$actions$\n</$navigator>\n\\end\n\\define navigator-set-sidebar(yesno)\n<$action-setfield $tiddler=\"$:/state/sidebar\" text=\"$yesno$\"/>\n<$action-deletetiddler $tiddler=\"$:/temp/navigator/sidebarstate\"/>\n\\end\n\\define navigator-set-last-popup()\n<$list filter=\"[list<NavigatorVariablesPopupStateTiddler>limit[1]]\" emptyMessage=\"\"\"\n<$macrocall $name=\"navigator-unset-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[close-popup]] }}} tiddler=\"$:/config/shortcuts/close-popup\" field=\"text\"/>\n<$action-deletetiddler $tiddler=<<NavigatorVariablesPopupStateTiddler>>/>\n\"\"\">\n<$set name=\"nextOpenPopup\" value={{{ [list<NavigatorVariablesPopupStateTiddler>last[]] }}}>\n<$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> text=<<nextOpenPopup>>/>\n<$action-listops $tiddler=<<NavigatorVariablesPopupStateTiddler>> $subfilter=\"-[<nextOpenPopup>]\"/>\n<$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> item-filter-variable={{{ [[$:/navigator/backup/popup-state/]addsuffix<nextOpenPopup>get[item-filter-variable]] }}}/>\n<$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> item-state-variable={{{ [[$:/navigator/backup/popup-state/]addsuffix<nextOpenPopup>get[item-state-variable]] }}}/>\n</$set>\n<$list filter=\"[<NavigatorVariablesPopupStateTiddler>get[text]is[missing]]\">\n<$macrocall $name=\"navigator-unset-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[close-popup]] }}} tiddler=\"$:/config/shortcuts/close-popup\" field=\"text\"/>\n</$list>\n</$list>\n\\end\n\\define navigator-tiddlerinfo-openactions()\n<$macrocall $name=\"navigator-qualified-state-actions\" tiddler={{{ [[$:/HistoryList]get[focus-tiddler]] }}} title=\"$:/state/tab\" storyOrSideBar=\"story\" editOrView=\"view\" level=\"3\" suffix=\"title\" template1=\"$:/core/ui/TiddlerInfo\" action=\"\"\"<$action-deletetiddler $tiddler=<<NavigatorVariablesPopupStateTiddler>>/><$action-setfield $tiddler=\"$:/temp/navigator/popup-tabs/state\" text=<<state>> tabs-filter=\"[subfilter<NavigatorTiddlerInfoTabsFilter>]\" tabs-default={{$:/config/TiddlerInfo/Default}}/>\"\"\"/>\n<$macrocall $name=\"navigator-set-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-tab-next]] }}} tiddler=\"$:/config/shortcuts/popup-tab-next\" field=\"text\"/>\n<$macrocall $name=\"navigator-set-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-tab-previous]] }}} tiddler=\"$:/config/shortcuts/popup-tab-previous\" field=\"text\"/>\n<$macrocall $name=\"navigator-set-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[close-popup]] }}} tiddler=\"$:/config/shortcuts/close-popup\" field=\"text\"/>\n<$macrocall $name=\"navigator-qualified-state-actions\" tiddler={{{ [[$:/HistoryList]get[focus-tiddler]] }}} title=\"$:/state/popup/tiddler-info\" storyOrSideBar=\"story\" editOrView=\"view\" level=\"1\" action=\"\"\"<$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> text=<<state>>/>\"\"\"/>\n\\end\n\\define navigator-tiddlerinfo-closeactions()\n<$macrocall $name=\"navigator-unset-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-tab-next]] }}} tiddler=\"$:/config/shortcuts/popup-tab-next\" field=\"text\"/>\n<$macrocall $name=\"navigator-unset-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-tab-previous]] }}} tiddler=\"$:/config/shortcuts/popup-tab-previous\" field=\"text\"/>\n<<navigator-set-last-popup>>\n\\end\n\\define navigator-more-tiddler-openactions()\n<$macrocall $name=\"navigator-set-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-down]] }}} tiddler=\"$:/config/shortcuts/popup-down\" field=\"text\"/>\n<$macrocall $name=\"navigator-set-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-up]] }}} tiddler=\"$:/config/shortcuts/popup-up\" field=\"text\"/>\n<$macrocall $name=\"navigator-set-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-accept]] }}} tiddler=\"$:/config/shortcuts/popup-accept\" field=\"text\"/>\n<$macrocall $name=\"navigator-set-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[close-popup]] }}} tiddler=\"$:/config/shortcuts/close-popup\" field=\"text\"/>\n<$macrocall $name=\"navigator-qualified-state-actions\" tiddler={{{ [[$:/HistoryList]get[focus-tiddler]] }}} title=\"$:/state/popup/more\" storyOrSideBar=\"story\" editOrView=\"view\" level=\"3\" suffix=\"title\" template1=\"$:/core/ui/Buttons/more-tiddler-actions\" action=\"\"\"<$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> text=<<state>>/>\"\"\"/>\n<$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> item-state-variable=\"NavigatorVariablesMorePopupSelectedItem\"/>\n<$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> item-filter-variable=\"NavigatorMoreTiddlerFilter\"/>\n\\end\n\\define navigator-more-tiddler-closeactions()\n<$macrocall $name=\"navigator-unset-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-down]] }}} tiddler=\"$:/config/shortcuts/popup-down\" field=\"text\"/>\n<$macrocall $name=\"navigator-unset-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-up]] }}} tiddler=\"$:/config/shortcuts/popup-up\" field=\"text\"/>\n<$macrocall $name=\"navigator-unset-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-accept]] }}} tiddler=\"$:/config/shortcuts/popup-accept\" field=\"text\"/>\n<$macrocall $name=\"navigator-unset-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[close-popup]] }}} tiddler=\"$:/config/shortcuts/close-popup\" field=\"text\"/>\n<$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> item-state-variable=\"\"/>\n<$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> item-filter-variable=\"\"/>\n<<navigator-set-last-popup>>\n\\end\n\\define navigator-export-tiddler-openactions()\n<$action-listops $tiddler=<<NavigatorVariablesPopupStateTiddler>> $subfilter=\"[<NavigatorVariablesPopupStateTiddler>get[text]]\"/>\n<$action-setfield $tiddler={{{ [<NavigatorVariablesPopupStateTiddler>get[text]addprefix[$:/navigator/backup/popup-state/]] }}} item-state-variable={{{ [<NavigatorVariablesPopupStateTiddler>get[item-state-variable]] }}} item-filter-variable={{{ [<NavigatorVariablesPopupStateTiddler>get[item-filter-variable]] }}}/>\n<$macrocall $name=\"navigator-set-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-down]] }}} tiddler=\"$:/config/shortcuts/popup-down\" field=\"text\"/>\n<$macrocall $name=\"navigator-set-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-up]] }}} tiddler=\"$:/config/shortcuts/popup-up\" field=\"text\"/>\n<$macrocall $name=\"navigator-set-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-accept]] }}} tiddler=\"$:/config/shortcuts/popup-accept\" field=\"text\"/>\n<$macrocall $name=\"navigator-set-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[close-popup]] }}} tiddler=\"$:/config/shortcuts/close-popup\" field=\"text\"/>\n<$macrocall $name=\"navigator-qualified-state-actions\" tiddler={{{ [[$:/HistoryList]get[focus-tiddler]] }}} title=\"$:/state/popup/export\" storyOrSideBar=\"story\" editOrView=\"view\" level=\"4\" suffix=\"title\" template1=\"$:/core/ui/Buttons/more-tiddler-actions\" template2=\"$:/core/ui/Buttons/export-tiddler\" action=\"\"\"<$action-sendmessage $message=\"tm-rename-tiddler\" from=<<NavigatorVariablesPopupStateTiddler>> to={{{ [<NavigatorVariablesPopupStateTiddler>addprefix[$:/navigator/backup/popup-state/]] }}}/><$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> text=<<state>>/>\"\"\"/>\n<$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> item-state-variable=\"NavigatorVariablesExportTiddlerPopupSelectedItem\"/>\n<$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> item-filter-variable=\"NavigatorExportTiddlerFilter\"/>\n\\end\n\\define navigator-export-tiddler-closeactions()\n<$macrocall $name=\"navigator-unset-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-down]] }}} tiddler=\"$:/config/shortcuts/popup-down\" field=\"text\"/>\n<$macrocall $name=\"navigator-unset-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-up]] }}} tiddler=\"$:/config/shortcuts/popup-up\" field=\"text\"/>\n<$macrocall $name=\"navigator-unset-shortcut\" key={{{ [<NavigatorVariablesTempShortcutsConfig>get[popup-accept]] }}} tiddler=\"$:/config/shortcuts/popup-accept\" field=\"text\"/>\n<$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> item-state-variable=\"\"/>\n<$action-setfield $tiddler=<<NavigatorVariablesPopupStateTiddler>> item-filter-variable=\"\"/>\n<<navigator-set-last-popup>>\n\\end\n\n"
        },
        "$:/plugins/BurningTreeC/navigator/macros/shortcuts": {
            "title": "$:/plugins/BurningTreeC/navigator/macros/shortcuts",
            "tags": "$:/tags/Macro",
            "text": "\\define navigator-save-shortcut-config(tiddler,field,keyArray,actions)\n<$list filter=\"[all[tiddlers]prefix[$:/navigator/backups/shortcutconfig/]suffix<__tiddler__>limit[1]]\" emptyMessage=\"\"\"\n<$action-setfield $tiddler={{{ [[$:/navigator/backups/shortcutconfig/]addsuffix<__tiddler__>] }}} $field=<<__field__>> $value=<<__keyArray__>>/>\n<$action-listops $tiddler=<<__tiddler__>> $field=<<__field__>> $subfilter=\"-[<__key__>]\"/>\n$actions$\n\"\"\">\n<$list filter=\"[all[tiddlers]prefix[$:/navigator/backups/shortcutconfig/]suffix<__tiddler__>!sort[title]]\" variable=\"backupTiddler\">\n<$action-sendmessage $message=\"tm-rename-tiddler\" from=<<backupTiddler>> to={{{ [<backupTiddler>addprefix[$:/navigator/backups/shortcutconfig/]] }}}/>\n</$list>\n<$action-setfield $tiddler={{{ [[$:/navigator/backups/shortcutconfig/]addsuffix<__tiddler__>] }}} $field=<<__field__>> $value=<<__keyArray__>>/>\n<$action-listops $tiddler=<<__tiddler__>> $field=<<__field__>> $subfilter=\"-[<__key__>]\"/>\n$actions$\n</$list>\n\\end\n\\define navigator-backup-shortcuts(key,actions)\n<$list filter=\"[all[shadows+tiddlers]tag[$:/tags/KeyboardShortcut]]\" variable=\"shortcutTiddler\">\n<$list filter=\"[<shortcutTiddler>get[key]removeprefix[((]removesuffix[))]]\" variable=\"keyDescriptor\" emptyMessage=\"\"\"\n<$list filter=\"[<shorcutTiddler>contains:key<__key__>get[key]]\" variable=\"keyArray\" emptyMessage='\n$actions$\n'>\n<$macrocall $name=\"navigator-save-shortcut-config\" tiddler=<<shortcutTiddler>> field=\"key\" keyArray=<<keyArray>> actions=<<__actions__>>/>\n</$list>\n\"\"\">\n<$list filter=\"shortcuts shortcuts-linux shortcuts-not-linux shortcuts-not-mac shortcuts-not-windows shortcuts-mac shortcuts-windows\" variable=\"platform\">\n<$set name=\"configTiddler\" value={{{ [[$:/config/]addsuffix<platform>addsuffix[/]addsuffix<keyDescriptor>] }}}>\n<$list filter=\"[<configTiddler>contains:text<__key__>get[text]]\" variable=\"keyArray\" emptyMessage=\"\"\"\n$actions$\n\"\"\">\n<$macrocall $name=\"navigator-save-shortcut-config\" tiddler=<<configTiddler>> field=\"text\" keyArray=<<keyArray>>/>\n</$list>\n</$set>\n</$list>\n</$list>\n</$list>\n\\end\n\\define navigator-restore-shortcut-config(tiddler,field,keyArray,actions,restoreprefix:\"$:/navigator/backups/shortcutconfig/\")\n<$list filter=\"[<__tiddler__>!prefix<__restoreprefix__>]\" emptyMessage=\"\"\"\n<$action-sendmessage $message=\"tm-rename-tiddler\" from={{{ [<__tiddler__>addprefix<__restoreprefix__>] }}} to=<<__tiddler__>>/>\n\"\"\">\n<$action-setfield $tiddler=<<__tiddler__>> $field=<<__field__>> $value=<<__keyArray__>>/>\n<$list filter=\"[<NavigatorVariablesPopupStateTiddler>get[text]is[missing]]\" variable=\"ignore\">\n$actions$\n</$list>\n<$action-deletetiddler $tiddler={{{ [<__restoreprefix__>addsuffix<__tiddler__>] }}}/>\n</$list>\n\\end\n\\define navigator-restore-shortcuts(tiddler,key,actions,restoreprefix:\"$:/navigator/backups/shortcutconfig/\")\n<$list filter=\"[all[tiddlers]prefix<__restoreprefix__>suffix<__tiddler__>sort[title]]\" variable=\"backupTiddler\" emptyMessage=\"\"\"\n<$list filter=\"[<NavigatorVariablesPopupStateTiddler>get[text]is[missing]]\" variable=\"ignore\">\n$actions$\n</$list>\n\"\"\">\n<$list filter=\"[<backupTiddler>has[key]]\" emptyMessage=\"\"\"\n<$macrocall $name=\"navigator-restore-shortcut-config\" tiddler={{{ [<backupTiddler>removeprefix<__restoreprefix__>] }}} field=\"text\" keyArray={{{ [<backupTiddler>get[text]] }}} actions=<<__actions__>>/>\n\"\"\">\n<$macrocall $name=\"navigator-restore-shortcut-config\" tiddler={{{ [<backupTiddler>removeprefix<__restoreprefix__>] }}} field=\"key\" keyArray={{{ [<backupTiddler>get[key]] }}} actions=<<__actions__>>/>\n</$list>\n</$list>\n\\end\n\\define navigator-set-shortcut(tiddler,field,key)\n<$macrocall $name=\"navigator-backup-shortcuts\" key=<<__key__>> actions=\"\"\"\n<$action-listops $tiddler=\"$tiddler$\" $field=\"$field$\" $subfilter=\"[[$key$]]\"/>\n\"\"\"/>\n\\end\n\\define navigator-unset-shortcut(tiddler,field,key)\n<$action-listops $tiddler=\"$tiddler$\" $field=\"$field$\" $subfilter=\"-[[$key$]]\"/>\n<$macrocall $name=\"navigator-restore-shortcuts\" tiddler=<<__tiddler__>> key=<<__key__>> actions=\"\"\"\n\"\"\"/>\n\\end\n\n"
        },
        "$:/plugins/BurningTreeC/navigator/macros/states": {
            "title": "$:/plugins/BurningTreeC/navigator/macros/states",
            "tags": "$:/tags/Macro",
            "text": "\\define navigator-qualified-state-actions(tiddler,title,storyOrSideBar,editOrView:\"view\",action,level,suffix:\"\",template1:\"\",template2:\"\")\n<$rootpipe>\n<$set name=\"transclusion\" value=\"{|$:/core/ui/PageTemplate|||}\">\n<$set name=\"transclusion\" value=\"{|$:/core/ui/PageTemplate/$storyOrSideBar$|||}\">\n<$macrocall $name=\"navigator-qualified-state-$storyOrSideBar$-$editOrView$-$level$\" tiddler=<<__tiddler__>> title=<<__title__>> action=<<__action__>> template1=<<__template1__>> template2=<<__template2__>> suffix=<<__suffix__>>/>\n</$set>\n</$set>\n</$rootpipe>\n\\end\n\\define navigator-qualified-state-sidebar-view-1(title,action)\n<$qualify name=\"state\" title=<<__title__>>>\n$action$\n</$qualify>\n\\end\n\\define navigator-qualified-state-sidebar-view-2(tiddler,suffix,title,action)\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|$:/core/ui/SideBarSegments/]addsuffix<__suffix__>addsuffix[|||}]] }}}>\n<$qualify name=\"state\" title=<<__title__>>>\n$action$\n</$qualify>\n</$set>\n\\end\n\\define navigator-qualified-state-sidebar-view-3(tiddler,suffix,title,action,template1)\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|$:/core/ui/SideBarSegments/]addsuffix<__suffix__>addsuffix[|||}]] }}}>\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix<__template1__>addsuffix[|||}]] }}}>\n<$qualify name=\"state\" title=<<__title__>>>\n$action$\n</$qualify>\n</$set>\n</$set>\n\\end\n\\define navigator-qualified-state-story-view-1(tiddler,title,action)\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix[$:/core/ui/ViewTemplate|||}]] }}}>\n<$qualify name=\"state\" title=<<__title__>>>\n$action$\n</$qualify>\n</$set>\n\\end\n\\define navigator-qualified-state-story-view-2(tiddler,title,action,suffix)\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix[$:/core/ui/ViewTemplate|||}]] }}}>\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|$:/core/ui/ViewTemplate/]addsuffix<__suffix__>addsuffix[|||}]] }}}>\n<$qualify name=\"state\" title=<<__title__>>>\n$action$\n</$qualify>\n</$set>\n</$set>\n\\end\n\\define navigator-qualified-state-story-view-3(tiddler,title,action,suffix,template1)\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix[$:/core/ui/ViewTemplate|||}]] }}}>\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|$:/core/ui/ViewTemplate/]addsuffix<__suffix__>addsuffix[|||}]] }}}>\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix<__template1__>addsuffix[|||}]] }}}>\n<$qualify name=\"state\" title=<<__title__>>>\n$action$\n</$qualify>\n</$set>\n</$set>\n</$set>\n\\end\n\\define navigator-qualified-state-story-view-4(tiddler,title,action,suffix,template1,template2)\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix[$:/core/ui/ViewTemplate|||}]] }}}>\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|$:/core/ui/ViewTemplate/]addsuffix<__suffix__>addsuffix[|||}]] }}}>\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix<__template1__>addsuffix[|||}]] }}}>\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix<__template2__>addsuffix[|||}]] }}}>\n<$qualify name=\"state\" title=<<__title__>>>\n$action$\n</$qualify>\n</$set>\n</$set>\n</$set>\n</$set>\n\\end\n\\define navigator-qualified-state-story-edit-1(tiddler,title,action)\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix[$:/core/ui/EditTemplate|||}]] }}}>\n<$qualify name=\"state\" title=<<__title__>>>\n$action$\n</$qualify>\n</$set>\n\\end\n\\define navigator-qualified-state-story-edit-2(tiddler,title,action,suffix)\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix[$:/core/ui/EditTemplate|||}]] }}}>\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|$:/core/ui/EditTemplate/]addsuffix<__suffix__>addsuffix[|||}]] }}}>\n<$qualify name=\"state\" title=<<__title__>>>\n$action$\n</$qualify>\n</$set>\n</$set>\n\\end\n\\define navigator-qualified-state-story-edit-3(tiddler,title,action,suffix,template1)\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix[$:/core/ui/EditTemplate|||}]] }}}>\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|$:/core/ui/EditTemplate/]addsuffix<__suffix__>addsuffix[|||}]] }}}>\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix<__template1__>addsuffix[|||}]] }}}>\n<$qualify name=\"state\" title=<<__title__>>>\n$action$\n</$qualify>\n</$set>\n</$set>\n</$set>\n\\end\n\\define navigator-qualified-state-story-edit-4(tiddler,title,action,suffix,template1,template2)\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix[$:/core/ui/EditTemplate|||}]] }}}>\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|$:/core/ui/EditTemplate/]addsuffix<__suffix__>addsuffix[|||}]] }}}>\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix<__template1__>addsuffix[|||}]] }}}>\n<$set name=\"transclusion\" value={{{ [<__tiddler__>addprefix[{]addsuffix[|]addsuffix<__template2__>addsuffix[|||}]] }}}>\n<$qualify name=\"state\" title=<<__title__>>>\n$action$\n</$qualify>\n</$set>\n</$set>\n</$set>\n</$set>\n\\end\n"
        },
        "$:/core/macros/tabs": {
            "title": "$:/core/macros/tabs",
            "tags": "$:/tags/Macro",
            "text": "\\define tabs(tabsList,default,state:\"$:/state/tab\",class,template,buttonTemplate,retain,explicitState)\n<$set name=\"qualifiedState\" value=<<qualify \"$state$\">>>\n<$set name=\"tabsState\" filter=\"[<__explicitState__>minlength[1]] ~[<qualifiedState>]\">\n<div class=\"tc-tab-set $class$\">\n<div class=\"tc-tab-buttons $class$\">\n<$list filter=\"$tabsList$\" variable=\"currentTab\"><$set name=\"save-currentTiddler\" value=<<currentTiddler>>><$tiddler tiddler=<<currentTab>>><$button set=<<tabsState>> setTo=<<currentTab>> default=\"$default$\" selectedClass=\"tc-tab-selected\" tooltip={{!!tooltip}}>\n<$tiddler tiddler=<<save-currentTiddler>>>\n<$set name=\"tv-wikilinks\" value=\"no\">\n<$transclude tiddler=\"$buttonTemplate$\" mode=\"inline\">\n<$transclude tiddler=<<currentTab>> field=\"caption\">\n<$macrocall $name=\"currentTab\" $type=\"text/plain\" $output=\"text/plain\"/>\n</$transclude>\n</$transclude>\n</$set></$tiddler></$button></$tiddler></$set></$list>\n</div>\n<div class=\"tc-tab-divider $class$\"/>\n<div class=\"tc-tab-content $class$\">\n<$list filter=\"$tabsList$\" variable=\"currentTab\">\n\n<$reveal type=\"match\" state=<<tabsState>> text=<<currentTab>> default=\"$default$\" retain=\"\"\"$retain$\"\"\">\n\n<$transclude tiddler=\"$template$\" mode=\"block\">\n\n<$transclude tiddler=<<currentTab>> mode=\"block\"/>\n\n</$transclude>\n\n</$reveal>\n\n</$list>\n\n</div>\n</div>\n</$set>\n</$set>\n\\end\n"
        },
        "$:/core/macros/tag-picker": {
            "title": "$:/core/macros/tag-picker",
            "tags": "$:/tags/Macro",
            "dropdown-filter-1": "[tags[]!is[system]search:title<userInput>sort[]]",
            "dropdown-filter-2": "[tags[]is[system]search:title<userInput>sort[]]",
            "accept-actions": "<$list filter=\"[[$(currentTiddler)$]!contains:tags<selectedDropDownItem>]\" variable=\"ignore\"><$action-sendmessage $message=\"tm-add-tag\" $param=<<selectedDropDownItem>>/></$list><$list filter=\"[[$(currentTiddler)$]contains:tags<selectedDropDownItem>]\" variable=\"ignore\"><$action-sendmessage $message=\"tm-remove-tag\" $param=<<selectedDropDownItem>>/></$list>/>",
            "clear-input-empty-actions": "<$action-deletetiddler $tiddler=<<__editTiddler__>>/><$action-deletetiddler $tiddler=<<__saveTiddler__>>/><$action-deletetiddler $tiddler=<<__refreshTiddler__>>/><$action-sendmessage $message=\"tm-cancel-tiddler\"/>",
            "text": "\\define tag-button(selectedClass)\n<$button class=\"tc-btn-invisible $selectedClass$\" tag=\"a\">\n$(actions)$\n<$action-deletetiddler $tiddler={{{ [[$:/temp/NewTagName/]addsuffix[$(currentTiddler)$]] }}}/>\n<$action-deletetiddler $tiddler={{{ [[$:/temp/NewTagName/Input/]addsuffix[$(currentTiddler)$]] }}}/>\n<$macrocall $name=\"tag-pill\" tag=<<tag>>/>\n</$button>\n\\end\n\n\\define tag-picker(actions)\n<$vars newTagNameTiddler={{{ [[$:/temp/NewTagName/]addsuffix<currentTiddler>] }}} saveInputTiddler={{{ [[$:/temp/NewTagName/Input/]addsuffix<currentTiddler>] }}} actions=<<__actions__>>>\n<div class=\"tc-edit-add-tag\">\n<span class=\"tc-add-tag-name\">\n<$macrocall $name=\"selectable-dropdown-input\" editTiddler=<<newTagNameTiddler>> inputTag=\"input\" inputDefault=\"\" inputPlaceHolder={{$:/language/EditTemplate/Tags/Add/Placeholder}} inputPopup=<<qualify \"$:/state/popup/tags-auto-complete\">> inputClass=\"tc-edit-texteditor tc-popup-handle\" saveTiddler=<<saveInputTiddler>> refreshTiddler=\"$:/temp/SelectedTag\" filterTiddler=\"$:/core/macros/tag-picker\" refreshQualifier=<<qualify \"$:/qualifier/refresh-input\">> refreshCondition=\"\"\"[<__refreshTiddler__>get[refresh-qualifier]removeprefix<__refreshQualifier__>suffix[]addprefix[true]] ~[[false]]\"\"\" refreshAction=\"focus-update\" tabIndex={{$:/config/EditTabindex}} cancelPopups={{$:/config/EditCancelPopups}}/>\n</span> <$button popup=<<qualify \"$:/state/popup/tags-auto-complete\">> class=\"tc-btn-invisible\" tooltip={{$:/language/EditTemplate/Tags/Dropdown/Hint}} aria-label={{$:/language/EditTemplate/Tags/Dropdown/Caption}}>{{$:/core/images/down-arrow}}</$button> <span class=\"tc-add-tag-button\">\n<$set name=\"tag\" value={{{ [<newTagNameTiddler>get[text]] }}}>\n<$button setTitle=<<newTagNameTiddler>> setTo=\"\" class=\"\">\n$actions$\n<$action-deletetiddler $tiddler=<<newTagNameTiddler>>/>\n<$action-deletetiddler $tiddler=<<saveInputTiddler>>/>\n{{$:/language/EditTemplate/Tags/Add/Button}}\n</$button>\n</$set>\n</span>\n</div>\n<div class=\"tc-block-dropdown-wrapper\">\n<$vars userInput={{{ [<saveInputTiddler>get[text]] }}}>\n<$reveal state=<<qualify \"$:/state/popup/tags-auto-complete\">> type=\"nomatch\" text=\"\" default=\"\">\n<div class=\"tc-block-dropdown\">\n<$list filter=\"[<userInput>minlength{$:/config/Tags/MinLength}limit[1]]\" emptyMessage=\"\"\"<div class=\"tc-search-results\">{{$:/language/Search/Search/TooShort}}</div>\"\"\" variable=\"listItem\">\n<$list filter=\"[tags[]!is[system]search:title<userInput>sort[]]\" variable=\"tag\">\n<$list filter=\"[<newTagNameTiddler>get[text]removeprefix<tag>suffix[]]\" emptyMessage=\"\"\"<<tag-button>>\"\"\">\n<<tag-button \"tc-tag-button-selected\">>\n</$list>\n</$list></$list>\n<hr>\n<$list filter=\"[<userInput>minlength{$:/config/Tags/MinLength}limit[1]]\" emptyMessage=\"\"\"<div class=\"tc-search-results\">{{$:/language/Search/Search/TooShort}}</div>\"\"\" variable=\"listItem\">\n<$list filter=\"[tags[]is[system]search:title<userInput>sort[]]\" variable=\"tag\">\n<$list filter=\"[<newTagNameTiddler>get[text]removeprefix<tag>suffix[]]\" emptyMessage=\"\"\"<<tag-button>>\"\"\">\n<<tag-button \"tc-tag-button-selected\">>\n</$list>\n</$list></$list>\n</div>\n</$reveal>\n</$vars>\n</div>\n</$vars>\n\\end\n"
        },
        "$:/plugins/BurningTreeC/navigator/macros/utils": {
            "title": "$:/plugins/BurningTreeC/navigator/macros/utils",
            "tags": "$:/tags/Macro",
            "text": "\\define navigatorSplitInner(string,removeprefix,char)\n\\whitespace trim\n<$list filter=\"[<__string__>removeprefix<__removeprefix__>]\" variable=\"newstring\"><$macrocall $name=\"navigatorSplit\" string=<<newstring>> char=<<__char__>>/></$list>\n\\end\n\\define navigatorSplit(string,char)\n\\whitespace trim\n<$set name=\"charRegex\" value={{{ [<__char__>escaperegexp[]] }}}><$list filter=\"[<__string__>regexp<charRegex>splitbefore<__char__>]\" emptyMessage=\"\"\"<<__string__>>\"\"\"><$set name=\"prefix\" value={{{ [<__string__>splitbefore<__char__>] }}}><$macrocall $name=\"navigatorSplitInner\" string=<<__string__>> removeprefix=<<prefix>> char=<<__char__>>/></$set></$list></$set>\n\\end\n"
        },
        "$:/plugins/BurningTreeC/navigator/macros/variables": {
            "title": "$:/plugins/BurningTreeC/navigator/macros/variables",
            "tags": "$:/tags/Macro",
            "text": "\\define NavigatorVariablesPopupStateTiddler() $:/temp/navigator/popup-state\n\\define NavigatorVariablesPopupTabsStateTiddler() $:/temp/navigator/popup-tabs/state\n\\define NavigatorVariablesTempShortcutsConfig() $:/plugins/BurningTreeC/navigator/config/shortuts/temporary\n\\define NavigatorVariablesMorePopupSelectedItem() $:/temp/navigator/more-popup/selected-item\n\\define NavigatorVariablesExportTiddlerPopupSelectedItem() $:/temp/navigator/export-tiddler/selected-item\n"
        },
        "$:/plugins/BurningTreeC/navigator/readme": {
            "title": "$:/plugins/BurningTreeC/navigator/readme",
            "text": "!! This plugin adds enhanced ways for navigation to [ext[TiddlyWiki 5.1.18|https://tiddlywiki.com]] and above\n\n!! It depends on the following plugins to be installed, too:\n\n* [ext[escapecss plugin|https://burningtreec.github.io/TW5-escapecss]] [ext[source|https://github.com/BurningTreeC/TW5-escapecss]]\n\n<hr>\n\n!! Features\n\n# The ''focused Tiddler'' is stored in the ''focus-tiddler'' field of the ''History List''\n# The ''focused Tiddler'' is emphasized\n# Actions on the ''focused Tiddler'' can be triggered through Keyboard Shortcuts\n# Pre-made Keyboard Shortcuts for Navigation through the Story-River, actions on the ''focused Tiddler'' and the Sidebar\n# Re-designed Popup Mechanism for more enhanced interaction with popups\n\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/close-tiddler": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/close-tiddler",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((close-focused-tiddler))",
            "text": "\\import $:/plugins/BurningTreeC/navigator/macros/navigation\n\n<$set name=\"closeTiddler\" value={{$:/HistoryList!!focus-tiddler}}>\n<$list filter=\"[[$:/StoryList]contains<closeTiddler>]\" variable=\"ignore\">\n<$list filter=\"[<closeTiddler>!has[draft.of]addprefix[tm-close-tiddler]removesuffix<closeTiddler>] ~[<closeTiddler>has[draft.of]addprefix[tm-cancel-tiddler]removesuffix<closeTiddler>]\" variable=\"message\">\n<$macrocall $name=\"story-navigation\" actions=\"\"\"\n<$action-sendmessage $message=<<message>> $param=<<closeTiddler>>/>\n\"\"\"/>\n</$list>\n</$list>\n</$set>\n\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/edit-tiddler": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/edit-tiddler",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((edit-focused-tiddler))",
            "text": "\\import $:/plugins/BurningTreeC/navigator/macros/navigation\n\n<$set name=\"editTiddler\" value={{$:/HistoryList!!focus-tiddler}}>\n<$list filter=\"[<editTiddler>!has[draft.of]]\" variable=\"ignore\">\n<$list filter=\"[[$:/StoryList]contains<editTiddler>]\" variable=\"ignore\">\n<$macrocall $name=\"story-navigation\" actions=\"\"\"\n<$action-sendmessage $message=\"tm-edit-tiddler\" $param=<<editTiddler>>/>\n\"\"\"/>\n</$list>\n</$list>\n</$set>\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/more-tiddler-actions": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/more-tiddler-actions",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((more-tiddler-actions))",
            "text": "\\import $:/plugins/BurningTreeC/navigator/macros/states\n\n<$set name=\"focusedTiddler\" value={{{ [[$:/HistoryList]get[focus-tiddler]] }}}>\n<$macrocall $name=\"navigator-qualified-state-actions\" tiddler=<<focusedTiddler>> title=\"$:/state/popup/more\" storyOrSideBar=\"story\" level=\"3\" editOrView=\"view\" suffix=\"title\" template1=\"$:/core/ui/Buttons/more-tiddler-actions\" action=\"\"\"<$action-popup $popup=<<state>>/>\"\"\"/>\n</$set>\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/navigate-down": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/navigate-down",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((navigate-story-down))",
            "text": "\\import $:/plugins/BurningTreeC/navigator/macros/navigation\n\n<$set name=\"navigationTiddler\" value={{{ [list[$:/StoryList]after{$:/HistoryList!!focus-tiddler}] ~[list[$:/StoryList]nth[1]] ~[[HistoryList]get[previous-focus-tiddler]] }}}>\n<$macrocall $name=\"story-navigation\" actions=\"\"\"\n<$action-navigate $to=<<navigationTiddler>>/>\n\"\"\"/>\n</$set>\n\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/navigate-up": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/navigate-up",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((navigate-story-up))",
            "text": "\\import $:/plugins/BurningTreeC/navigator/macros/navigation\n\n<$set name=\"navigationTiddler\" value={{{ [list[$:/StoryList]before{$:/HistoryList!!focus-tiddler}] ~[list[$:/StoryList]last[]] ~[[HistoryList]get[previous-focus-tiddler]] }}}>\n<$macrocall $name=\"story-navigation\" actions=\"\"\"\n<$action-navigate $to=<<navigationTiddler>>/>\n\"\"\"/>\n</$set>\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/sidebar-search": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/sidebar-search",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((sidebar-search))",
            "text": "\\define focus-sidebar-actions()\n<$action-setfield $tiddler=\"$:/config/Search/AutoFocus\" text={{{ [[$:/config/Search/AutoFocus]get[text]removeprefix[yes]suffix[]addprefix[true]] ~[[$:/config/Search/AutoFocus]get[text]removeprefix[true]suffix[]addprefix[yes]] }}}/>\n\\end\n<$rootpipe>\n<$set name=\"transclusion\" value=\"{|$:/core/ui/PageTemplate|||}\">\n<$set name=\"transclusion\" value=\"{|$:/core/ui/PageTemplate/sidebar|||}\">\n<$set name=\"transclusion\" value=\"{|$:/core/ui/SideBarSegments/search|||}\">\n<$set name=\"focusPopup\" value=<<qualify \"$:/state/popup/search-dropdown\">>>\n<$list filter=\"[<focusPopup>is[missing]]\" emptyMessage='<$action-popup $popup=\"$:/temp/dummypopup\"/><$action-deletetiddler $tiddler=<<focusPopup>>/><$list filter=\"[[$:/temp/navigator/sidebarstate]!is[missing]get[text]prefix[hide]]\"><$action-setfield $tiddler=\"$:/state/sidebar\" text=\"no\"/><$action-deletetiddler $tiddler=\"$:/temp/navigator/sidebarstate\"/></$list><$action-deletetiddler $tiddler=\"$:/temp/dummypopup\"/>'>\n<$list filter=\"[[$:/state/sidebar]is[missing]] [[$:/state/sidebar]get[text]removeprefix[yes]suffix[]]\" emptyMessage=\"\"\"\n<$action-setfield $tiddler=\"$:/state/sidebar\" text=\"yes\"/><$action-setfield $tiddler=\"$:/temp/navigator/sidebarstate\" text=\"hide\"/><<focus-sidebar-actions>>\n\"\"\">\n<<focus-sidebar-actions>>\n</$list>\n</$list>\n</$set>\n</$set>\n</$set>\n</$set>\n</$rootpipe>\n\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/sidebar-state": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/sidebar-state",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((sidebar-state))",
            "text": "\\import $:/plugins/BurningTreeC/navigator/macros/navigation\n<$list filter=\"[[$:/state/sidebar]is[missing]] [[$:/state/sidebar]get[text]removeprefix[yes]suffix[]]\" emptyMessage=\"\"\"\n<<navigator-set-sidebar \"yes\">>\n\"\"\">\n<<navigator-set-sidebar \"no\">>\n<$rootpipe>\n<$set name=\"transclusion\" value=\"{|$:/core/ui/PageTemplate|||}\">\n<$set name=\"transclusion\" value=\"{|$:/core/ui/PageTemplate/sidebar|||}\">\n<$set name=\"transclusion\" value=\"{|$:/core/ui/SideBarSegments/search|||}\">\n<$set name=\"focusPopup\" value=<<qualify \"$:/state/popup/search-dropdown\">>>\n<$list filter=\"[<focusPopup>!is[missing]]\">\n<$action-popup $popup=\"$:/temp/dummypopup\"/><$action-deletetiddler $tiddler=\"$:/temp/dummypopup\"/><$action-deletetiddler $tiddler=<<focusPopup>>/>\n</$list>\n</$set>\n</$set>\n</$set>\n</$set>\n</$rootpipe>\n</$list>\n\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/sidebar-tab-next": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/sidebar-tab-next",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((sidebar-tab-next))",
            "text": "<$set name=\"transclusion\" value=\"\"\"{|$:/core/ui/PageTemplate|||}\"\"\">\n<$set name=\"transclusion\" value=\"\"\"{|$:/core/ui/PageTemplate/sidebar|||}\"\"\">\n<$set name=\"transclusion\" value=\"\"\"{|$:/core/ui/SideBarSegments/tabs|||}\"\"\">\n<$set name=\"state\" value=<<qualify \"$:/state/tab/sidebar\">>>\n<$set name=\"currentTab\" value={{{ [<state>get[text]] ~[{$:/config/DefaultSidebarTab}] }}}>\n<$action-setfield $tiddler=<<state>> text={{{ [all[shadows+tiddlers]tag[$:/tags/SideBar]after<currentTab>] ~[{$:/config/DefaultSidebarTab}]  }}}/>\n</$set>\n</$set>\n</$set>\n</$set>\n</$set>\n\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/sidebar-tab-previous": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/sidebar-tab-previous",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((sidebar-tab-previous))",
            "text": "<$set name=\"transclusion\" value=\"\"\"{|$:/core/ui/PageTemplate|||}\"\"\">\n<$set name=\"transclusion\" value=\"\"\"{|$:/core/ui/PageTemplate/sidebar|||}\"\"\">\n<$set name=\"transclusion\" value=\"\"\"{|$:/core/ui/SideBarSegments/tabs|||}\"\"\">\n<$set name=\"state\" value=<<qualify \"$:/state/tab/sidebar\">>>\n<$set name=\"currentTab\" value={{{ [<state>get[text]] ~[{$:/config/DefaultSidebarTab}] }}}>\n<$action-setfield $tiddler=<<state>> text={{{ [all[shadows+tiddlers]tag[$:/tags/SideBar]before<currentTab>] ~[all[shadows+tiddlers]tag[$:/tags/SideBar]last[]]  }}}/>\n</$set>\n</$set>\n</$set>\n</$set>\n</$set>\n\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/temporary/close-popup": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/temporary/close-popup",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((close-popup))",
            "text": "\\import [[$:/plugins/BurningTreeC/navigator]plugintiddlers[]tag[$:/tags/Macro]]\n\n<$action-popup $popup={{{ [<NavigatorVariablesPopupStateTiddler>get[text]] }}}/>\n\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/temporary/popup-accept": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/temporary/popup-accept",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((popup-accept))",
            "text": "\\import [[$:/plugins/BurningTreeC/navigator]plugintiddlers[]tag[$:/tags/Macro]]\n\n<$set name=\"popupItemStateVariable\" value={{{ [<NavigatorVariablesPopupStateTiddler>get[item-state-variable]] }}}>\n<$wikify name=\"popupItemState\" text=\"\"\"<$macrocall $name=<<popupItemStateVariable>>/>\"\"\">\n<$set name=\"currentPopupItem\" value={{{ [<popupItemState>get[text]] }}}>\n<$wikify name=\"currentPopupItemSuffix\" text=\"\"\"<$macrocall $name=\"navigatorSplit\" string=<<currentPopupItem>> char=\"/\"/>\"\"\">\n<$macrocall $name={{{ [[Navigator]addsuffix<currentPopupItemSuffix>addsuffix[action]] }}}/>\n</$wikify>\n</$set>\n</$wikify>\n</$set>\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/temporary/popup-down": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/temporary/popup-down",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((popup-down))",
            "text": "\\import [[$:/plugins/BurningTreeC/navigator]plugintiddlers[]tag[$:/tags/Macro]]\n\n<$set name=\"popupItemFilterTitle\" value={{{ [<NavigatorVariablesPopupStateTiddler>get[item-filter-variable]] }}}>\n<$wikify name=\"popupItemFilter\" text=\"\"\"<$macrocall $name=<<popupItemFilterTitle>>/>\"\"\">\n<$set name=\"popupItemStateTitle\" value={{{ [<NavigatorVariablesPopupStateTiddler>get[item-state-variable]] }}}>\n<$wikify name=\"popupItemState\" text=\"\"\"<$macrocall $name=<<popupItemStateTitle>>/>\"\"\">\n<$set name=\"currentPopupItem\" value={{{ [<popupItemState>get[text]] }}}>\n<$set name=\"lastPopupItem\" value={{{ [subfilter<popupItemFilter>last[]] }}}>\n<$list filter=\"[<popupItemState>is[missing]] [<popupItemState>!is[missing]get[text]suffix[]] [<popupItemState>!is[missing]get[text]!suffix[]removeprefix<lastPopupItem>suffix[]]\" emptyMessage=\"\"\"\n<$list filter=\"[subfilter<popupItemFilter>after<currentPopupItem>] ~[subfilter<popupItemFilter>nth[1]]\" variable=\"nextPopupItem\">\n<$action-setfield $tiddler=<<popupItemState>> text=<<nextPopupItem>>/>\n</$list>\n\"\"\">\n<$action-setfield $tiddler=<<popupItemState>> text={{{ [subfilter<popupItemFilter>nth[1]] }}}/>\n</$list>\n</$wikify>\n</$set>\n</$set>\n</$wikify>\n</$set>\n\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/temporary/popup-tab-next": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/temporary/popup-tab-next",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((popup-tab-next))",
            "text": "\\import [[$:/plugins/BurningTreeC/navigator]plugintiddlers[]tag[$:/tags/Macro]]\n<$list filter=\"[<NavigatorVariablesPopupTabsStateTiddler>get[text]]\" variable=\"popupTabsState\">\n<$set name=\"popupTabsFilter\" value={{{ [<NavigatorVariablesPopupTabsStateTiddler>get[tabs-filter]] }}}>\n<$set name=\"popupTabsDefault\" value={{{ [<NavigatorVariablesPopupTabsStateTiddler>get[tabs-default]] }}}>\n<$set name=\"currentPopupTab\" value={{{ [<popupTabsState>get[text]] ~[<popupTabsDefault>] }}}>\n<$action-setfield $tiddler=<<popupTabsState>> text={{{ [subfilter<popupTabsFilter>after<currentPopupTab>!suffix[]] ~[subfilter<popupTabsFilter>nth[1]] }}}>\n</$set>\n</$set>\n</$set>\n</$list>\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/temporary/popup-tab-previous": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/temporary/popup-tab-previous",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((popup-tab-previous))",
            "text": "\\import [[$:/plugins/BurningTreeC/navigator]plugintiddlers[]tag[$:/tags/Macro]]\n<$list filter=\"[<NavigatorVariablesPopupTabsStateTiddler>get[text]]\" variable=\"popupTabsState\">\n<$set name=\"popupTabsFilter\" value={{{ [<NavigatorVariablesPopupTabsStateTiddler>get[tabs-filter]] }}}>\n<$set name=\"popupTabsDefault\" value={{{ [<NavigatorVariablesPopupTabsStateTiddler>get[tabs-default]] }}}>\n<$set name=\"currentPopupTab\" value={{{ [<popupTabsState>get[text]] ~[<popupTabsDefault>] }}}>\n<$action-setfield $tiddler=<<popupTabsState>> text={{{ [subfilter<popupTabsFilter>before<currentPopupTab>!suffix[]] ~[subfilter<popupTabsFilter>last[]] }}}>\n</$set>\n</$set>\n</$set>\n</$list>\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/temporary/popup-up": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/temporary/popup-up",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((popup-up))",
            "text": "\\import [[$:/plugins/BurningTreeC/navigator]plugintiddlers[]tag[$:/tags/Macro]]\n\n<$set name=\"popupItemFilterTitle\" value={{{ [<NavigatorVariablesPopupStateTiddler>get[item-filter-variable]] }}}>\n<$wikify name=\"popupItemFilter\" text=\"\"\"<$macrocall $name=<<popupItemFilterTitle>>/>\"\"\">\n<$set name=\"popupItemStateTitle\" value={{{ [<NavigatorVariablesPopupStateTiddler>get[item-state-variable]] }}}>\n<$wikify name=\"popupItemState\" text=\"\"\"<$macrocall $name=<<popupItemStateTitle>>/>\"\"\">\n<$set name=\"currentPopupItem\" value={{{ [<popupItemState>get[text]] }}}>\n<$set name=\"firstPopupItem\" value={{{ [subfilter<popupItemFilter>nth[1]] }}}>\n<$list filter=\"[<popupItemState>is[missing]] [<popupItemState>!is[missing]get[text]suffix[]] [<popupItemState>!is[missing]get[text]!suffix[]removeprefix<firstPopupItem>suffix[]]\" emptyMessage=\"\"\"\n<$list filter=\"[subfilter<popupItemFilter>before<currentPopupItem>] ~[subfilter<popupItemFilter>last[]]\" variable=\"nextPopupItem\">\n<$action-setfield $tiddler=<<popupItemState>> text=<<nextPopupItem>>/>\n</$list>\n\"\"\">\n<$action-setfield $tiddler=<<popupItemState>> text={{{ [subfilter<popupItemFilter>last[]] }}}/>\n</$list>\n</$wikify>\n</$set>\n</$set>\n</$wikify>\n</$set>\n\n"
        },
        "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/tiddler-info": {
            "title": "$:/plugins/BurningTreeC/navigator/KeyboardShortcut/tiddler-info",
            "tags": "$:/tags/KeyboardShortcut",
            "key": "((tiddler-info))",
            "text": "\\import [[$:/plugins/BurningTreeC/navigator]plugintiddlers[]tag[$:/tags/Macro]]\n\n<$set name=\"focusedTiddler\" value={{{ [[$:/HistoryList]get[focus-tiddler]] }}}>\n<$macrocall $name=\"navigator-qualified-state-actions\" tiddler=<<focusedTiddler>> title=\"$:/state/popup/tiddler-info\" storyOrSideBar=\"story\" editOrView=\"view\" level=\"1\" action=\"\"\"<$action-popup $popup=<<state>>/>\"\"\"/>\n</$set>\n"
        },
        "$:/plugins/BurningTreeC/navigator/styles": {
            "title": "$:/plugins/BurningTreeC/navigator/styles",
            "tags": "$:/tags/Stylesheet",
            "text": "\\define style-focus-tiddler()\n\\rules only\n[data-tiddler-title=\"$(focusTiddler)$\"]$(focusedTiddlerSelectors)$ {\n$(focusedTiddlerStyles)$\n}\n\\end\n<$set name=\"focusedTiddlerSelectors\" value={{$:/config/FocusedTiddler/Style/ClassSelector}}>\n<$wikify name=\"focusedTiddlerStyles\" text={{$:/config/FocusedTiddler/Style}}>\n<$list filter=\"[[$:/HistoryList]get[focus-tiddler]escapecss[]]\" variable=\"focusTiddler\">\n<<style-focus-tiddler>>\n</$list>\n</$wikify>\n</$set>\n\n<$list filter=\"[[$:/temp/search/input]!is[missing]get[text]minlength{$:/config/MinLength/Search}]\">\n<$rootpipe>\n<$set name=\"transclusion\" value=\"{|$:/core/ui/PageTemplate|||}\">\n<$set name=\"transclusion\" value=\"{|$:/core/ui/PageTemplate/sidebar|||}\">\n<$set name=\"transclusion\" value=\"{|$:/core/ui/SideBarSegments/search|||}\">\n<$set name=\"focusPopup\" value=<<qualify \"$:/state/popup/search-dropdown\">>>\n<$list filter=\"[<focusPopup>!is[missing]]\">\n@media (max-width: {{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}}) {\n.tc-sidebar-scrollable {\noverflow: inherit !important;\n}\n}\n</$list>\n</$set>\n</$set>\n</$set>\n</$set>\n</$rootpipe>\n</$list>\n\n<$reveal state=\"$:/state/showeditpreview\" type=\"match\" text=\"yes\">\n.tc-edit-texteditor.tc-tiddler-editor {\nwidth: 49% !important;\ndisplay: inline-block !important;\n}\n</$reveal>\n\n<$vars selectedMorePopupItem={{{ [<NavigatorVariablesMorePopupSelectedItem>get[text]encodeuricomponent[]escapecss[]addprefix[.tc-btn-]] }}} selectedExportTiddlerPopupItem={{{ [<NavigatorVariablesExportTiddlerPopupSelectedItem>get[text]encodeuricomponent[]escapecss[]addprefix[.tc-btn-]] }}}>\n\n.tc-tag-button-selected, .tc-list-item-selected a.tc-tiddlylink {\n\tbackground-color: <<colour primary>>;\n}\n\n<<selectedMorePopupItem>> {\n\tbackground-color: <<colour primary>>;\n}\n\n<<selectedExportTiddlerPopupItem>> {\n\tbackground-color: <<colour primary>>;\n}\n\n</$vars>\n\n@media (max-width:{{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}}) {\n.tc-tiddler-frame {\nmargin-bottom: 0.5em;\n}\n<$reveal state=\"$:/state/sidebar\" type=\"match\" text=\"no\">\n.tc-sidebar-scrollable {\npadding: 0;\nheight: 0;\nmargin: 0;\n}\n</$reveal>\n}\n\n"
        },
        "$:/core/ui/DefaultSearchResultList": {
            "title": "$:/core/ui/DefaultSearchResultList",
            "tags": "$:/tags/SearchResults",
            "caption": "{{$:/language/Search/DefaultResults/Caption}}",
            "accept-actions": "<$list filter=\"[<selectedDropDownItem>!is[shadow]!is[missing]] [<selectedDropDownItem>is[shadow]]\" emptyMessage=\"\"\"<$action-sendmessage $message=\"tm-edit-tiddler\" $param=<<selectedDropDownItem>>/>\"\"\"><$action-navigate $to=<<selectedDropDownItem>>/></$list>",
            "clear-input-empty-actions": "<$action-deletetiddler $tiddler=<<__editTiddler__>>/><$action-deletetiddler $tiddler=<<__saveTiddler__>>/><$action-deletetiddler $tiddler=<<__refreshTiddler__>>/>",
            "dropdown-filter-1": "[subfilter<NavigatorSearchResultsTitle>]",
            "dropdown-filter-2": "[subfilter<NavigatorSearchResultsMore>]",
            "text": "\\define searchResultList()\n//<span style=\"font-size: 0.85em;\">sorted by:&nbsp;{{$:/temp/search/input}}</span>//<br>\n//<small>{{$:/language/Search/Matches/Title}}</small>//\n<$list filter=\"[subfilter<NavigatorSearchResultsTitle>]\">\n<$list filter=\"[{$:/temp/search}removeprefix<currentTiddler>suffix[]]\" variable=\"ignore\" emptyMessage=\"\"\"<$transclude tiddler=\"$:/core/ui/ListItemTemplate\"/>\"\"\">\n<span class=\"tc-list-item-selected\"><$transclude tiddler=\"$:/core/ui/ListItemTemplate\"/></span>\n</$list>\n</$list>\n\n//<small>{{$:/language/Search/Matches/More}}</small>//\n\n<$list filter=\"[subfilter<NavigatorSearchResultsMore>]\">\n<$list filter=\"[{$:/temp/search}removeprefix<currentTiddler>suffix[]]\" variable=\"ignore\" emptyMessage=\"\"\"<$transclude tiddler=\"$:/core/ui/ListItemTemplate\"/>\"\"\">\n<span class=\"tc-list-item-selected\"><$transclude tiddler=\"$:/core/ui/ListItemTemplate\"/></span>\n</$list>\n</$list>\n\n\\end\n<<searchResultList>>\n"
        },
        "$:/core/ui/EditTemplate/body/editor": {
            "title": "$:/core/ui/EditTemplate/body/editor",
            "text": "<$edit\n\n  field=\"text\"\n  class=\"tc-edit-texteditor\"\n  placeholder={{$:/language/EditTemplate/Body/Placeholder}}\n  tabindex={{$:/config/EditTabindex}}\n  cancelPopups={{$:/config/EditCancelPopups}}\n  refreshTiddler=\"$:/state/showeditpreview\"\n  refreshCondition={{{ [[$:/state/showeditpreview]get[preview-tiddler]removeprefix<currentTiddler>suffix[]addprefix[true]] ~[[false]] }}}\n  refreshAction=\"focus-again\"\n\n><$set\n\n  name=\"targetTiddler\"\n  value=<<currentTiddler>>\n\n><$list\n\n  filter=\"[all[shadows+tiddlers]tag[$:/tags/EditorToolbar]!has[draft.of]]\"\n\n><$reveal\n\n  type=\"nomatch\"\n  state=<<config-visibility-title>>\n  text=\"hide\"\n  class=\"tc-text-editor-toolbar-item-wrapper\"\n\n><$transclude\n\n  tiddler=\"$:/core/ui/EditTemplate/body/toolbar/button\"\n  mode=\"inline\"\n\n/></$reveal></$list></$set></$edit>\n"
        },
        "$:/core/ui/EditTemplate/body": {
            "title": "$:/core/ui/EditTemplate/body",
            "tags": "$:/tags/EditTemplate",
            "text": "\\define lingo-base() $:/language/EditTemplate/Body/\n\\define config-visibility-title()\n$:/config/EditorToolbarButtons/Visibility/$(currentTiddler)$\n\\end\n<$list filter=\"[all[current]has[_canonical_uri]]\">\n\n<div class=\"tc-message-box\">\n\n<<lingo External/Hint>>\n\n<a href={{!!_canonical_uri}}><$text text={{!!_canonical_uri}}/></a>\n\n<$edit-text field=\"_canonical_uri\" class=\"tc-edit-fields\" tabindex={{$:/config/EditTabindex}} cancelPopups={{$:/config/EditCancelPopups}}></$edit-text>\n\n</div>\n\n</$list>\n\n<$list filter=\"[all[current]!has[_canonical_uri]]\">\n\n<$reveal state=\"$:/state/showeditpreview\" type=\"match\" text=\"yes\">\n\n<div class=\"tc-tiddler-preview\">\n\n<$transclude tiddler=\"$:/core/ui/EditTemplate/body/editor\" mode=\"inline\"/>\n\n<div class=\"tc-tiddler-preview-preview\">\n\n<$transclude tiddler={{$:/state/editpreviewtype}} mode=\"inline\">\n\n<$transclude tiddler=\"$:/core/ui/EditTemplate/body/preview/output\" mode=\"inline\"/>\n\n</$transclude>\n\n</div>\n\n</div>\n\n</$reveal>\n\n<$reveal state=\"$:/state/showeditpreview\" type=\"nomatch\" text=\"yes\">\n\n<$transclude tiddler=\"$:/core/ui/EditTemplate/body/editor\" mode=\"inline\"/>\n\n</$reveal>\n\n</$list>\n"
        },
        "$:/core/ui/EditTemplate/fields": {
            "title": "$:/core/ui/EditTemplate/fields",
            "tags": "$:/tags/EditTemplate",
            "text": "\\define lingo-base() $:/language/EditTemplate/\n\\define config-title()\n$:/config/EditTemplateFields/Visibility/$(currentField)$\n\\end\n\n\\define config-filter()\n[[hide]] -[title{$(config-title)$}]\n\\end\n\n\\define new-field()\n<$vars name={{$:/temp/newfieldname}}>\n<$reveal type=\"nomatch\" text=\"\" default=<<name>>>\n<$button>\n<$action-sendmessage $message=\"tm-add-field\"\n$name=<<name>>\n$value={{$:/temp/newfieldvalue}}/>\n<$action-deletetiddler $tiddler=\"$:/temp/newfieldname\"/>\n<$action-deletetiddler $tiddler=\"$:/temp/newfieldvalue\"/>\n<<lingo Fields/Add/Button>>\n</$button>\n</$reveal>\n<$reveal type=\"match\" text=\"\" default=<<name>>>\n<$button>\n<<lingo Fields/Add/Button>>\n</$button>\n</$reveal>\n</$vars>\n\\end\n\n<div class=\"tc-edit-fields\">\n<table class=\"tc-edit-fields\">\n<tbody>\n<$list filter=\"[all[current]fields[]] +[sort[title]]\" variable=\"currentField\">\n<$list filter=<<config-filter>> variable=\"temp\">\n<tr class=\"tc-edit-field\">\n<td class=\"tc-edit-field-name\">\n<$text text=<<currentField>>/>:</td>\n<td class=\"tc-edit-field-value\">\n<$edit-text tiddler=<<currentTiddler>> field=<<currentField>> placeholder={{$:/language/EditTemplate/Fields/Add/Value/Placeholder}} tabindex={{$:/config/EditTabindex}} cancelPopups={{$:/config/EditCancelPopups}}/>\n</td>\n<td class=\"tc-edit-field-remove\">\n<$button class=\"tc-btn-invisible\" tooltip={{$:/language/EditTemplate/Field/Remove/Hint}} aria-label={{$:/language/EditTemplate/Field/Remove/Caption}}>\n<$action-deletefield $field=<<currentField>>/>\n{{$:/core/images/delete-button}}\n</$button>\n</td>\n</tr>\n</$list>\n</$list>\n</tbody>\n</table>\n</div>\n\n<$fieldmangler>\n<div class=\"tc-edit-field-add\">\n<em class=\"tc-edit\">\n<<lingo Fields/Add/Prompt>>\n</em>\n<span class=\"tc-edit-field-add-name\">\n<$edit-text tiddler=\"$:/temp/newfieldname\" tag=\"input\" default=\"\" placeholder={{$:/language/EditTemplate/Fields/Add/Name/Placeholder}} focusPopup=<<qualify \"$:/state/popup/field-dropdown\">> class=\"tc-edit-texteditor tc-popup-handle\" tabindex={{$:/config/EditTabindex}} cancelPopups={{$:/config/EditCancelPopups}}/>\n</span>\n<$button popup=<<qualify \"$:/state/popup/field-dropdown\">> class=\"tc-btn-invisible tc-btn-dropdown\" tooltip={{$:/language/EditTemplate/Field/Dropdown/Hint}} aria-label={{$:/language/EditTemplate/Field/Dropdown/Caption}}>{{$:/core/images/down-arrow}}</$button>\n<$reveal state=<<qualify \"$:/state/popup/field-dropdown\">> type=\"nomatch\" text=\"\" default=\"\">\n<div class=\"tc-block-dropdown tc-edit-type-dropdown\">\n<$set name=\"tv-show-missing-links\" value=\"yes\">\n<$linkcatcher to=\"$:/temp/newfieldname\">\n<div class=\"tc-dropdown-item\">\n<<lingo Fields/Add/Dropdown/User>>\n</div>\n<$list filter=\"[!is[shadow]!is[system]fields[]search:title{$:/temp/newfieldname}sort[]] -created -creator -draft.of -draft.title -modified -modifier -tags -text -title -type\"  variable=\"currentField\">\n<$link to=<<currentField>>>\n<<currentField>>\n</$link>\n</$list>\n<div class=\"tc-dropdown-item\">\n<<lingo Fields/Add/Dropdown/System>>\n</div>\n<$list filter=\"[fields[]search:title{$:/temp/newfieldname}sort[]] -[!is[shadow]!is[system]fields[]]\" variable=\"currentField\">\n<$link to=<<currentField>>>\n<<currentField>>\n</$link>\n</$list>\n</$linkcatcher>\n</$set>\n</div>\n</$reveal>\n<span class=\"tc-edit-field-add-value\">\n<$edit-text tiddler=\"$:/temp/newfieldvalue\" tag=\"input\" default=\"\" placeholder={{$:/language/EditTemplate/Fields/Add/Value/Placeholder}} class=\"tc-edit-texteditor\" tabindex={{$:/config/EditTabindex}} cancelPopups={{$:/config/EditCancelPopups}}/>\n</span>\n<span class=\"tc-edit-field-add-button\">\n<$macrocall $name=\"new-field\"/>\n</span>\n</div>\n</$fieldmangler>\n"
        },
        "$:/core/ui/EditTemplate/title": {
            "title": "$:/core/ui/EditTemplate/title",
            "tags": "$:/tags/EditTemplate",
            "text": "<$edit-text field=\"draft.title\" class=\"tc-titlebar tc-edit-texteditor\" focus=\"true\" tabindex={{$:/config/EditTabindex}} cancelPopups={{$:/config/EditCancelPopups}} refreshTiddler=\"$:/HistoryList\" refreshCondition={{{ [[$:/HistoryList]get[focus-tiddler]removeprefix<currentTiddler>suffix[]addprefix[true]] ~[[false]] }}} refreshAction=\"focus-scrollto\"/>\n\n<$vars pattern=\"\"\"[\\|\\[\\]{}]\"\"\" bad-chars=\"\"\"`| [ ] { }`\"\"\">\n\n<$list filter=\"[all[current]regexp:draft.title<pattern>]\" variable=\"listItem\">\n\n<div class=\"tc-message-box\">\n\n{{$:/core/images/warning}} {{$:/language/EditTemplate/Title/BadCharacterWarning}}\n\n</div>\n\n</$list>\n\n</$vars>\n\n<$reveal state=\"!!draft.title\" type=\"nomatch\" text={{!!draft.of}} tag=\"div\">\n\n<$list filter=\"[{!!draft.title}!is[missing]]\" variable=\"listItem\">\n\n<div class=\"tc-message-box\">\n\n{{$:/core/images/warning}} {{$:/language/EditTemplate/Title/Exists/Prompt}}\n\n</div>\n\n</$list>\n\n<$list filter=\"[{!!draft.of}!is[missing]]\" variable=\"listItem\">\n\n<$vars fromTitle={{!!draft.of}} toTitle={{!!draft.title}}>\n\n<$checkbox tiddler=\"$:/config/RelinkOnRename\" field=\"text\" checked=\"yes\" unchecked=\"no\" default=\"no\"> {{$:/language/EditTemplate/Title/Relink/Prompt}}</$checkbox>\n\n<$vars stateTiddler=<<qualify \"$:/state/edit/references\">> >\n\n<$reveal type=\"nomatch\" state=<<stateTiddler>> text=\"show\">\n<$button set=<<stateTiddler>> setTo=\"show\" class=\"tc-btn-invisible\">{{$:/core/images/right-arrow}} \n<<lingo EditTemplate/Title/References/Prompt>></$button>\n</$reveal>\n<$reveal type=\"match\" state=<<stateTiddler>> text=\"show\">\n<$button set=<<stateTiddler>> setTo=\"hide\" class=\"tc-btn-invisible\">{{$:/core/images/down-arrow}} \n<<lingo EditTemplate/Title/References/Prompt>></$button>\n</$reveal>\n\n<$reveal type=\"match\" state=<<stateTiddler>> text=\"show\">\n<$tiddler tiddler=<<fromTitle>> >\n<$transclude tiddler=\"$:/core/ui/TiddlerInfo/References\"/>\n</$tiddler>\n</$reveal>\n\n</$vars>\n\n</$vars>\n\n</$list>\n\n</$reveal>\n"
        },
        "$:/core/ui/EditTemplate/type": {
            "title": "$:/core/ui/EditTemplate/type",
            "tags": "$:/tags/EditTemplate",
            "text": "\\define lingo-base() $:/language/EditTemplate/\n<div class=\"tc-type-selector\"><$fieldmangler>\n<em class=\"tc-edit\"><<lingo Type/Prompt>></em> <$edit-text field=\"type\" tag=\"input\" default=\"\" placeholder={{$:/language/EditTemplate/Type/Placeholder}} focusPopup=<<qualify \"$:/state/popup/type-dropdown\">> class=\"tc-edit-typeeditor tc-popup-handle\" tabindex={{$:/config/EditTabindex}} cancelPopups={{$:/config/EditCancelPopups}}/> <$button popup=<<qualify \"$:/state/popup/type-dropdown\">> class=\"tc-btn-invisible tc-btn-dropdown\" tooltip={{$:/language/EditTemplate/Type/Dropdown/Hint}} aria-label={{$:/language/EditTemplate/Type/Dropdown/Caption}}>{{$:/core/images/down-arrow}}</$button> <$button message=\"tm-remove-field\" param=\"type\" class=\"tc-btn-invisible tc-btn-icon\" tooltip={{$:/language/EditTemplate/Type/Delete/Hint}} aria-label={{$:/language/EditTemplate/Type/Delete/Caption}}>{{$:/core/images/delete-button}}</$button>\n</$fieldmangler></div>\n\n<div class=\"tc-block-dropdown-wrapper\">\n<$set name=\"tv-show-missing-links\" value=\"yes\">\n<$reveal state=<<qualify \"$:/state/popup/type-dropdown\">> type=\"nomatch\" text=\"\" default=\"\">\n<div class=\"tc-block-dropdown tc-edit-type-dropdown\">\n<$linkcatcher to=\"!!type\">\n<$list filter='[all[shadows+tiddlers]prefix[$:/language/Docs/Types/]each[group]sort[group-sort]]'>\n<div class=\"tc-dropdown-item\">\n<$text text={{!!group}}/>\n</div>\n<$list filter=\"[all[shadows+tiddlers]prefix[$:/language/Docs/Types/]group{!!group}] +[sort[description]]\"><$link to={{!!name}}><$view field=\"description\"/> (<$view field=\"name\"/>)</$link>\n</$list>\n</$list>\n</$linkcatcher>\n</div>\n</$reveal>\n</$set>\n</div>\n"
        },
        "$:/core/ui/EditorToolbar/preview": {
            "title": "$:/core/ui/EditorToolbar/preview",
            "tags": "$:/tags/EditorToolbar",
            "icon": "$:/core/images/preview-open",
            "custom-icon": "yes",
            "caption": "{{$:/language/Buttons/Preview/Caption}}",
            "description": "{{$:/language/Buttons/Preview/Hint}}",
            "condition": "[<targetTiddler>]",
            "button-classes": "tc-text-editor-toolbar-item-start-group",
            "shortcuts": "((preview))",
            "text": "<$reveal state=\"$:/state/showeditpreview\" type=\"match\" text=\"yes\" tag=\"span\">\n{{$:/core/images/preview-open}}\n<$action-setfield $tiddler=\"$:/state/showeditpreview\" preview-tiddler=<<storyTiddler>>/>\n<$action-setfield $tiddler=\"$:/state/showeditpreview\" $value=\"no\"/>\n</$reveal>\n<$reveal state=\"$:/state/showeditpreview\" type=\"nomatch\" text=\"yes\" tag=\"span\">\n{{$:/core/images/preview-closed}}\n<$action-setfield $tiddler=\"$:/state/showeditpreview\" preview-tiddler=<<storyTiddler>>/>\n<$action-setfield $tiddler=\"$:/state/showeditpreview\" $value=\"yes\"/>\n</$reveal>\n"
        },
        "$:/core/ui/SearchResults": {
            "title": "$:/core/ui/SearchResults",
            "text": "<div class=\"tc-search-results\">\n\n<$list filter=\"[all[shadows+tiddlers]tag[$:/tags/SearchResults]!has[draft.of]butfirst[]limit[1]]\" emptyMessage=\"\"\"\n<$list filter=\"[all[shadows+tiddlers]tag[$:/tags/SearchResults]!has[draft.of]]\">\n<$transclude mode=\"block\"/>\n</$list>\n\"\"\">\n\n<$macrocall $name=\"tabs\" tabsList=\"[all[shadows+tiddlers]tag[$:/tags/SearchResults]!has[draft.of]]\" default={{$:/config/SearchResults/Default}} explicitState=\"$:/state/tab/search-results/sidebar\"/>\n\n</$list>\n\n</div>\n"
        },
        "$:/core/ui/SideBarSegments/search": {
            "title": "$:/core/ui/SideBarSegments/search",
            "tags": "$:/tags/SideBarSegment",
            "text": "<div class=\"tc-sidebar-lists\">\n\n<$vars searchTiddler=\"$:/temp/search\" defaultSearchResults={{$:/config/SearchResults/Default}} tabStateTiddler=\"$:/state/tab/search-results/sidebar\">\n<$set name=\"filterTiddler\" value={{{ [<tabStateTiddler>!is[missing]get[text]] ~[<defaultSearchResults>] }}}>\n<div class=\"tc-search\">\n<$keyboard key=\"((input-tabs-right))\" actions=\"\"\"<$macrocall $name=\"change-input-tab\" stateTitle=<<tabStateTiddler>> tag=\"$:/tags/SearchResults\" beforeafter=\"after\" defaultState=<<defaultSearchResults>>/>\"\"\">\n<$keyboard key=\"((input-tabs-left))\" actions=\"\"\"<$macrocall $name=\"change-input-tab\" stateTitle=<<tabStateTiddler>> tag=\"$:/tags/SearchResults\" beforeafter=\"before\" defaultState=<<defaultSearchResults>>/>\"\"\">\n<$macrocall $name=\"selectable-dropdown-input\" editTiddler=<<searchTiddler>> inputPopup=<<qualify \"$:/state/popup/search-dropdown\">> inputClass=\"tc-popup-handle\" inputFocus={{$:/config/Search/AutoFocus}} saveTiddler=\"$:/temp/search/input\" filterTiddler=<<filterTiddler>> refreshTiddler=\"$:/temp/SelectedSearchItem\" refreshCondition=\"\"\"[<__refreshTiddler__>get[refresh-qualifier]removeprefix<__refreshQualifier__>suffix[]addprefix[true]] ~[[false]]\"\"\" refreshAction=\"focus-update\" refreshQualifier=<<qualify \"$:/temp/search\">> filterMinLength={{$:/config/Search/MinLength}} cancelPopups={{$:/config/EditCancelPopups}}/>\n</$keyboard></$keyboard>\n<$reveal state=\"$:/temp/search/input\" type=\"nomatch\" text=\"\">\n<$button tooltip={{$:/language/Buttons/AdvancedSearch/Hint}} aria-label={{$:/language/Buttons/AdvancedSearch/Caption}} class=\"tc-btn-invisible\">\n<$action-setfield $tiddler=\"$:/temp/advancedsearch\" text={{$:/temp/search/input}}/>\n<$action-setfield $tiddler=\"$:/temp/search/input\" text=\"\"/>\n<$action-navigate $to=\"$:/AdvancedSearch\"/>\n{{$:/core/images/advanced-search-button}}\n</$button>\n<$button class=\"tc-btn-invisible\">\n<$action-setfield $tiddler=\"$:/temp/search\" text=\"\" />\n<$action-setfield $tiddler=\"$:/temp/search/input\" text=\"\" />\n{{$:/core/images/close-button}}\n</$button>\n<$button popup=<<qualify \"$:/state/popup/search-dropdown\">> class=\"tc-btn-invisible\">\n{{$:/core/images/down-arrow}}\n<$list filter=\"[{$:/temp/search/input}minlength{$:/config/Search/MinLength}limit[1]]\" variable=\"listItem\">\n<$set name=\"searchTerm\" value={{{ [[$:/temp/search/input]get[text]] }}}>\n<$set name=\"resultCount\" value=\"\"\"<$count filter=\"[!is[system]search<searchTerm>]\"/>\"\"\">\n{{$:/language/Search/Matches}}\n</$set>\n</$set>\n</$list>\n</$button>\n</$reveal>\n<$reveal state=\"$:/temp/search/input\" type=\"match\" text=\"\">\n<$button to=\"$:/AdvancedSearch\" tooltip={{$:/language/Buttons/AdvancedSearch/Hint}} aria-label={{$:/language/Buttons/AdvancedSearch/Caption}} class=\"tc-btn-invisible\">\n{{$:/core/images/advanced-search-button}}\n</$button>\n</$reveal>\n</div>\n\n<$reveal tag=\"div\" class=\"tc-block-dropdown-wrapper\" state=\"$:/temp/search/input\" type=\"nomatch\" text=\"\">\n\n<$reveal tag=\"div\" class=\"tc-block-dropdown tc-search-drop-down tc-popup-handle\" state=<<qualify \"$:/state/popup/search-dropdown\">> type=\"nomatch\" text=\"\" default=\"\">\n\n<$list filter=\"[{$:/temp/search/input}minlength{$:/config/Search/MinLength}limit[1]]\" emptyMessage=\"\"\"<div class=\"tc-search-results\">{{$:/language/Search/Search/TooShort}}</div>\"\"\" variable=\"listItem\">\n\n<$vars userInput={{$:/temp/search/input}}>\n\n{{$:/core/ui/SearchResults}}\n\n</$vars>\n\n</$list>\n\n</$reveal>\n\n</$reveal>\n\n</$set>\n\n</$vars>\n\n</div>\n"
        },
        "$:/plugins/BurningTreeC/navigator/ui/SystemSearchResultList": {
            "title": "$:/plugins/BurningTreeC/navigator/ui/SystemSearchResultList",
            "tags": "$:/tags/SearchResults",
            "caption": "{{$:/language/Search/SystemResults/Caption}}",
            "accept-actions": "<$list filter=\"[<selectedDropDownItem>!is[shadow]!is[missing]] [<selectedDropDownItem>is[shadow]]\" emptyMessage=\"\"\"<$action-sendmessage $message=\"tm-edit-tiddler\" $param=<<selectedDropDownItem>>/>\"\"\"><$action-navigate $to=<<selectedDropDownItem>>/></$list>",
            "clear-input-empty-actions": "<$action-deletetiddler $tiddler=<<__editTiddler__>>/><$action-deletetiddler $tiddler=<<__saveTiddler__>>/><$action-deletetiddler $tiddler=<<__refreshTiddler__>>/>",
            "dropdown-filter-1": "[subfilter<NavigatorSearchResultsSystemTitle>]",
            "dropdown-filter-2": "[subfilter<NavigatorSearchResultsSystemMore>]",
            "text": "\\define searchResultList()\n//<span style=\"font-size: 0.85em;\">sorted by:&nbsp;{{$:/temp/search/input}}</span>//<br>\n//<small>{{$:/language/Search/Matches/Title}}</small>//\n<$list filter=\"[subfilter<NavigatorSearchResultsSystemTitle>]\">\n<$list filter=\"[{$:/temp/search}removeprefix<currentTiddler>suffix[]]\" variable=\"ignore\" emptyMessage=\"\"\"<$transclude tiddler=\"$:/core/ui/ListItemTemplate\"/>\"\"\">\n<span class=\"tc-list-item-selected\"><$transclude tiddler=\"$:/core/ui/ListItemTemplate\"/></span>\n</$list>\n</$list>\n\n//<small>{{$:/language/Search/Matches/More}}</small>//\n\n<$list filter=\"\">\n<$list filter=\"[{$:/temp/search}removeprefix<currentTiddler>suffix[]]\" variable=\"ignore\" emptyMessage=\"\"\"<$transclude tiddler=\"$:/core/ui/ListItemTemplate\"/>\"\"\">\n<span class=\"tc-list-item-selected\"><$transclude tiddler=\"$:/core/ui/ListItemTemplate\"/></span>\n</$list>\n</$list>\n\n\\end\n<<searchResultList>>\n"
        },
        "$:/core/ui/TopBar/menu": {
            "title": "$:/core/ui/TopBar/menu",
            "tags": "$:/tags/TopRightBar",
            "text": "\\define sidebar-actions()\n{{$:/plugins/BurningTreeC/navigator/KeyboardShortcut/sidebar-state}}\n\\end\n<$reveal state=\"$:/state/sidebar\" type=\"nomatch\" text=\"no\">\n<$button actions=<<sidebar-actions>> tooltip={{$:/language/Buttons/HideSideBar/Hint}} aria-label={{$:/language/Buttons/HideSideBar/Caption}} class=\"tc-btn-invisible\">{{$:/core/images/chevron-right}}</$button>\n</$reveal>\n<$reveal state=\"$:/state/sidebar\" type=\"match\" text=\"no\">\n<$button actions=<<sidebar-actions>> tooltip={{$:/language/Buttons/ShowSideBar/Hint}} aria-label={{$:/language/Buttons/ShowSideBar/Caption}} class=\"tc-btn-invisible\">{{$:/core/images/chevron-left}}</$button>\n</$reveal>\n\n"
        },
        "$:/core/ui/ViewTemplate/title": {
            "title": "$:/core/ui/ViewTemplate/title",
            "tags": "$:/tags/ViewTemplate",
            "text": "\\define title-styles()\nfill:$(foregroundColor)$;\n\\end\n\\define config-title()\n$:/config/ViewToolbarButtons/Visibility/$(listItem)$\n\\end\n<div class=\"tc-tiddler-title\">\n<div class=\"tc-titlebar\">\n<span class=\"tc-tiddler-controls\">\n<$list filter=\"[all[shadows+tiddlers]tag[$:/tags/ViewToolbar]!has[draft.of]]\" variable=\"listItem\"><$reveal type=\"nomatch\" state=<<config-title>> text=\"hide\"><$set name=\"tv-config-toolbar-class\" filter=\"[<tv-config-toolbar-class>] [<listItem>encodeuricomponent[]addprefix[tc-btn-]]\"><$transclude tiddler=<<listItem>>/></$set></$reveal></$list>\n</span>\n<$set name=\"tv-wikilinks\" value={{$:/config/Tiddlers/TitleLinks}}>\n<$link>\n<$set name=\"foregroundColor\" value={{!!color}}>\n<span class=\"tc-tiddler-title-icon\" style=<<title-styles>>>\n<$transclude tiddler={{!!icon}}/>\n</span>\n</$set>\n<$list filter=\"[all[current]removeprefix[$:/]]\">\n<h2 class=\"tc-title\" title={{$:/language/SystemTiddler/Tooltip}}>\n<span class=\"tc-system-title-prefix\">$:/</span><$text text=<<currentTiddler>>/>\n</h2>\n</$list>\n<$list filter=\"[all[current]!prefix[$:/]]\">\n<h2 class=\"tc-title\">\n<$view field=\"title\"/>\n</h2>\n</$list>\n</$link>\n</$set>\n</div>\n\n<$reveal type=\"nomatch\" text=\"\" default=\"\" state=<<tiddlerInfoState>> class=\"tc-tiddler-info tc-popup-handle\" animate=\"yes\" retain=\"yes\" openActions=<<navigator-tiddlerinfo-openactions>> closeActions=<<navigator-tiddlerinfo-closeactions>>>\n\n<$list filter=\"[all[shadows+tiddlers]tag[$:/tags/TiddlerInfoSegment]!has[draft.of]] [[$:/core/ui/TiddlerInfo]]\" variable=\"listItem\"><$transclude tiddler=<<listItem>> mode=\"block\"/></$list>\n\n</$reveal>\n</div>\n"
        },
        "$:/core/ui/Buttons/info": {
            "title": "$:/core/ui/Buttons/info",
            "tags": "$:/tags/ViewToolbar",
            "caption": "{{$:/core/images/info-button}} {{$:/language/Buttons/Info/Caption}}",
            "description": "{{$:/language/Buttons/Info/Hint}}",
            "text": "\\whitespace trim\n\\define button-content()\n<$list filter=\"[<tv-config-toolbar-icons>prefix[yes]]\">\n{{$:/core/images/info-button}}\n</$list>\n<$list filter=\"[<tv-config-toolbar-text>prefix[yes]]\">\n<span class=\"tc-btn-text\">\n<$text text={{$:/language/Buttons/Info/Caption}}/>\n</span>\n</$list>\n\\end\n<$reveal state=\"$:/config/TiddlerInfo/Mode\" type=\"match\" text=\"popup\">\n<$button popup=<<tiddlerInfoState>> tooltip={{$:/language/Buttons/Info/Hint}} aria-label={{$:/language/Buttons/Info/Caption}} class=<<tv-config-toolbar-class>> selectedClass=\"tc-selected\">\n<$macrocall $name=\"button-content\" mode=\"inline\"/>\n</$button>\n</$reveal>\n<$reveal state=\"$:/config/TiddlerInfo/Mode\" type=\"match\" text=\"sticky\">\n<$reveal state=<<tiddlerInfoState>> type=\"match\" text=\"\" default=\"\">\n<$button set=<<tiddlerInfoState>> setTo=\"yes\" tooltip={{$:/language/Buttons/Info/Hint}} aria-label={{$:/language/Buttons/Info/Caption}} class=<<tv-config-toolbar-class>> selectedClass=\"tc-selected\">\n<$macrocall $name=\"button-content\" mode=\"inline\"/>\n</$button>\n</$reveal>\n<$reveal state=<<tiddlerInfoState>> type=\"nomatch\" text=\"\" default=\"\">\n<$button set=<<tiddlerInfoState>> setTo=\"\" tooltip={{$:/language/Buttons/Info/Hint}} aria-label={{$:/language/Buttons/Info/Caption}} class=<<tv-config-toolbar-class>> selectedClass=\"tc-selected\">\n<$macrocall $name=\"button-content\" mode=\"inline\"/>\n</$button>\n</$reveal>\n</$reveal>"
        },
        "$:/core/ui/Buttons/more-tiddler-actions": {
            "title": "$:/core/ui/Buttons/more-tiddler-actions",
            "tags": "$:/tags/ViewToolbar",
            "caption": "{{$:/core/images/down-arrow}} {{$:/language/Buttons/More/Caption}}",
            "description": "{{$:/language/Buttons/More/Hint}}",
            "text": "\\whitespace trim\n\\define config-title()\n$:/config/ViewToolbarButtons/Visibility/$(listItem)$\n\\end\n<$button popupTitle=<<qualify \"$:/state/popup/more\">> tooltip={{$:/language/Buttons/More/Hint}} aria-label={{$:/language/Buttons/More/Caption}} class=<<tv-config-toolbar-class>> selectedClass=\"tc-selected\">\n<$list filter=\"[<tv-config-toolbar-icons>prefix[yes]]\">\n{{$:/core/images/down-arrow}}\n</$list>\n<$list filter=\"[<tv-config-toolbar-text>prefix[yes]]\">\n<span class=\"tc-btn-text\">\n<$text text=\" \"/>\n<$text text={{$:/language/Buttons/More/Caption}}/>\n</span>\n</$list>\n</$button>\n<$reveal stateTitle=<<qualify \"$:/state/popup/more\">> type=\"popup\" position=\"belowleft\" animate=\"yes\" openActions=<<navigator-more-tiddler-openactions>> closeActions=<<navigator-more-tiddler-closeactions>>>\n\n<div class=\"tc-drop-down\">\n\n<$set name=\"tv-config-toolbar-icons\" value=\"yes\">\n\n<$set name=\"tv-config-toolbar-text\" value=\"yes\">\n\n<$set name=\"tv-config-toolbar-class\" value=\"tc-btn-invisible\">\n\n<$list filter=\"[subfilter<NavigatorMoreTiddlerFilter>]\" variable=\"listItem\">\n\n<$set name=\"tv-config-toolbar-class\" filter=\"[<tv-config-toolbar-class>] [<listItem>encodeuricomponent[]addprefix[tc-btn-]]\">\n\n<$transclude tiddler=<<listItem>> mode=\"inline\"/>\n\n</$set>\n\n</$list>\n\n</$set>\n\n</$set>\n\n</$set>\n\n</div>\n\n</$reveal>\n"
        },
        "$:/plugins/BurningTreeC/navigator/usage": {
            "title": "$:/plugins/BurningTreeC/navigator/usage",
            "text": "Usage here\n"
        }
    }
}