author: SimonHuber
created: 20190216115329728
dependents: 
description: escapecss[ ] - a filter and polyfill for generation of valid css-selectors
list: readme license
modified: 20190216115329728
plugin-type: plugin
title: $:/plugins/BurningTreeC/escapecss
type: application/json
version: v0.0.5

{
    "tiddlers": {
        "$:/plugins/BurningTreeC/escapecss/modules/startup/CSSescape.js": {
            "text": "/*\\\ntitle: $:/plugins/BurningTreeC/escapecss/modules/startup/CSSescape.js\ntype: application/javascript\nmodule-type: startup\n\nPolyfill for CSS.escape\n\n\\*/\n(function(root,factory){\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n// Export name and synchronous status\nexports.name = \"css-escape\";\nexports.platforms = [\"browser\"];\nexports.after = [\"startup\"];\nexports.synchronous = true;\n\n/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\n// https://github.com/umdjs/umd/blob/master/returnExports.js\nexports.startup = factory(root);\n}(typeof global != 'undefined' ? global : this, function(root) {\n\n\tif (root.CSS && root.CSS.escape) {\n\t\treturn;\n\t}\n\n\t// https://drafts.csswg.org/cssom/#serialize-an-identifier\n\tvar cssEscape = function(value) {\n\t\tif (arguments.length == 0) {\n\t\t\tthrow new TypeError('`CSS.escape` requires an argument.');\n\t\t}\n\t\tvar string = String(value);\n\t\tvar length = string.length;\n\t\tvar index = -1;\n\t\tvar codeUnit;\n\t\tvar result = '';\n\t\tvar firstCodeUnit = string.charCodeAt(0);\n\t\twhile (++index < length) {\n\t\t\tcodeUnit = string.charCodeAt(index);\n\t\t\t// Note: there’s no need to special-case astral symbols, surrogate\n\t\t\t// pairs, or lone surrogates.\n\n\t\t\t// If the character is NULL (U+0000), then the REPLACEMENT CHARACTER\n\t\t\t// (U+FFFD).\n\t\t\tif (codeUnit == 0x0000) {\n\t\t\t\tresult += '\\uFFFD';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t// If the character is in the range [\\1-\\1F] (U+0001 to U+001F) or is\n\t\t\t\t// U+007F, […]\n\t\t\t\t(codeUnit >= 0x0001 && codeUnit <= 0x001F) || codeUnit == 0x007F ||\n\t\t\t\t// If the character is the first character and is in the range [0-9]\n\t\t\t\t// (U+0030 to U+0039), […]\n\t\t\t\t(index == 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039) ||\n\t\t\t\t// If the character is the second character and is in the range [0-9]\n\t\t\t\t// (U+0030 to U+0039) and the first character is a `-` (U+002D), […]\n\t\t\t\t(\n\t\t\t\t\tindex == 1 &&\n\t\t\t\t\tcodeUnit >= 0x0030 && codeUnit <= 0x0039 &&\n\t\t\t\t\tfirstCodeUnit == 0x002D\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// https://drafts.csswg.org/cssom/#escape-a-character-as-code-point\n\t\t\t\tresult += '\\\\' + codeUnit.toString(16) + ' ';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t// If the character is the first character and is a `-` (U+002D), and\n\t\t\t\t// there is no second character, […]\n\t\t\t\tindex == 0 &&\n\t\t\t\tlength == 1 &&\n\t\t\t\tcodeUnit == 0x002D\n\t\t\t) {\n\t\t\t\tresult += '\\\\' + string.charAt(index);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If the character is not handled by one of the above rules and is\n\t\t\t// greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or\n\t\t\t// is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to\n\t\t\t// U+005A), or [a-z] (U+0061 to U+007A), […]\n\t\t\tif (\n\t\t\t\tcodeUnit >= 0x0080 ||\n\t\t\t\tcodeUnit == 0x002D ||\n\t\t\t\tcodeUnit == 0x005F ||\n\t\t\t\tcodeUnit >= 0x0030 && codeUnit <= 0x0039 ||\n\t\t\t\tcodeUnit >= 0x0041 && codeUnit <= 0x005A ||\n\t\t\t\tcodeUnit >= 0x0061 && codeUnit <= 0x007A\n\t\t\t) {\n\t\t\t\t// the character itself\n\t\t\t\tresult += string.charAt(index);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Otherwise, the escaped character.\n\t\t\t// https://drafts.csswg.org/cssom/#escape-a-character\n\t\t\tresult += '\\\\' + string.charAt(index);\n\n\t\t}\n\t\treturn result;\n\t};\n\n\tif (!root.CSS) {\n\t\troot.CSS = {};\n\t}\n\n\troot.CSS.escape = cssEscape;\n\n}));\n",
            "type": "application/javascript",
            "title": "$:/plugins/BurningTreeC/escapecss/modules/startup/CSSescape.js",
            "module-type": "startup"
        },
        "$:/plugins/BurningTreeC/escapecss/modules/filters/escapecss.js": {
            "text": "/*\\\ntitle: $:/plugins/BurningTreeC/escapecss/modules/filters/escapecss.js\ntype: application/javascript\nmodule-type: filteroperator\nFilter operator for applying CSS.escape() to each item.\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nExport our filter functions\n*/\n\nexports.escapecss = function(source,operator,options) {\n\tvar results = [];\n\tsource(function(tiddler,title) {\n\t\t// escape any character with a special meaning in CSS using CSS.escape()\n\t\tresults.push(CSS.escape(title));\n\t});\n\treturn results;\n};\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/plugins/BurningTreeC/escapecss/modules/filters/escapecss.js",
            "module-type": "filteroperator"
        },
        "$:/plugins/BurningTreeC/escapecss/license": {
            "title": "$:/plugins/BurningTreeC/escapecss/license",
            "text": "The ''CSS.escape'' polyfill by [ext[@mathiasbynens|https://mathiasbynens.be]]\n\n```\nCopyright Mathias Bynens <https://mathiasbynens.be/>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\nThe ''escapecss[]'' plugin by [ext[@BurningTreeC|https://github.com/BurningTreeC]]\n\n```\nCopyright Simon Huber https://github.com/BurningTreeC\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n"
        },
        "$:/plugins/BurningTreeC/escapecss/readme": {
            "title": "$:/plugins/BurningTreeC/escapecss/readme",
            "text": "! escapecss[]\n\n!! About\n\nThis plugin adds a new ''escapecss'' filter to [ext[TiddlyWiki5|https://tiddlywiki.com]] which uses the Browser-native [ext[CSS.escape|https://developer.mozilla.org/docs/Web/API/CSS/escape]] to generate ''valid'' [ext[CSS selectors|https://developer.mozilla.org/docs/Web/CSS/CSS_Selectors]]\n\nFor Browsers not supporting ''CSS.escape'' [ext[a polyfill|https://github.com/mathiasbynens/CSS.escape/blob/master/css.escape.js]] adds its functionality\n\nThanks and Kudos to [ext[@mathiasbynens|https://github.com/mathiasbynens]] for creating the polyfill and releasing it under [ext[MIT LICENSE|https://github.com/mathiasbynens/CSS.escape/blob/master/LICENSE-MIT.txt]]\n\n!! Examples\n\nSince TiddlyWiki version 5.1.16 Tiddlers can be addressed through [ext[data attributes|https://tiddlywiki.com/#Custom%20styles%20by%20data-tiddler-title:%5B%5BCustom%20styles%20by%20data-tiddler-title%5D%5D%20%5B%5BCustom%20styles%20by%20data-tags%5D%5D]]\n\nTiddler-Titles can contain characters that aren't valid for CSS selectors. The solution is to escape them through CSS.escape:\n\n```\n<$list filter=\"[all[tiddlers]tag[$:/tags/very-bad-title]escapecss[]]\">\n\n</$list>\n```\n\nWe can assign css properties to a generated, cssescaped selector from within a [ext[Stylesheet Tiddler|https://tiddlywiki.com/#Using%20Stylesheets]]:\n\nNote the rules pragma `\\rules only` on top of `assign-css` - it disables all parsing rules for the `assign-css` macro, so that titles can contain characters and character-sequences that would be rendered by the wiki-parser\n\n```\n\\define assign-css()\n\\rules only\n[data-tiddler-title=\"$(currentTiddler)$\"].tc-tiddler-frame {\nborder-radius: 50%;\n}\n\\end\n<$list filter=\"[all[tiddlers]tag[$:/tags/very-bad-title]escapecss[]]\">\n<<assign-css>>\n</$list>\n```\n\n"
        }
    }
}